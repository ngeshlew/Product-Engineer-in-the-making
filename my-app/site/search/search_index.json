{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AI Product Engineer Course (Internal)","text":"<p>This internal site teaches AI and LLM concepts while building a customer\u2011service chatbot capstone (using Rivet). Content is attribution\u2011rich and compiled from curated sources.</p>","tags":["overview"]},{"location":"#what-youll-find","title":"What you'll find","text":"<ul> <li>Expert modules: theory \u2192 practice \u2192 evaluation</li> <li>Capstone: Rivet flows, RAG over course content, safety, and observability</li> <li>Perspectives: multiple authoritative sources per concept</li> <li>Competitor watch and News</li> </ul> <p>Start with Modules, then follow the Capstone track.</p>","tags":["overview"]},{"location":"CommitMode/","title":"Commit Mode","text":"<p>Commit Mode is a focused workflow to keep changes small, reviewable, and testable.</p>"},{"location":"CommitMode/#steps","title":"Steps","text":"<p>1) Restate goal and constraints (2-3 lines) 2) Plan a minimal viable change    - enumerate target files only    - acceptance checks (tests/build/behavior) 3) Execute only what you planned 4) Validate with build/tests; summarize results 5) Produce a Conventional Commit</p>"},{"location":"CommitMode/#conventional-commits","title":"Conventional Commits","text":"<ul> <li>feat(scope?): description</li> <li>fix(scope?): description</li> <li>docs|refactor|test|chore|build|ci|perf|style: description</li> </ul> <p>Body: what and why; notable impacts Footer: issues/refs/breaking changes</p>"},{"location":"CommitMode/#examples","title":"Examples","text":"<ul> <li>feat(api): add pagination params to list endpoint</li> <li>fix(auth): handle expired refresh tokens on startup</li> </ul>"},{"location":"CommitMode/#tips","title":"Tips","text":"<ul> <li>If scope grows, pause and re-/plan</li> <li>Prefer multiple small commits over one large one</li> </ul>"},{"location":"CursorRules/","title":"Cursor Rules","text":"<p>Core rules live under <code>.cursor/rules/</code>.</p> <ul> <li><code>ripersigma105.mdc</code> \u2014 Sigma core (modes, permissions, protection, context)</li> <li><code>cursorstarter-core.mdc</code> \u2014 workflow &amp; etiquette</li> <li><code>design-systems.mdc</code> \u2014 Apple/Material/Carbon/Tailwind guidance across modes</li> <li><code>commit-mode.mdc</code>, <code>code-protection.mdc</code>, <code>context.mdc</code>, <code>permissions.mdc</code></li> </ul> <p>Use commands in Cursor Chat: <code>/init</code>, <code>/plan</code>, <code>/execute</code>, <code>/review</code>, <code>/commit</code>.</p>"},{"location":"MCP/","title":"MCP Setup (Optional)","text":"<p>This starter includes <code>.cursor/mcp.json</code> with optional servers: - filesystem - github (requires <code>GITHUB_TOKEN</code>) - brave-search (requires <code>BRAVE_SEARCH_API_KEY</code>) - puppeteer - docker</p>"},{"location":"MCP/#usage","title":"Usage","text":"<p>1) Export environment variables as needed 2) In Cursor settings, enable MCP and allow these servers 3) Use MCP tools directly in Cursor Chat for repository, search, and automation tasks</p>"},{"location":"Structure/","title":"Structure","text":"<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>"},{"location":"Structure/#directories","title":"Directories","text":"<ul> <li><code>.cursor/</code>: Cursor config and rules</li> <li><code>docs/</code>: human-readable documentation (see <code>webdev-integration.md</code> for mode overlays)</li> <li><code>wiki/</code>: GitHub Wiki content (optional mirror of docs)</li> <li><code>scripts/</code>: helper scripts</li> <li><code>memory-bank/</code>: durable project context</li> </ul>"},{"location":"Structure/#memory-bank-files","title":"Memory Bank Files","text":"<ul> <li><code>projectbrief.md</code>: goals, scope, success criteria</li> <li><code>systemPatterns.md</code>: architecture and key decisions</li> <li><code>techContext.md</code>: stack, dependencies, environment</li> <li><code>activeContext.md</code>: current focus, next steps, references</li> <li><code>progress.md</code>: features, milestones, issues</li> <li><code>protection.md</code>: protected regions, approvals, violations</li> </ul>"},{"location":"Structure/#templates-are-created-by-scriptsinitsh-keep-these-files-current-they-improve-cursors-context-and-your-onboarding-speed","title":"Templates are created by <code>scripts/init.sh</code>. Keep these files current; they improve Cursor's context and your onboarding speed.","text":"<ul> <li><code>memory-bank/</code> durable context</li> <li><code>.cursor/rules/</code> automation &amp; mode rules</li> <li><code>docs/</code> reference and guides</li> <li><code>docs/ripersigma/*</code> core framework docs</li> <li><code>docs/design-systems/*</code> meta-guidelines and decision tree for Apple, Material, Carbon, Tailwind</li> <li><code>scripts/</code> CLI helpers <p>b70844c (Add design systems integration framework and documentation)</p> </li> </ul>"},{"location":"TodoWrite/","title":"TodoWrite \u2014 Public Wiki (Free) Strategy","text":"<ul> <li>[x] Research constraints: GitHub Pages for private repos requires public visibility or paid plan</li> <li>[x] Scan codebase for Context7 and TodoWrite references (none found); adopt simple Markdown tracker</li> <li>[x] Examine existing pages setup (docs/ Jekyll, wiki/ content, publish-wiki.sh)</li> <li>[x] Propose three free approaches and evaluate trade-offs</li> <li>[x] Decide approach: Cloudflare Pages building MkDocs site from <code>wiki/</code></li> <li>[x] Implement MkDocs config (<code>mkdocs.yml</code>), requirements (<code>requirements.txt</code>)</li> <li>[x] Add robust build script <code>scripts/build-wiki.sh</code> with error handling and <code>--strict</code></li> <li>[x] Remove submodule gitlink causing CI clone failure</li> <li>[x] Fix dependency conflict (mkdocs 1.5.3 + material 9.5.18)</li> <li>[x] Remove invalid <code>site_url</code></li> <li>[x] Update docs-scoped MkDocs config (<code>docs/mkdocs.yml</code>) for Cloudflare root=docs</li> <li>[x] Fix nav to use docs_dir-relative paths; neutralize broken links in <code>wiki/commands/Index.md</code></li> <li>[x] Add CI check (GitHub Actions) to run <code>mkdocs build --strict</code> and markdownlint</li> <li>[ ] Configure Cloudflare Pages: Root <code>docs/</code>; Build <code>pip install -r requirements.txt &amp;&amp; mkdocs build --config-file mkdocs.yml --strict</code>; Output <code>site</code></li> <li>[ ] Optional: Add Netlify fallback (<code>netlify.toml</code>)</li> </ul>"},{"location":"TodoWrite/#options-considered","title":"Options considered","text":"<ul> <li>Option A \u2014 Mirror wiki/docs to a separate public repo and use that repo\u2019s GitHub Pages or Wiki</li> <li>Pros: Stays within GitHub; public access; simple viewer experience</li> <li>Cons: Requires an extra public repo; needs automation to mirror; permission mgmt across repos</li> <li>Option B \u2014 Cloudflare Pages builds the <code>wiki/</code> with MkDocs (chosen)</li> <li>Pros: Free; works with private repos; fast CDN; simple setup; good theming/search</li> <li>Cons: External provider; Python build required; needs Pages integration</li> <li>Option C \u2014 Read the Docs (MkDocs) or Netlify (static hosting) from the same repo</li> <li>Pros: Free plans; good docs UX (RTD); easy deploy (Netlify)</li> <li>Cons: RTD best for public repos; Netlify requires provider linkage and build setup</li> </ul>"},{"location":"TodoWrite/#notes","title":"Notes","text":"<ul> <li>Context7 not present; applied general best practices: strict builds, explicit requirements, defensive checks, and clear error messages.</li> <li>If later you want a public GitHub-only solution, create a public docs repo and push <code>site/</code> or mirror <code>wiki/</code> to that repo.</li> </ul>"},{"location":"glossary/","title":"Glossary","text":"<p>Key terms and definitions used across the course.</p> <ul> <li>LLM: Large Language Model</li> <li>RAG: Retrieval-Augmented Generation</li> <li>SLO: Service Level Objective</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#cursor-starter-installation-guide","title":"Cursor Starter \u2014 Installation Guide","text":"<p>This guide installs and runs the Cursor Starter from scratch. Steps are ordered exactly as required: download the framework from GitHub, copy the framework files, create directory structures, initialize the framework, and then complete the rest of the setup.</p>"},{"location":"installation/#supported-platforms","title":"Supported platforms","text":"<ul> <li>macOS 12+</li> <li>Ubuntu/Debian Linux (or similar)</li> <li>Windows 11 via WSL2 Ubuntu</li> <li>Docker (optional)</li> </ul>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git 2.35+ (<code>git --version</code>)</li> <li>Node.js 18 LTS or 20 LTS (<code>node -v</code>)</li> <li>One package manager: pnpm 8+ (recommended) / npm 9+ / yarn 1.x</li> <li>Optional: Docker 24+ and Docker Compose v2</li> </ul>"},{"location":"installation/#1-download-the-framework-clone-from-github","title":"1) Download the framework (clone from GitHub)","text":"<p>Option A \u2014 Use this repository directly:</p> <pre><code>git clone https://github.com/ngeshlew/cursorstarter.git cursor-starter\ncd cursor-starter\n</code></pre> <p>Option B \u2014 Use as a template (recommended for new projects): - On GitHub, click \u201cUse this template\u201d on <code>ngeshlew/cursorstarter</code> and create your new repository. - Then clone your new repo:</p> <pre><code>git clone https://github.com/&lt;your-user&gt;/&lt;your-repo&gt;.git\ncd &lt;your-repo&gt;\n</code></pre> <p>Option C \u2014 Degit (copy without git history):</p> <pre><code>npm create degit@latest ngeshlew/cursorstarter my-app\ncd my-app\n</code></pre>"},{"location":"installation/#2-copy-the-framework-files","title":"2) Copy the framework files","text":"<p>If you cloned into a temporary folder and wish to copy the framework into another project directory:</p> <pre><code># Example: copy from ./cursor-starter into ./my-app\nmkdir -p my-app\nrsync -a --exclude .git cursor-starter/ my-app/\n# Fallback without rsync:\n# cp -a cursor-starter/. my-app/\ncd my-app\n</code></pre> <p>If you already created your repo via \u201cUse this template\u201d or degit, you can skip copying and just <code>cd</code> into your project folder.</p>"},{"location":"installation/#3-create-directory-structures","title":"3) Create directory structures","text":"<p>If these paths do not already exist, create them:</p> <pre><code>mkdir -p .cursor/rules memory-bank/backups docs wiki scripts\n</code></pre> <p>These are used by Cursor workflows, memory bank backups, docs, local wiki, and helper scripts.</p>"},{"location":"installation/#4-initialize-the-framework","title":"4) Initialize the framework","text":"<p>Run the initialization script to seed required files and update the README with quick Cursor commands:</p> <pre><code>bash scripts/init.sh\n# or\nchmod +x scripts/init.sh &amp;&amp; ./scripts/init.sh\n</code></pre> <p>You should see \u201cInitialization complete. Open in Cursor and start with /init then /plan.\u201d</p>"},{"location":"installation/#5-install-node-and-a-package-manager","title":"5) Install Node and a package manager","text":"<p>Recommended: nvm + pnpm via Corepack.</p> <p>macOS/Linux (including WSL2 Ubuntu):</p> <pre><code># Install nvm\ncurl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\nexport NVM_DIR=\"$HOME/.nvm\" &amp;&amp; . \"$NVM_DIR/nvm.sh\"\n# Install Node LTS\nnvm install --lts\n# Enable pnpm\ncorepack enable\ncorepack prepare pnpm@latest --activate\n</code></pre> <p>Alternatively, you can use npm or yarn if preferred.</p>"},{"location":"installation/#6-configure-environment-variables","title":"6) Configure environment variables","text":"<p>If present, copy <code>.env.example</code> to <code>.env.local</code> and fill values:</p> <pre><code>[ -f .env.example ] &amp;&amp; cp .env.example .env.local || true\n</code></pre> <p>Common variables: - <code>NODE_ENV=development</code> - <code>PORT=3000</code> - Any project\u2011specific keys (e.g., <code>NEXT_PUBLIC_*</code>)</p> <p>Never commit secrets; use <code>.env.local</code> for local development.</p>"},{"location":"installation/#7-install-dependencies","title":"7) Install dependencies","text":"<pre><code>pnpm install\n# or: npm install\n# or: yarn install\n</code></pre>"},{"location":"installation/#8-run-the-development-server","title":"8) Run the development server","text":"<pre><code>pnpm dev\n# or: npm run dev\n# or: yarn dev\n</code></pre> <p>Open the URL printed in your terminal (commonly <code>http://localhost:3000</code>).</p>"},{"location":"installation/#9-linting-formatting-type-checks-and-tests","title":"9) Linting, formatting, type checks, and tests","text":"<pre><code>pnpm lint\npnpm format\npnpm typecheck\npnpm test\n</code></pre> <p>If Husky hooks are used, enable them locally:</p> <pre><code>pnpm dlx husky init\n</code></pre>"},{"location":"installation/#10-build-and-run-for-production","title":"10) Build and run for production","text":"<pre><code>pnpm build\npnpm start\n</code></pre> <p>Ensure production environment variables are set (e.g., <code>.env.production</code>).</p>"},{"location":"installation/#11-optional-docker-workflow","title":"11) Optional: Docker workflow","text":"<pre><code># Build image\ndocker build -t cursor-starter:latest .\n# Run container (adjust port as needed)\ndocker run --name cursor-starter -p 3000:3000 --env-file .env.local cursor-starter:latest\n</code></pre> <p>With Compose (if <code>docker-compose.yml</code> exists):</p> <pre><code>docker compose up --build\n</code></pre>"},{"location":"installation/#12-optional-github-codespaces","title":"12) Optional: GitHub Codespaces","text":"<ul> <li>Click \u201cCode \u2192 Create codespace on main\u201d in GitHub.</li> <li>Ensure <code>.devcontainer/</code> is present for preinstalled toolchains.</li> </ul>"},{"location":"installation/#13-verify-your-installation","title":"13) Verify your installation","text":"<ul> <li>App loads locally without errors</li> <li>Lint, typecheck, tests pass:</li> </ul> <pre><code>pnpm lint &amp;&amp; pnpm typecheck &amp;&amp; pnpm test\n</code></pre> <ul> <li>Production build succeeds:</li> </ul> <pre><code>pnpm build\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Node version mismatch: use <code>.nvmrc</code> if present</li> </ul> <pre><code>nvm install\nnvm use\n</code></pre> <ul> <li>pnpm not found:</li> </ul> <pre><code>corepack enable\ncorepack prepare pnpm@latest --activate\n</code></pre> <ul> <li>Port already in use:</li> </ul> <pre><code>PORT=3001 pnpm dev\n</code></pre> <ul> <li>Permission denied on scripts:</li> </ul> <pre><code>chmod +x ./scripts/*.sh 2&gt;/dev/null || true\n</code></pre>"},{"location":"installation/#upgrading","title":"Upgrading","text":"<pre><code>git pull --rebase origin main\npnpm install\npnpm up -L\n</code></pre>"},{"location":"installation/#uninstall-cleanup","title":"Uninstall / Cleanup","text":"<pre><code>pkill -f \"pnpm dev\" || true\ncd .. &amp;&amp; rm -rf &lt;your-project-folder&gt;\npnpm store prune\n</code></pre>"},{"location":"news/","title":"News","text":"<p>Latest updates from OpenAI, Anthropic, Google/DeepMind, and more.</p>"},{"location":"news/#openai","title":"OpenAI","text":"<ul> <li>OpenAI\u2019s letter to Governor Newsom on harmonized regulation \u2014 Tue, 12 Aug 2025 00:00:00 GMT</li> <li>Scaling accounting capacity with OpenAI \u2014 Tue, 12 Aug 2025 00:00:00 GMT</li> <li>GPT-5 and the new era of work \u2014 Thu, 07 Aug 2025 10:00:00 GMT</li> <li>Introducing GPT-5 for developers \u2014 Thu, 07 Aug 2025 10:00:00 GMT</li> <li>Coding and design with GPT-5 \u2014 Thu, 07 Aug 2025 00:03:00 GMT</li> <li>Creative writing with GPT-5 \u2014 Thu, 07 Aug 2025 00:02:00 GMT</li> <li>Medical research with GPT-5 \u2014 Thu, 07 Aug 2025 00:01:00 GMT</li> <li>How Amgen uses GPT-5 \u2014 Thu, 07 Aug 2025 00:00:00 GMT</li> </ul>"},{"location":"news/#anthropic","title":"Anthropic","text":""},{"location":"news/#google-ai","title":"Google AI","text":""},{"location":"news/#deepmind","title":"DeepMind","text":""},{"location":"progress/","title":"Progress","text":"<p>Track your reading progress. Use the \u201cMark complete\u201d toggle on pages. Your progress is stored locally in your browser.</p> <ul> <li>Completed pages</li> <li>Remaining pages by module</li> </ul>"},{"location":"webdev-integration/","title":"Web.dev Integration Framework for Cursor Starter","text":""},{"location":"webdev-integration/#purpose","title":"Purpose","text":"<p>Embed modern web best practices (from web.dev) into the RIPER \u03a3 modes so research, planning, execution, testing, and review naturally apply patterns, APIs, and metrics that make software faster, more reliable, secure, and easier to debug.</p>"},{"location":"webdev-integration/#sources","title":"Sources","text":"<ul> <li>New patterns for amazing apps (clipboard, files, app patterns)</li> <li>TransformStream (Streams API)</li> <li>Passkey registration (WebAuthn)</li> <li>App-like PWAs (make PWAs feel native)</li> <li>Progressively enhance your PWA</li> <li>Web Vitals overview</li> <li>Top Core Web Vitals</li> <li>User-centric performance metrics</li> <li>Web Vitals field measurement best practices</li> </ul>"},{"location":"webdev-integration/#mode-overlays-what-to-do-in-each-mode","title":"Mode overlays (what to do in each mode)","text":""},{"location":"webdev-integration/#research-1","title":"Research (\u03a9\u2081)","text":"<ul> <li>Investigate feasibility and support:</li> <li>Identify required Web APIs: Streams API (<code>TransformStream</code>), WebAuthn (passkeys), Service Workers, Manifest, File System Access, Web Share, Badging, Background Sync, App Shortcuts, URL/Protocol handlers.</li> <li>Check progressive enhancement paths and fallbacks for each feature.</li> <li>Define user outcomes and performance targets upfront:</li> <li>Core Web Vitals targets at p75: LCP \u2264 2.5 s, INP \u2264 200 ms, CLS \u2264 0.1.</li> <li>Optional guardrails: TTFB p75 \u2264 800 ms, TBT (lab) \u2264 200 ms on mid\u2011tier devices.</li> <li>Capture risks and constraints (auth platform support, offline behavior, storage quotas, privacy for RUM).</li> </ul>"},{"location":"webdev-integration/#plan-3","title":"Plan (\u03a9\u2083)","text":"<ul> <li>Progressive enhancement strategy:</li> <li>Define baseline experience without JS-critical features; layer advanced features using feature detection.</li> <li>Specify fallbacks for each API (e.g., password fallback if passkeys unavailable).</li> <li>PWA strategy and acceptance:</li> <li>App shell offline behavior, installability, update strategy, navigation model, and error fallbacks.</li> <li>Manifest includes: name, icons (with sizes), categories, display modes, <code>shortcuts</code>, <code>handle_links</code>, <code>file_handlers</code> if used, <code>scope</code>, <code>start_url</code>.</li> <li>Security &amp; authentication:</li> <li>Passkeys (WebAuthn): resident credentials, <code>userVerification: \"required\"</code>, <code>attestation: \"none\"</code>, proper RP ID, anti\u2011replay nonces.</li> <li>Credential fallback path and recovery UX.</li> <li>Data &amp; streaming:</li> <li>Use streaming pipelines for large payloads; plan backpressure and partial rendering.</li> <li>Observability &amp; RUM:</li> <li>Decide RUM sampling rate (1\u201310%), event schema, endpoint, privacy filters, and storage/retention.</li> </ul>"},{"location":"webdev-integration/#execute-4","title":"Execute (\u03a9\u2084)","text":"<ul> <li>Progressive enhancement implementation:</li> <li>Guard features with capability checks; avoid breaking baseline UX.</li> <li>PWA implementation:</li> <li>Service worker: cache strategy for shell/assets, offline fallback route, versioned updates.</li> <li>Manifest: app\u2011like features (shortcuts, badging), install prompts as appropriate.</li> <li>Streams API:</li> <li>Use <code>TransformStream</code> or <code>ReadableStream.pipeThrough()</code> for incremental processing.</li> <li>Handle backpressure, errors, and cancellation; provide non\u2011stream fallback.</li> <li>Authentication (Passkeys):</li> <li>Implement registration and sign\u2011in via WebAuthn; store server\u2011side public key data; rotate challenges.</li> <li>Provide password/email\u2011link fallback; clear UX cues.</li> <li>Clipboard, Files, Sharing:</li> <li>Use Clipboard API, File System Access, Web Share where available; degrade gracefully.</li> <li>Instrumentation:</li> <li>Integrate <code>web-vitals</code> for LCP/INP/CLS and send to analytics with p75 aggregation server-side.</li> </ul>"},{"location":"webdev-integration/#test-measure-45","title":"Test &amp; Measure (\u03a9\u2084/\u03a9\u2085)","text":"<ul> <li>Lab checks: Lighthouse and local throttling to catch regressions (TBT, LCP approximations).</li> <li>Field measurement (RUM):</li> <li>Collect LCP, INP, CLS at p75 per page\u2011type and overall, using sample rate and attribution data.</li> <li>Verify \u201cfirst contentful navigation\u201d vs SPA navigations (use Navigation API or route tagging).</li> <li>Acceptance thresholds:</li> <li>Block on regressions beyond budgets: LCP p75 &gt; 2.5 s, INP p75 &gt; 200 ms, CLS p75 &gt; 0.1.</li> <li>Debugging guidance:</li> <li>Use attribution from <code>web-vitals</code> to locate LCP element, INP target/interaction type, CLS sources.</li> </ul>"},{"location":"webdev-integration/#review-5","title":"Review (\u03a9\u2085)","text":"<ul> <li>Verify checklists complete, budgets respected, and fallbacks functioning.</li> <li>Confirm offline, install, and auth flows on at least 2 browsers and a mid\u2011tier device profile.</li> <li>Summarize performance deltas vs baseline; file follow\u2011ups for outliers.</li> </ul>"},{"location":"webdev-integration/#implementation-guidance","title":"Implementation guidance","text":""},{"location":"webdev-integration/#progressive-enhancement-feature-detection","title":"Progressive enhancement (feature detection)","text":"<pre><code>if ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('/sw.js');\n}\nif ('credentials' in navigator &amp;&amp; window.PublicKeyCredential) {\n  // Passkeys supported; enable WebAuthn flows\n}\nif (window.TransformStream) {\n  // Enable streaming code path\n}\n</code></pre>"},{"location":"webdev-integration/#streams-api-example-pipeline","title":"Streams API (example pipeline)","text":"<pre><code>const response = await fetch('/api/data');\nif (response.body &amp;&amp; window.TransformStream) {\n  const uppercase = new TransformStream({\n    transform(chunk, controller) {\n      controller.enqueue(new TextEncoder().encode(\n        new TextDecoder().decode(chunk).toUpperCase()\n      ));\n    }\n  });\n  const stream = response.body.pipeThrough(uppercase);\n  return new Response(stream);\n} else {\n  // Fallback: buffer then process\n  const data = await response.text();\n  return new Response(data.toUpperCase());\n}\n</code></pre>"},{"location":"webdev-integration/#passkeys-registration-sketch","title":"Passkeys (registration sketch)","text":"<pre><code>const publicKey = await fetch('/webauthn/registration-options').then(r =&gt; r.json());\nconst cred = await navigator.credentials.create({ publicKey });\nawait fetch('/webauthn/register', {\n  method: 'POST',\n  body: JSON.stringify(cred),\n  headers: { 'Content-Type': 'application/json' }\n});\n</code></pre>"},{"location":"webdev-integration/#web-vitals-rum-collection","title":"Web Vitals (RUM collection)","text":"<pre><code>import { onLCP, onINP, onCLS } from 'web-vitals';\nfunction sendToAnalytics(metric) {\n  navigator.sendBeacon('/rum', JSON.stringify({\n    id: metric.id,\n    name: metric.name,\n    value: metric.value,\n    rating: metric.rating,\n    navigationType: metric.navigationType,\n    attribution: metric.attribution // include when available\n  }));\n}\nonLCP(sendToAnalytics);\nonINP(sendToAnalytics);\nonCLS(sendToAnalytics);\n</code></pre>"},{"location":"webdev-integration/#checklists","title":"Checklists","text":""},{"location":"webdev-integration/#pwa","title":"PWA","text":"<ul> <li>Manifest has icons, categories, display modes, <code>shortcuts</code>, <code>scope</code>, <code>start_url</code>.</li> <li>Service worker caches shell and handles offline fallback; clear update path.</li> <li>Install prompt appropriately surfaced; app feels native (navigation, transitions, back behavior).</li> </ul>"},{"location":"webdev-integration/#performance","title":"Performance","text":"<ul> <li>Budgets: LCP \u2264 2.5 s, INP \u2264 200 ms, CLS \u2264 0.1 (p75, field).</li> <li>Measure via RUM with sampling; attribute sources for regressions.</li> <li>Lab checks use throttling on mid\u2011tier device profiles.</li> </ul>"},{"location":"webdev-integration/#authentication","title":"Authentication","text":"<ul> <li>Passkeys default with <code>residentKey</code> discoverable; fallback available.</li> <li>Challenges are unique per attempt; <code>attestation: none</code>; server verifies origins and RP ID.</li> </ul>"},{"location":"webdev-integration/#filesclipboardshare","title":"Files/Clipboard/Share","text":"<ul> <li>Use feature detection; provide alternatives (download links, input type=\"file\", manual copy).</li> </ul>"},{"location":"webdev-integration/#notes","title":"Notes","text":"<ul> <li>Always prioritize user\u2011centric outcomes over synthetic benchmarks; validate changes with field data at p75.</li> <li>Respect privacy and legal constraints for telemetry; minimize payloads and avoid PII.</li> </ul>"},{"location":"analytics/Clarity/","title":"Microsoft Clarity Analytics Integration for Cursor Starter","text":"<p>This guide standardizes how to instrument usage analytics with Microsoft Clarity across projects built with Cursor Starter. It maps Clarity features to the RIPER modes and provides a practical checklist so analytics is planned, implemented, verified, and used to improve UX.</p>"},{"location":"analytics/Clarity/#why-clarity","title":"Why Clarity","text":"<ul> <li>Session recordings, heatmaps, rage/dead clicks, scroll depth, JS error insights</li> <li>Automatic Smart Events (no-code) for common user actions and friction</li> <li>Lightweight, privacy-respecting defaults with content masking</li> <li>Data Export API for downstream analysis</li> </ul> <p>Key docs: - Smart Events overview: Automatic Smart Events - Setup and installation: Install Clarity - API reference: Clarity API - Identify API: Identify users - Data Export: Data Export API - Verify install: Verify installation - Smart Events: Smart Events docs - Integrations: Supported platforms</p>"},{"location":"analytics/Clarity/#mode-aware-analytics-plan-riper","title":"Mode-aware analytics plan (RIPER)","text":"<ul> <li>RESEARCH (\u03a9\u2081) \u2014 Observe only</li> <li>Review Clarity docs and prior data for similar products.</li> <li>Draft event taxonomy and tagging plan. No code changes.</li> <li> <p>Output: \u201cTelemetry Research\u201d note in <code>memory-bank/activeContext.md</code> with proposed events, tags, masking.</p> </li> <li> <p>INNOVATE (\u03a9\u2082) \u2014 Design and prototype</p> </li> <li>Propose event names, semantics, and data minimization rules.</li> <li>Map Smart Events you\u2019ll rely on vs. custom events you must emit.</li> <li> <p>Output: \u201cTelemetry Proposal\u201d added to plan with acceptance checks.</p> </li> <li> <p>PLAN (\u03a9\u2083) \u2014 Commit to coverage</p> </li> <li>Add analytics acceptance criteria to the plan: where to insert Clarity snippet, SPA route handling, Identify/consent, events and tags, masking, and verify steps.</li> <li> <p>Define success metrics (e.g., funnel, adoption, error rate).</p> </li> <li> <p>EXECUTE (\u03a9\u2084) \u2014 Implement and tag</p> </li> <li>Install Clarity, wire SPA navigation, emit events, apply tags, respect consent, mask PII by default.</li> <li> <p>Tag sessions with environment, app version, experiment, and tenant.</p> </li> <li> <p>REVIEW (\u03a9\u2085) \u2014 Verify and learn</p> </li> <li>Verify installation in the dashboard; confirm Smart Events firing.</li> <li>Validate custom events and tags; check heatmaps/recordings.</li> <li>Export a small sample via Data Export API to sanity-check fields.</li> </ul>"},{"location":"analytics/Clarity/#implementation-checklist","title":"Implementation checklist","text":"<p>1) Install Clarity snippet - Obtain your project ID from Clarity and add the official snippet in the <code>&lt;head&gt;</code> of your app (SSR/MPA) or via your framework\u2019s HTML entry. - For GTM setups, use the Clarity template per the integrations guide.</p> <p>2) Single Page Apps (SPA) - After route changes, notify Clarity of a new virtual page:</p> <pre><code>&lt;script&gt;\n// Call after your router confirms navigation\nwindow.clarity &amp;&amp; window.clarity(\"page\");\n&lt;/script&gt;\n</code></pre> <p>3) Identify API (optional) - Associate a durable user identifier (prefer hashed or pseudonymous):</p> <pre><code>&lt;script&gt;\n// Use a stable internal user id. Avoid emails unless policy allows.\nwindow.clarity &amp;&amp; window.clarity(\"identify\", userId);\n&lt;/script&gt;\n</code></pre> <p>4) Session/page tagging - Tag sessions or pages to segment analysis:</p> <pre><code>&lt;script&gt;\n// Examples: environment, app version, AB experiment, tenant, role\nwindow.clarity &amp;&amp; window.clarity(\"set\", \"environment\", \"production\");\nwindow.clarity &amp;&amp; window.clarity(\"set\", \"appVersion\", \"1.2.3\");\nwindow.clarity &amp;&amp; window.clarity(\"set\", \"experiment\", \"checkoutA\");\nwindow.clarity &amp;&amp; window.clarity(\"set\", \"role\", \"admin\");\n&lt;/script&gt;\n</code></pre> <p>5) Custom events - Emit explicit signals for critical product milestones:</p> <pre><code>&lt;script&gt;\n// Use concise, stable names; prefer kebab-case or snake_case\nwindow.clarity &amp;&amp; window.clarity(\"event\", \"signup_completed\");\nwindow.clarity &amp;&amp; window.clarity(\"event\", \"checkout_started\");\nwindow.clarity &amp;&amp; window.clarity(\"event\", \"checkout_completed\");\nwindow.clarity &amp;&amp; window.clarity(\"event\", \"error_payment_failed\");\n&lt;/script&gt;\n</code></pre> <p>6) Consent and privacy - If consent is required, only enable tracking after consent:</p> <pre><code>&lt;script&gt;\n// Call with true once the user consents\nwindow.clarity &amp;&amp; window.clarity(\"consent\", true);\n&lt;/script&gt;\n</code></pre> <ul> <li>Mask sensitive UI by default and unmask only where explicitly allowed:</li> </ul> <pre><code>&lt;!-- Mask an input or section --&gt;\n&lt;input data-clarity-mask=\"true\" /&gt;\n&lt;div data-clarity-mask=\"true\"&gt;&lt;/div&gt;\n</code></pre> <p>7) Verify installation - Open your site, then in the Clarity dashboard check \u201cLive\u201d \u2192 sessions. - In DevTools Network, confirm POSTs to <code>https://www.clarity.ms/collect</code>.</p> <p>8) Data Export API (optional) - Generate an API token in Clarity. Pull structured data for BI:</p> <pre><code>curl --location 'https://www.clarity.ms/export-data/api/v1/project-live-insights?numOfDays=1&amp;dimension1=OS' \\\n  --header 'Authorization: Bearer YOUR_API_TOKEN'\n</code></pre> <ul> <li>Use a scheduled job to export daily into your warehouse.</li> </ul>"},{"location":"analytics/Clarity/#event-taxonomy-recommended","title":"Event taxonomy (recommended)","text":"<ul> <li>Page/route: <code>page_view</code> (Smart + SPA <code>page</code>) with tags: <code>route</code>, <code>appVersion</code>, <code>environment</code></li> <li>Sign-up funnel: <code>signup_started</code>, <code>signup_completed</code></li> <li>Auth: <code>login_success</code>, <code>login_failure</code></li> <li>CRUD: <code>entity_create</code>, <code>entity_update</code>, <code>entity_delete</code></li> <li>Commerce: <code>checkout_started</code>, <code>checkout_completed</code>, <code>payment_failed</code></li> <li>Errors: <code>error_boundary</code>, <code>error_network</code>, <code>error_validation</code></li> <li>Experiments: tag <code>experiment</code> and emit <code>experiment_exposure</code></li> </ul> <p>Naming rules: - Use lowercase kebab-case or snake_case. - Prefer generic names over UI-specific ones; keep stable across refactors. - Do not embed PII in names or values.</p>"},{"location":"analytics/Clarity/#smart-events","title":"Smart Events","text":"<ul> <li>Enable Smart Events to reduce manual instrumentation and capture friction patterns. Review and tune Smart Events in the Clarity UI. See: Smart Events.</li> </ul>"},{"location":"analytics/Clarity/#privacy-compliance","title":"Privacy &amp; compliance","text":"<ul> <li>Default mask sensitive elements; audit masking before launch.</li> <li>Use <code>identify</code> with a pseudonymous ID; avoid emails unless policy allows.</li> <li>Respect consent and regional laws; gate initialization behind consent if required.</li> </ul>"},{"location":"analytics/Clarity/#mode-specific-acceptance-checks-copy-into-plans","title":"Mode-specific acceptance checks (copy into plans)","text":"<ul> <li>RESEARCH: Taxonomy drafted; sources reviewed; comparable apps analyzed.</li> <li>INNOVATE: Event list, tags, masking rules proposed; Smart Events plan.</li> <li>PLAN: Acceptance criteria include: snippet added, SPA <code>page</code> wired, <code>identify</code> strategy, consent gating, events + tags list, masking list, verify steps.</li> <li>EXECUTE: Implement snippet, router hook, events, tags, masking, consent.</li> <li>REVIEW: Validate install, events, Smart Events; export sample via API; add insights to <code>memory-bank/progress.md</code>.</li> </ul>"},{"location":"analytics/Clarity/#project-id-and-environments","title":"Project ID and environments","text":"<ul> <li>Keep the Clarity project ID out of source control if needed; inject via env or template variable.</li> <li>Use separate Clarity projects or tags for <code>development</code>, <code>staging</code>, and <code>production</code>.</li> </ul>"},{"location":"analytics/Clarity/#quick-integration-snippets","title":"Quick integration snippets","text":"<ul> <li>Head snippet (replace <code>PROJECT_ID</code> with your Clarity project id; get it from Clarity \u201cSetup\u201d):</li> </ul> <pre><code>&lt;!-- Microsoft Clarity --&gt;\n&lt;script&gt;\n  (function(c,l,a,r,i,t,y){\n    c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\n    t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i;\n    y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\n  })(window, document, \"clarity\", \"script\", \"PROJECT_ID\");\n&lt;/script&gt;\n</code></pre> <p>If you want us to add the snippet to a specific app in this repo, share your Clarity project ID and target entry file (e.g., <code>index.html</code>, <code>_app.tsx</code>, or framework equivalent).</p>"},{"location":"capstone/","title":"Capstone: Customer\u2011Service Chatbot (Rivet)","text":"<p>Build a grounded, safe, and observable chatbot using Rivet, powered by RAG over this course content.</p>"},{"location":"capstone/#goals","title":"Goals","text":"<ul> <li>Deflection and resolution with citations</li> <li>Streaming UX and tool actions</li> <li>Safety (injection, PII), observability, and evals</li> </ul>"},{"location":"capstone/#development","title":"Development","text":"<ul> <li>Build index: <code>python3 capstone/rag/index.py</code></li> <li>Start API: <code>uvicorn capstone.server.main:app --reload --port 8080</code></li> </ul>"},{"location":"capstone/demo/","title":"Capstone Demo","text":"<p>Start the API locally and point your client to it.</p> <pre><code>uvicorn capstone.server.main:app --reload --port 8080\n</code></pre> <p>Health check: <code>GET http://localhost:8080/health</code></p> <p>Search (stub): <code>GET http://localhost:8080/search?q=rag</code></p>"},{"location":"capstone/evaluation/","title":"Evaluation &amp; Observability","text":"<p>Datasets, rubrics, regression testing, and tracing.</p>"},{"location":"capstone/rag/","title":"RAG &amp; Knowledge","text":"<p>Index course pages, store embeddings, re\u2011rank results, and cite sources inline.</p>"},{"location":"capstone/rivet/","title":"Rivet Flows","text":"<p>Conversation design, tools, retries/backoff, and escalation.</p>"},{"location":"capstone/safety/","title":"Safety &amp; Privacy","text":"<p>Prompt\u2011injection defenses, PII redaction, domain\u2011scoped tools, rate limits.</p>"},{"location":"commands/analyze-github-issue/","title":"Analyze GitHub Issue (Cursor)","text":"<p>Steps: 1) Review the issue (gh issue view) 2) Examine relevant code and docs 3) Create a feature branch: <code>feature/&lt;issue&gt;-&lt;slug&gt;</code> 4) Plan changes and acceptance checks; update <code>memory-bank/activeContext.md</code> 5) Ask for approval before Execute</p> <p>Output:</p> <pre><code>&lt;plan&gt;\n[High-level overview]\n[Detailed steps, tests, docs]\n&lt;/plan&gt;\n</code></pre> <p>Use modes: /r \u2192 /p \u2192 /e \u2192 /rev</p>"},{"location":"commands/create-github-issue/","title":"Create GitHub Issue (Cursor)","text":"<p>Flexible detail levels (MINIMAL, MORE, A LOT) with best-practice structure. Requires <code>gh</code> CLI.</p> <ul> <li>Research internal repo patterns, templates, labels</li> <li>Research external best practices as needed</li> <li>Choose detail level based on complexity</li> <li>Produce content ready for <code>gh issue create</code></li> </ul> <p>See sections and structures adapted from the source with Cursor context references and acceptance criteria tied to modes.</p>"},{"location":"commands/experiment-driven-development/","title":"Experiment-Driven Development (Cursor)","text":"<p>Create a log under <code>experiments/</code> documenting learning cycles.</p> <p>1) Goal and impact 2) Findings from code review (link files/functions) 3) Surgical plan of attack 4) Attempted solution and result 5) Learnings and revised plan</p> <p>Tie each cycle to modes: - Research: gather findings - Plan: update plan and acceptance checks - Execute: implement scoped changes - Review: validate and summarize</p> <p>Commit with clear conventional messages between cycles.</p>"},{"location":"commands/generate-codebase-context/","title":"Generate Codebase Context (llms.txt)","text":"<p>Produce <code>llms.txt</code> at repo root with: - Goals of each top-level file/folder - Function signatures with params and types (where applicable) - Concise explanations of important functions - ASCII map of file/module connections - Conclusions about structure, style guide, data formats</p> <p>Keep it concise and DRY. Reference files/functions with backticks.</p>"},{"location":"commands/meet-cursor/","title":"Meet Cursor: Capabilities Overview","text":"<p>This starter configures Cursor with rules, MCP, and a workflow to build software efficiently.</p>"},{"location":"commands/meet-cursor/#core-capabilities","title":"Core Capabilities","text":"<ul> <li>Filesystem: read, list, search, and edit within project (via tools or MCP)</li> <li>Web: optional Brave Search and fetch via MCP</li> <li>Browser automation: optional Puppeteer/Playwright MCP</li> <li>GitHub: optional MCP for repo/PR/issue ops</li> <li>Task management: plan/execute/review modes with memory bank</li> <li>Command CLI: <code>scripts/cc</code> with plugin loading</li> </ul>"},{"location":"commands/meet-cursor/#development-workflow","title":"Development Workflow","text":"<ul> <li>Research \u2192 Plan \u2192 Execute \u2192 Review (RIPER modes)</li> <li>Commit Mode for small, validated changes</li> <li>Code protection markers for critical code sections</li> </ul> <p>See also: <code>docs/ripersigma/quickstart.md</code>, <code>.cursor/rules/ripersigma105.mdc</code></p>"},{"location":"commands/resolve-pr-comments/","title":"Resolve PR Comments (Cursor)","text":"<p>Workflow: - Research: discover all comments (gh api + gh pr view) - Plan: classify by priority and actionability; create checklist - Execute: implement changes; tests/lint; mark done - Review: verify all addressed; commit and summarize</p> <p>Useful commands:</p> <pre><code>gh pr view --comments\ngh api repos/$(gh repo view --json owner,name | jq -r '.owner.login')/$(gh repo view --json owner,name | jq -r '.name')/pulls/$(gh pr view --json number | jq -r '.number')/comments\n</code></pre> <p>Consider parallelizing independent groups by file.</p>"},{"location":"competitors/fin-intercom/","title":"Intercom Fin","text":"<p>Notes, features, and differentiators.</p>"},{"location":"competitors/yellow-ai/","title":"Yellow.ai","text":"<p>Notes, features, and differentiators.</p>"},{"location":"design-systems/decision-tree/","title":"Design System Decision Tree","text":"<p>Use this tree to pick a primary system and define where selective borrowing is allowed. Record the decision in <code>memory-bank/projectbrief.md</code> and implementation details in <code>techContext.md</code>.</p>"},{"location":"design-systems/decision-tree/#step-1-platform-ecosystem","title":"Step 1 \u2014 Platform &amp; Ecosystem","text":"<ul> <li>iOS/iPadOS/macOS native: Prefer Apple HIG + SwiftUI/UIKit</li> <li>Android native: Prefer Material 3 + Jetpack Compose</li> <li>Web (consumer/Google ecosystem): Prefer Material 3 (Material Web or React wrappers)</li> <li>Web (enterprise/data-heavy): Prefer Carbon (React/Web Components)</li> <li>Web (custom brand/greenfield, need speed): Tailwind + Headless UI/Radix; optionally adopt Material/Carbon as a component base behind Tailwind tokens</li> </ul>"},{"location":"design-systems/decision-tree/#step-2-product-characteristics","title":"Step 2 \u2014 Product Characteristics","text":"<ul> <li>Data dense tables/filters/workflows \u2192 Carbon</li> <li>Strong platform affinity (Apple/Google) \u2192 respective native system</li> <li>Highly branded/marketing-heavy \u2192 Tailwind tokens + selective components from Material/Carbon</li> <li>Cross-platform parity (Android + Web) \u2192 Material 3</li> <li>Internal tools/admin \u2192 Carbon or Material, depending on org standards</li> </ul>"},{"location":"design-systems/decision-tree/#step-3-team-timeline","title":"Step 3 \u2014 Team &amp; Timeline","text":"<ul> <li>Existing expertise in one system \u2192 bias to that system</li> <li>Short delivery timeline/limited designers \u2192 Tailwind with clear token governance + minimal component set</li> <li>Multi-team consistency &amp; longevity \u2192 Carbon or Material with docs and Storybook</li> </ul>"},{"location":"design-systems/decision-tree/#step-4-accessibility-compliance","title":"Step 4 \u2014 Accessibility &amp; Compliance","text":"<ul> <li>Strict enterprise governance \u2192 Carbon</li> <li>Mobile accessibility focus \u2192 Apple/Material native guidance</li> <li>Web WCAG AA/AAA \u2192 Any, but enforce tokenized contrast and a11y tests</li> </ul>"},{"location":"design-systems/decision-tree/#step-5-decision","title":"Step 5 \u2014 Decision","text":"<ul> <li>Select one Primary System (Apple, Material, Carbon, or Tailwind-as-foundation)</li> <li>Define Borrowing Policy:</li> <li>Allowed: data table from Carbon in a Material/Tailwind app if tokens and a11y are preserved</li> <li>Not allowed: mixing conflicting navigation paradigms (e.g., iOS tab bar + Material navigation rail inconsistently)</li> <li>Define Token Strategy: one source of truth; map to implementation themes (SwiftUI/Compose/Tailwind/React)</li> </ul>"},{"location":"design-systems/decision-tree/#step-6-implementation-mode-hooks","title":"Step 6 \u2014 Implementation Mode Hooks","text":"<ul> <li>Research: evaluate candidate systems, list pros/cons, collect references</li> <li>Plan: finalize selection, enumerate components and tokens, acceptance criteria</li> <li>Execute: scaffold library, tokens, Storybook, a11y &amp; visual tests; implement first 3 screens</li> <li>Review: verify checklists and metrics; open issues for any deviations</li> <li>Commit: include DS decision and affected artifacts in commit notes</li> </ul>"},{"location":"design-systems/decision-tree/#decision-examples","title":"Decision Examples","text":"<ul> <li>Android + Web app with dense admin workflows \u2192 Primary: Material 3; Borrow: Carbon Data Table; Tokens: shared via Style Dictionary; Tailwind used for utility layout only</li> <li>iOS-only consumer app \u2192 Primary: Apple HIG; Borrow: none; Tokens: SwiftUI theme; Motion: HIG defaults</li> <li>Web marketing + app shell \u2192 Primary: Tailwind (tokens); Borrow: Material modal/sheet patterns; Components: Headless UI + custom skins</li> </ul>"},{"location":"design-systems/meta-guidelines/","title":"Design Systems Meta-Playbook","text":"<p>An amalgamated, vendor-agnostic playbook synthesizing Apple Human Interface Guidelines (HIG), Material Design 3 (M3), IBM Carbon, and Tailwind CSS. Use this to choose, combine, and implement a design system consistently across platforms and stacks.</p>"},{"location":"design-systems/meta-guidelines/#purpose","title":"Purpose","text":"<ul> <li>Establish a common language and standards across teams and platforms</li> <li>Improve UX quality, accessibility, performance, and delivery speed</li> <li>Reduce decision churn by providing principles, tokens, patterns, and checklists</li> </ul>"},{"location":"design-systems/meta-guidelines/#core-principles-cross-system","title":"Core Principles (cross-system)","text":"<ul> <li>Clarity and Deference (Apple): content-first, avoid gratuitous ornamentation; use depth sparingly</li> <li>Bold, Meaningful Motion (Material): motion communicates hierarchy, state, and causality; prefer purposeful transitions</li> <li>Consistency and Modularity (Carbon): composable components, tokenized theming, predictable behavior</li> <li>Utility-First Composition (Tailwind): encode system constraints in tokens/utilities for speed and consistency</li> <li>HCI Foundations: minimize cognitive load; use progressive disclosure; respect Hick's and Fitts's laws; apply Gestalt principles; align with mental models; ensure affordances and feedback</li> <li>Accessibility by Default: WCAG 2.2 AA minimum; keyboard first; screen reader semantics; sufficient contrast; respect Reduce Motion and High Contrast settings</li> </ul>"},{"location":"design-systems/meta-guidelines/#design-tokens-source-of-truth","title":"Design Tokens (source of truth)","text":"<p>Define tokens once; propagate to all platforms. Prefer CSS variables and/or a token pipeline (e.g., Style Dictionary). - Color: semantic tokens (e.g., <code>--color-surface</code>, <code>--color-text-primary</code>, <code>--color-accent</code>) mapped to brand palettes and dynamic schemes (e.g., Material dynamic color) - Typography: type scale (e.g., 12\u201332px), responsive sizes, line-height 1.3\u20131.6; prefer system fonts on native platforms - Spacing &amp; Layout: 8pt baseline grid, spacing scale (e.g., 4, 8, 12, 16, 24, 32, 48) - Elevation &amp; Effects: shadows and overlays with clear elevation ranges; avoid excessive elevation on content surfaces - Motion: standard durations (micro: 100\u2013150ms, UI: 200\u2013300ms, large/route: 300\u2013450ms); easing curves consistent with platform norms; honor Reduce Motion - State &amp; Interaction: focus rings, hover/pressed/disabled states defined in tokens</p>"},{"location":"design-systems/meta-guidelines/#layout-responsiveness","title":"Layout &amp; Responsiveness","text":"<ul> <li>Grids: use container and content grids; allow dense vs. comfortable density modes (Carbon-style)</li> <li>Breakpoints: define platform-agnostic tiers (e.g., xs &lt; 480, sm 480\u2013768, md 768\u20131024, lg 1024\u20131440, xl \u2265 1440). Map to platform-specific guidance (Material, Carbon)</li> <li>Safe Areas &amp; System UI: respect notches, bars, and safe areas (Apple); avoid UI underneath critical system overlays unless intentional</li> <li>Navigation placement: follow platform norms (iOS bottom tabs, Android bottom nav, Web side nav/top bar as appropriate)</li> </ul>"},{"location":"design-systems/meta-guidelines/#platform-guidance","title":"Platform Guidance","text":"<ul> <li>Apple (iOS/iPadOS/macOS): prioritize clarity, deference, and depth; native controls where possible; adopt SF symbols; use sheets, popovers, and split views appropriately</li> <li>Material (Android/Web): use M3 components; elevation &amp; tonal color; motion as feedback; leverage dynamic color on supported platforms</li> <li>Carbon (Web/Enterprise): high information density, data tables, complex filters; skeletons and loading states; consistent enterprise patterns</li> <li>Tailwind (Web): encode tokens in Tailwind config; use Headless UI/Radix/ARIA primitives for accessible interactions; keep utilities aligned to tokens</li> </ul>"},{"location":"design-systems/meta-guidelines/#cross-system-component-map-canonical-set","title":"Cross-System Component Map (canonical set)","text":"<ul> <li>App Shell: top bar/side nav/bottom nav; breadcrumbs</li> <li>Action: buttons (primary/secondary/tertiary/ghost/tonal), speed-dial/FAB where platform-appropriate</li> <li>Navigation: tabs, segmented controls, stepper, pagination</li> <li>Surfaces: sheets, dialogs, drawers, popovers, toasts/snackbars, banners</li> <li>Data Display: lists, cards, tables, data grid, chips, badges, avatar</li> <li>Forms: text fields, selects, combobox, date/time pickers, sliders, switches, radios, checkboxes, file upload</li> <li>Feedback: progress (linear/circular), skeleton, empty states, error states</li> <li>Search &amp; Filter: search field, filter panel, chips</li> <li>Accessibility Aids: skip links, focus management, live regions</li> </ul>"},{"location":"design-systems/meta-guidelines/#motion-feedback","title":"Motion &amp; Feedback","text":"<ul> <li>Communicate causality (what changed), continuity (where it came from), and hierarchy (what\u2019s important)</li> <li>Default durations as per Tokens; avoid compound animations &gt; 600ms; stagger for complex surfaces</li> <li>Provide non-motion affordances (focus styles, color/state changes) for Reduce Motion users</li> </ul>"},{"location":"design-systems/meta-guidelines/#accessibility-internationalization","title":"Accessibility &amp; Internationalization","text":"<ul> <li>Contrast: 4.5:1 normal text, 3:1 large text; validate with automated tools and manual reviews</li> <li>Semantics: roles, labels, descriptions; logical tab order and focus return on modal close</li> <li>Input Targets: minimum 44\u00d744px touch targets (Apple), \u2265 48dp Android; 24px icon minimum with 2px padding</li> <li>Localization: allow 30\u201350% text expansion; support bidi; pluralization rules; number/date/currency formats</li> </ul>"},{"location":"design-systems/meta-guidelines/#tooling-process","title":"Tooling &amp; Process","text":"<ul> <li>Design: Figma libraries for tokens and components; plugins for a11y/contrast</li> <li>Docs &amp; Preview: Storybook/DocsPage; auto-generate from component props with MDX</li> <li>A11y: axe, eslint-plugin-jsx-a11y, testing-library a11y helpers</li> <li>Visual Regression: Chromatic/Applitools/Playwright snapshots</li> <li>Performance: web.dev Web Vitals (FCP, LCP, INP) and Lighthouse; instrument field RUM as per <code>docs/webdev-integration.md</code> and send to analytics (see <code>docs/analytics/Clarity.md</code>)</li> <li>Token Pipeline: Style Dictionary/Theo; publish as packages; sync to Tailwind config and platform themes</li> </ul>"},{"location":"design-systems/meta-guidelines/#metrics-quality-gates","title":"Metrics &amp; Quality Gates","text":"<ul> <li>Usability: task success rate, time-on-task, SUS</li> <li>Accessibility: automated a11y checks pass, manual keyboard/reader checks, contrast thresholds</li> <li>Performance: LCP \u2264 2.5s, INP \u2264 200ms; bundle budgets respected</li> <li>Consistency: % of screens using approved components; token coverage \u2265 90%</li> <li>Defects: UI bug density trending down; no P0 a11y defects</li> </ul>"},{"location":"design-systems/meta-guidelines/#debugging-aids","title":"Debugging Aids","text":"<ul> <li>Turn on layout debug grid, readable color tokens, focus-outline debugging in dev builds</li> <li>Log component boundary warnings when custom styles override tokens</li> <li>Provide \u201creduce motion\u201d and \u201chigh-contrast\u201d preview toggles in Storybook</li> </ul>"},{"location":"design-systems/meta-guidelines/#references","title":"References","text":"<ul> <li>Apple HIG (patterns/components), SwiftUI guidelines</li> <li>Material 3 (tokens/components/motion), Material Web/Compose</li> <li>Carbon (components/react/web-components), IBM Design Language</li> <li>Tailwind CSS (tokens via config), Headless UI/Radix for behaviors</li> </ul>"},{"location":"design-systems/meta-guidelines/#official-resources","title":"Official Resources","text":"<ul> <li>Apple Human Interface Guidelines: developer.apple.com/design/human-interface-guidelines</li> <li>Apple Patterns: developer.apple.com/design/human-interface-guidelines/patterns</li> <li>Apple Components: developer.apple.com/design/human-interface-guidelines/components</li> <li>SwiftUI docs: developer.apple.com/documentation/SwiftUI</li> <li>Material 3: m3.material.io</li> <li>Material Web (docs): github.com/material-components/material-web/tree/main/docs</li> <li>Material Web (repo): github.com/material-components/material-web</li> <li>Material Android: github.com/material-components/material-components-android</li> <li>Carbon Design System: carbondesignsystem.com</li> <li>Carbon Web Components: github.com/carbon-design-system/carbon/tree/main/packages/web-components</li> <li>Carbon React: carbondesignsystem.com/developing/frameworks/react</li> <li>IBM Design Language: ibm.com/design/language</li> <li>Tailwind CSS: tailwindcss.com</li> <li>Headless UI: headlessui.com</li> <li>Radix Primitives: radix-ui.com/primitives</li> </ul>"},{"location":"design-systems/meta-guidelines/#apis-implementations","title":"APIs &amp; Implementations","text":"<ul> <li>Apple: SwiftUI/UIKit component APIs; SF Symbols; HIG interaction patterns</li> <li>Material: Material Web components (custom elements), Material Compose (Android), MDC Android</li> <li>Carbon: React and Web Components packages; density/theming controls</li> <li>Tailwind: <code>tailwind.config.js</code> token mapping; Headless UI/Radix for accessible behavior APIs</li> </ul>"},{"location":"design-systems/mode-checklists/","title":"Design System Checklists by Mode","text":"<p>Use these checklists with RIPER modes. Update the memory bank as indicated.</p>"},{"location":"design-systems/mode-checklists/#1-research","title":"\u03a9\u2081 Research","text":"<ul> <li>Inventory target platforms/devices and constraints (projectbrief.md)</li> <li>Collect product characteristics (data density, workflows, branding needs)</li> <li>Identify candidate systems (Apple, Material, Carbon, Tailwind) with pros/cons and references (activeContext.md)</li> <li>Gather accessibility requirements and legal/compliance needs</li> </ul>"},{"location":"design-systems/mode-checklists/#2-innovate","title":"\u03a9\u2082 Innovate","text":"<ul> <li>Prototype 1\u20132 critical screens using candidate systems (can be low-code/Storybook)</li> <li>Compare usability, accessibility, and performance; capture findings</li> <li>Draft initial token set and theming approach</li> </ul>"},{"location":"design-systems/mode-checklists/#3-plan","title":"\u03a9\u2083 Plan","text":"<ul> <li>Choose primary system and document rationale (projectbrief.md \u2192 Design System Strategy)</li> <li>Define borrowing policy and guardrails (systemPatterns.md \u2192 Key Decisions)</li> <li>Finalize token taxonomy and pipeline (techContext.md)</li> <li>Enumerate component inventory and patterns to implement first (systemPatterns.md \u2192 Components)</li> <li>Acceptance criteria: a11y, performance, consistency, docs coverage</li> </ul>"},{"location":"design-systems/mode-checklists/#4-execute","title":"\u03a9\u2084 Execute","text":"<ul> <li>Install libraries and scaffolding (Material/Carbon/SwiftUI/Tailwind)</li> <li>Implement token pipeline and platform themes; wire into Storybook</li> <li>Build core layout/navigation and first component set</li> <li>Add a11y tests (axe), visual snapshots, and perf budgets to CI</li> <li>Document usage in MDX/Storybook; add examples for edge cases</li> </ul>"},{"location":"design-systems/mode-checklists/#5-review","title":"\u03a9\u2085 Review","text":"<ul> <li>Validate against acceptance criteria; run a11y/perf/visual checks</li> <li>Heuristic UX review (Nielsen) and HCI checklist</li> <li>Track % screens/components on approved system; file issues for deviations</li> <li>Update memory bank with outcomes and next steps</li> </ul>"},{"location":"design-systems/mode-checklists/#commit-mode","title":"Commit Mode","text":"<ul> <li>Include DS selection/changes, tokens updated, components added/modified</li> <li>Link to affected docs (Storybook pages, MD files) and test evidence</li> </ul>"},{"location":"modules/agents-orchestration/","title":"agents orchestration","text":"<p>Synthesis:</p>","tags":["module"]},{"location":"modules/agents-orchestration/#why-its-important-for-designers-to-know","title":"Why it\u2019s important for designers to know","text":"","tags":["module"]},{"location":"modules/agents-orchestration/#how-this-applies-to-the-ai-powered-bot","title":"How this applies to the AI-powered bot","text":"","tags":["module"]},{"location":"modules/agents-orchestration/#collaboration-prompts-for-engineers","title":"Collaboration prompts for engineers","text":"","tags":["module"]},{"location":"modules/agents-orchestration/#sources","title":"Sources","text":"","tags":["module"]},{"location":"modules/agents-orchestration/#figures","title":"Figures","text":"","tags":["module"]},{"location":"modules/ai-ux-behavior/","title":"ai ux behavior","text":"<p>Synthesis:</p>","tags":["module"]},{"location":"modules/ai-ux-behavior/#why-its-important-for-designers-to-know","title":"Why it\u2019s important for designers to know","text":"","tags":["module"]},{"location":"modules/ai-ux-behavior/#how-this-applies-to-the-ai-powered-bot","title":"How this applies to the AI-powered bot","text":"","tags":["module"]},{"location":"modules/ai-ux-behavior/#collaboration-prompts-for-engineers","title":"Collaboration prompts for engineers","text":"","tags":["module"]},{"location":"modules/ai-ux-behavior/#sources","title":"Sources","text":"","tags":["module"]},{"location":"modules/ai-ux-behavior/#figures","title":"Figures","text":"","tags":["module"]},{"location":"modules/collaboration-with-engineers/","title":"collaboration with engineers","text":"<p>Synthesis:</p>","tags":["module"]},{"location":"modules/collaboration-with-engineers/#why-its-important-for-designers-to-know","title":"Why it\u2019s important for designers to know","text":"","tags":["module"]},{"location":"modules/collaboration-with-engineers/#how-this-applies-to-the-ai-powered-bot","title":"How this applies to the AI-powered bot","text":"","tags":["module"]},{"location":"modules/collaboration-with-engineers/#collaboration-prompts-for-engineers","title":"Collaboration prompts for engineers","text":"","tags":["module"]},{"location":"modules/collaboration-with-engineers/#sources","title":"Sources","text":"","tags":["module"]},{"location":"modules/collaboration-with-engineers/#figures","title":"Figures","text":"","tags":["module"]},{"location":"modules/cost-latency/","title":"cost latency","text":"<p>Synthesis:</p>","tags":["module"]},{"location":"modules/cost-latency/#why-its-important-for-designers-to-know","title":"Why it\u2019s important for designers to know","text":"","tags":["module"]},{"location":"modules/cost-latency/#how-this-applies-to-the-ai-powered-bot","title":"How this applies to the AI-powered bot","text":"","tags":["module"]},{"location":"modules/cost-latency/#collaboration-prompts-for-engineers","title":"Collaboration prompts for engineers","text":"","tags":["module"]},{"location":"modules/cost-latency/#sources","title":"Sources","text":"","tags":["module"]},{"location":"modules/cost-latency/#figures","title":"Figures","text":"","tags":["module"]},{"location":"modules/ecosystem-deep-dives/","title":"ecosystem deep dives","text":"<p>Synthesis:</p>","tags":["module"]},{"location":"modules/ecosystem-deep-dives/#why-its-important-for-designers-to-know","title":"Why it\u2019s important for designers to know","text":"","tags":["module"]},{"location":"modules/ecosystem-deep-dives/#how-this-applies-to-the-ai-powered-bot","title":"How this applies to the AI-powered bot","text":"","tags":["module"]},{"location":"modules/ecosystem-deep-dives/#collaboration-prompts-for-engineers","title":"Collaboration prompts for engineers","text":"","tags":["module"]},{"location":"modules/ecosystem-deep-dives/#sources","title":"Sources","text":"","tags":["module"]},{"location":"modules/ecosystem-deep-dives/#figures","title":"Figures","text":"","tags":["module"]},{"location":"modules/evaluation-observability/","title":"evaluation observability","text":"<p>Synthesis:</p>","tags":["module"]},{"location":"modules/evaluation-observability/#why-its-important-for-designers-to-know","title":"Why it\u2019s important for designers to know","text":"","tags":["module"]},{"location":"modules/evaluation-observability/#how-this-applies-to-the-ai-powered-bot","title":"How this applies to the AI-powered bot","text":"","tags":["module"]},{"location":"modules/evaluation-observability/#collaboration-prompts-for-engineers","title":"Collaboration prompts for engineers","text":"","tags":["module"]},{"location":"modules/evaluation-observability/#sources","title":"Sources","text":"","tags":["module"]},{"location":"modules/evaluation-observability/#figures","title":"Figures","text":"","tags":["module"]},{"location":"modules/foundations/","title":"foundations","text":"<p>Synthesis:</p>","tags":["module"]},{"location":"modules/foundations/#why-its-important-for-designers-to-know","title":"Why it\u2019s important for designers to know","text":"","tags":["module"]},{"location":"modules/foundations/#how-this-applies-to-the-ai-powered-bot","title":"How this applies to the AI-powered bot","text":"","tags":["module"]},{"location":"modules/foundations/#collaboration-prompts-for-engineers","title":"Collaboration prompts for engineers","text":"","tags":["module"]},{"location":"modules/foundations/#sources","title":"Sources","text":"","tags":["module"]},{"location":"modules/foundations/#figures","title":"Figures","text":"","tags":["module"]},{"location":"modules/memory-state/","title":"memory state","text":"<p>Synthesis:</p>","tags":["module"]},{"location":"modules/memory-state/#why-its-important-for-designers-to-know","title":"Why it\u2019s important for designers to know","text":"","tags":["module"]},{"location":"modules/memory-state/#how-this-applies-to-the-ai-powered-bot","title":"How this applies to the AI-powered bot","text":"","tags":["module"]},{"location":"modules/memory-state/#collaboration-prompts-for-engineers","title":"Collaboration prompts for engineers","text":"","tags":["module"]},{"location":"modules/memory-state/#sources","title":"Sources","text":"","tags":["module"]},{"location":"modules/memory-state/#figures","title":"Figures","text":"","tags":["module"]},{"location":"modules/multimodality/","title":"multimodality","text":"<p>Synthesis:</p>","tags":["module"]},{"location":"modules/multimodality/#why-its-important-for-designers-to-know","title":"Why it\u2019s important for designers to know","text":"","tags":["module"]},{"location":"modules/multimodality/#how-this-applies-to-the-ai-powered-bot","title":"How this applies to the AI-powered bot","text":"","tags":["module"]},{"location":"modules/multimodality/#collaboration-prompts-for-engineers","title":"Collaboration prompts for engineers","text":"","tags":["module"]},{"location":"modules/multimodality/#sources","title":"Sources","text":"","tags":["module"]},{"location":"modules/multimodality/#figures","title":"Figures","text":"","tags":["module"]},{"location":"modules/productization-mlops/","title":"productization mlops","text":"<p>Synthesis:</p>","tags":["module"]},{"location":"modules/productization-mlops/#why-its-important-for-designers-to-know","title":"Why it\u2019s important for designers to know","text":"","tags":["module"]},{"location":"modules/productization-mlops/#how-this-applies-to-the-ai-powered-bot","title":"How this applies to the AI-powered bot","text":"","tags":["module"]},{"location":"modules/productization-mlops/#collaboration-prompts-for-engineers","title":"Collaboration prompts for engineers","text":"","tags":["module"]},{"location":"modules/productization-mlops/#sources","title":"Sources","text":"","tags":["module"]},{"location":"modules/productization-mlops/#figures","title":"Figures","text":"","tags":["module"]},{"location":"modules/prompting-structured-outputs/","title":"prompting structured outputs","text":"<p>Synthesis:</p>","tags":["module"]},{"location":"modules/prompting-structured-outputs/#why-its-important-for-designers-to-know","title":"Why it\u2019s important for designers to know","text":"","tags":["module"]},{"location":"modules/prompting-structured-outputs/#how-this-applies-to-the-ai-powered-bot","title":"How this applies to the AI-powered bot","text":"","tags":["module"]},{"location":"modules/prompting-structured-outputs/#collaboration-prompts-for-engineers","title":"Collaboration prompts for engineers","text":"","tags":["module"]},{"location":"modules/prompting-structured-outputs/#sources","title":"Sources","text":"","tags":["module"]},{"location":"modules/prompting-structured-outputs/#figures","title":"Figures","text":"","tags":["module"]},{"location":"modules/rag/","title":"rag","text":"<p>Synthesis:</p>","tags":["module"]},{"location":"modules/rag/#why-its-important-for-designers-to-know","title":"Why it\u2019s important for designers to know","text":"","tags":["module"]},{"location":"modules/rag/#how-this-applies-to-the-ai-powered-bot","title":"How this applies to the AI-powered bot","text":"","tags":["module"]},{"location":"modules/rag/#collaboration-prompts-for-engineers","title":"Collaboration prompts for engineers","text":"","tags":["module"]},{"location":"modules/rag/#sources","title":"Sources","text":"","tags":["module"]},{"location":"modules/rag/#figures","title":"Figures","text":"","tags":["module"]},{"location":"modules/safety-security/","title":"safety security","text":"<p>Synthesis:</p>","tags":["module"]},{"location":"modules/safety-security/#why-its-important-for-designers-to-know","title":"Why it\u2019s important for designers to know","text":"","tags":["module"]},{"location":"modules/safety-security/#how-this-applies-to-the-ai-powered-bot","title":"How this applies to the AI-powered bot","text":"","tags":["module"]},{"location":"modules/safety-security/#collaboration-prompts-for-engineers","title":"Collaboration prompts for engineers","text":"","tags":["module"]},{"location":"modules/safety-security/#sources","title":"Sources","text":"","tags":["module"]},{"location":"modules/safety-security/#figures","title":"Figures","text":"","tags":["module"]},{"location":"modules/streaming-ux/","title":"streaming ux","text":"<p>Synthesis:</p>","tags":["module"]},{"location":"modules/streaming-ux/#why-its-important-for-designers-to-know","title":"Why it\u2019s important for designers to know","text":"","tags":["module"]},{"location":"modules/streaming-ux/#how-this-applies-to-the-ai-powered-bot","title":"How this applies to the AI-powered bot","text":"","tags":["module"]},{"location":"modules/streaming-ux/#collaboration-prompts-for-engineers","title":"Collaboration prompts for engineers","text":"","tags":["module"]},{"location":"modules/streaming-ux/#sources","title":"Sources","text":"","tags":["module"]},{"location":"modules/streaming-ux/#figures","title":"Figures","text":"","tags":["module"]},{"location":"modules/token-context/","title":"token context","text":"<p>Synthesis:</p>","tags":["module"]},{"location":"modules/token-context/#why-its-important-for-designers-to-know","title":"Why it\u2019s important for designers to know","text":"","tags":["module"]},{"location":"modules/token-context/#how-this-applies-to-the-ai-powered-bot","title":"How this applies to the AI-powered bot","text":"","tags":["module"]},{"location":"modules/token-context/#collaboration-prompts-for-engineers","title":"Collaboration prompts for engineers","text":"","tags":["module"]},{"location":"modules/token-context/#sources","title":"Sources","text":"","tags":["module"]},{"location":"modules/token-context/#figures","title":"Figures","text":"","tags":["module"]},{"location":"modules/transformers/","title":"transformers","text":"<p>Synthesis:</p>","tags":["module"]},{"location":"modules/transformers/#why-its-important-for-designers-to-know","title":"Why it\u2019s important for designers to know","text":"","tags":["module"]},{"location":"modules/transformers/#how-this-applies-to-the-ai-powered-bot","title":"How this applies to the AI-powered bot","text":"","tags":["module"]},{"location":"modules/transformers/#collaboration-prompts-for-engineers","title":"Collaboration prompts for engineers","text":"","tags":["module"]},{"location":"modules/transformers/#sources","title":"Sources","text":"","tags":["module"]},{"location":"modules/transformers/#figures","title":"Figures","text":"","tags":["module"]},{"location":"perspectives/","title":"Perspectives","text":"<p>Multiple authoritative sources on the same concept. Each page opens with a short synthesis.</p>"},{"location":"perspectives/llm-fundamentals/","title":"LLM Fundamentals \u2014 Perspectives","text":"<p>Synthesis: Multiple authoritative sources covering transformers, scaling, context windows, and prompting foundations.</p>"},{"location":"perspectives/llm-fundamentals/#why-its-important-for-designers-to-know","title":"Why it\u2019s important for designers to know","text":"<p>Designers shape how concepts are taught and applied; understanding fundamentals drives better UX and evaluation criteria.</p>"},{"location":"perspectives/llm-fundamentals/#how-this-applies-to-the-ai-powered-bot","title":"How this applies to the AI-powered bot","text":"<p>Guides prompt shapes, retrieval needs, and UI affordances (streaming, grounding, error recovery).</p>"},{"location":"perspectives/llm-fundamentals/#collaboration-prompts-for-engineers","title":"Collaboration prompts for engineers","text":"<ul> <li>What context window and tokenization constraints should UX account for?</li> <li>What retrieval strategy and chunking works best for our content?</li> </ul>"},{"location":"perspectives/llm-fundamentals/#sources","title":"Sources","text":"<p>See Sources section for linked pages.</p>"},{"location":"ripersigma/ProtectionCommands/","title":"ProtectionCommands","text":""},{"location":"ripersigma/ProtectionCommands/#protection-system-command-reference","title":"Protection System Command Reference","text":"<p>v1.0 | Created: 2025-04-09</p>"},{"location":"ripersigma/ProtectionCommands/#protection-shorthand-commands","title":"\ud83d\udee1\ufe0f Protection Shorthand Commands","text":""},{"location":"ripersigma/ProtectionCommands/#known-bug-work-around","title":"KNOWN BUG WORK-AROUND","text":"<p>In Cursor version .48.8 Shorthand commands defined in project rules (.mdc files) are not being recognized when used directly in the Cmd+K prompt, even when the rules have alwaysApply: true set.</p>"},{"location":"ripersigma/ProtectionCommands/#workarounds","title":"WORKAROUNDS","text":"<ul> <li>Working method #1: Select code \u2192 @Rules \u2192 select rule file \u2192 type shorthand command</li> <li>Working method #2: Add just the shorthand command descriptions to global rules in Settings in Cursor</li> </ul> <pre><code># Code Protection Shorthand Commands\n!cp - Add PROTECTED comment\n!cg - Add GUARDED comment  \n!ci - Add INFO comment\n!cd - Add DEBUG comment\n!ct - Add TEST comment\n!cc - Add CRITICAL comment\n</code></pre> <p>When using Command-K in the code editor, type:</p> Shorthand Expands To Protection Level <code>!cp</code> PROTECTED comment Highest <code>!cg</code> GUARDED comment High <code>!ci</code> INFO comment Medium <code>!cd</code> DEBUG comment Medium <code>!ct</code> TEST comment Medium <code>!cc</code> CRITICAL comment Highest"},{"location":"ripersigma/ProtectionCommands/#example-usage","title":"\ud83d\udcdd Example Usage","text":""},{"location":"ripersigma/ProtectionCommands/#javascript-example","title":"JavaScript Example","text":"<pre><code>// PROTECTED - DO NOT MODIFY\nfunction processPayment(paymentDetails) {\n  // Payment processing logic\n}\n</code></pre> <p>Python Example python# GUARDED - ASK BEFORE MODIFYING def validate_user_credentials(username, password):     # Authentication logic HTML Example html</p> <p>CSS Example css/ CRITICAL - BUSINESS LOGIC / .security-element {   display: none;   visibility: hidden; } \ud83d\udd0d Scanner Command To scan your project for code that should be protected: /protect-scan This will analyze your codebase and suggest appropriate protection levels. \ud83d\udd04 Protection Status Command To check the status of protected code in your project: /protect-status This will show all protected regions and their status. \ud83d\udcac Protection Commands CommandPurpose/protect-scanScan project for code that should be protected/protect-statusView all protected regions/protect-addAdd protection to selected code/protect-removeRemove protection (requires confirmation)/protect-approveApprove modification of GUARDED code \ud83d\udd04 Protection Mode Behaviors In RESEARCH Mode (\u03a9\u2081)</p> <p>Protected code is identified and documented No modifications are attempted</p> <p>In INNOVATE Mode (\u03a9\u2082)</p> <p>Protected code boundaries are respected Alternative approaches are proposed that work around protected sections</p> <p>In PLAN Mode (\u03a9\u2083)</p> <p>Work is planned around protected code Permission is requested for modifying GUARDED code</p> <p>In EXECUTE Mode (\u03a9\u2084)</p> <p>PROTECTED and CRITICAL code remains untouched GUARDED code only modified with explicit permission Other protection levels handled according to guidelines</p> <p>In REVIEW Mode (\u03a9\u2085)</p> <p>Verifies all protection has been respected Reports any violations Documents any approved changes to GUARDED code</p>"},{"location":"ripersigma/bmad_integration_guide/","title":"\ud83c\udfe2 BMAD Integration Guide for CursorRIPER \u03a3","text":""},{"location":"ripersigma/bmad_integration_guide/#overview","title":"\ud83d\udccb Overview","text":"<p>BMAD-Method integration transforms CursorRIPER \u03a3 from memory-bank driven to PRD-driven enterprise methodology. This guide covers migration strategies and best practices.</p>"},{"location":"ripersigma/bmad_integration_guide/#integration-philosophy","title":"\ud83c\udfaf Integration Philosophy","text":"<p>BMAD enhances CursorRIPER \u03a3 with: - Role-based workflows (\u0392) - PRD-driven development (\u03a1) - Quality gates (\u039a) - Enterprise features (\u0395)</p> <p>While maintaining: - Symbolic notation efficiency - RIPER mode discipline - Token optimization - Modular architecture</p>"},{"location":"ripersigma/bmad_integration_guide/#migration-strategies","title":"\ud83d\udd04 Migration Strategies","text":""},{"location":"ripersigma/bmad_integration_guide/#option-1-soft-migration-recommended","title":"Option 1: Soft Migration (Recommended)","text":"<p>Phase 1: Preparation (Week 1)</p> <pre><code>1. Continue using memory banks (\u03c3\u2081-\u03c3\u2086)\n2. Enable role system:\n   - Uncomment in .cursor/bmad.json:\n     @file .cursor/rules/bmad_roles.mdc\n3. Assign team roles:\n   - Product Owner \u2192 \u0392\u2081\n   - Architect \u2192 \u0392\u2082\n   - Developers \u2192 \u0392\u2083\n   - QA \u2192 \u0392\u2084\n   - DevOps \u2192 \u0392\u2085\n4. Practice role switching:\n   !br Developer\n</code></pre> <p>Phase 2: Parallel Running (Week 2-3)</p> <pre><code>1. Enable PRD system:\n   @file .cursor/rules/prd_system.mdc\n2. Create first PRD from memory banks:\n   !prdn\n3. Map memory content:\n   \u03c3\u2081 (projectbrief) \u2192 \u03a1\u2081 (objectives)\n   \u03c3\u2082 (systemPatterns) \u2192 Architect artifacts\n   \u03c3\u2083 (techContext) \u2192 \u03a1\u2083 (constraints)\n4. Run both systems in parallel\n</code></pre> <p>Phase 3: Gate Introduction (Week 4)</p> <pre><code>1. Enable quality gates:\n   @file .cursor/rules/quality_gates.mdc\n2. Start with advisory mode\n3. Practice gate workflows:\n   !kg - Check current gate\n   !kgc - View checklist\n4. Gradually enforce gates\n</code></pre>"},{"location":"ripersigma/bmad_integration_guide/#option-2-full-migration-advanced-teams","title":"Option 2: Full Migration (Advanced Teams)","text":"<pre><code>1. Enable all BMAD components immediately\n2. Archive existing memory banks\n3. Create comprehensive PRD\n4. Enforce all quality gates\n5. Activate enterprise features\n</code></pre>"},{"location":"ripersigma/bmad_integration_guide/#role-adoption-guide","title":"\ud83d\udc65 Role Adoption Guide","text":""},{"location":"ripersigma/bmad_integration_guide/#product-owner-1","title":"Product Owner (\u0392\u2081)","text":"<p>Primary Modes: RESEARCH (\u03a9\u2081), INNOVATE (\u03a9\u2082)</p> <pre><code>Workflow:\n1. !br ProductOwner\n2. /r - Enter research mode\n3. Gather requirements\n4. !prdn - Create PRD\n5. Define objectives (\u03a1\u2081)\n6. Write user stories (\u03a1\u2084)\n7. !kga - Approve PRD gate\n</code></pre>"},{"location":"ripersigma/bmad_integration_guide/#architect-2","title":"Architect (\u0392\u2082)","text":"<p>Primary Modes: INNOVATE (\u03a9\u2082), PLAN (\u03a9\u2083)</p> <pre><code>Workflow:\n1. !br Architect\n2. /i - Enter innovate mode\n3. Design system architecture\n4. /p - Switch to plan mode\n5. Create technical specs\n6. Update constraints (\u03a1\u2083)\n7. !kga - Approve design gate\n</code></pre>"},{"location":"ripersigma/bmad_integration_guide/#developer-3","title":"Developer (\u0392\u2083)","text":"<p>Primary Modes: PLAN (\u03a9\u2083), EXECUTE (\u03a9\u2084)</p> <pre><code>Workflow:\n1. !br Developer\n2. /p - Enter plan mode\n3. Review PRD and specs\n4. Create implementation plan\n5. /e - Switch to execute mode\n6. Implement features\n7. !kg - Check code review gate\n</code></pre>"},{"location":"ripersigma/bmad_integration_guide/#qa-engineer-4","title":"QA Engineer (\u0392\u2084)","text":"<p>Primary Modes: EXECUTE (\u03a9\u2084), REVIEW (\u03a9\u2085)</p> <pre><code>Workflow:\n1. !br QA\n2. /e - Enter execute mode\n3. Create test plans\n4. Execute tests\n5. /rev - Switch to review mode\n6. Verify implementation\n7. !kga - Approve QA gate\n</code></pre>"},{"location":"ripersigma/bmad_integration_guide/#devops-5","title":"DevOps (\u0392\u2085)","text":"<p>Primary Modes: EXECUTE (\u03a9\u2084), REVIEW (\u03a9\u2085)</p> <pre><code>Workflow:\n1. !br DevOps\n2. Setup CI/CD pipelines\n3. Configure monitoring\n4. Prepare deployment\n5. !kga - Approve deployment gate\n</code></pre>"},{"location":"ripersigma/bmad_integration_guide/#prd-workflow","title":"\ud83d\udcc4 PRD Workflow","text":""},{"location":"ripersigma/bmad_integration_guide/#creating-prd","title":"Creating PRD","text":"<pre><code># 1. Initialize PRD\n!prdn\n\n# 2. Navigate to PRD\ncd prd/active/\n\n# 3. Fill components\n- objectives.md (\u03a1\u2081)\n- requirements.md (\u03a1\u2082)\n- constraints.md (\u03a1\u2083)\n- stories/*.md (\u03a1\u2084)\n- acceptance/*.md (\u03a1\u2085)\n- metrics.md (\u03a1\u2086)\n\n# 4. Validate PRD\n!prdv\n\n# 5. Check completeness\n!prdc\n</code></pre>"},{"location":"ripersigma/bmad_integration_guide/#prd-states","title":"PRD States","text":"<pre><code>draft \u2192 in_review \u2192 approved \u2192 in_development \u2192 completed\n         \u2193\n      (revisions)\n</code></pre>"},{"location":"ripersigma/bmad_integration_guide/#quality-gate-process","title":"\ud83d\udea6 Quality Gate Process","text":""},{"location":"ripersigma/bmad_integration_guide/#gate-progression","title":"Gate Progression","text":"<pre><code>START \u2192 \u039a\u2081 \u2192 \u039a\u2082 \u2192 \u039a\u2083 \u2192 \u039a\u2084 \u2192 \u039a\u2085 \u2192 RELEASE\n        PRD  Design Code  QA   Deploy\n</code></pre>"},{"location":"ripersigma/bmad_integration_guide/#gate-workflow","title":"Gate Workflow","text":"<pre><code># 1. Check current gate\n!kg\n\n# 2. View checklist\n!kgc\n\n# 3. Complete blockers\n- Fix all items marked \u274c\n- Upload required artifacts\n- Run required tests\n\n# 4. Request approval\n!kgr\n\n# 5. Gate approval (by authorized role)\n!kga\n</code></pre>"},{"location":"ripersigma/bmad_integration_guide/#emergency-override","title":"Emergency Override","text":"<pre><code>!kgs  # Skip gate - requires justification\n</code></pre>"},{"location":"ripersigma/bmad_integration_guide/#enterprise-features","title":"\ud83c\udfe2 Enterprise Features","text":""},{"location":"ripersigma/bmad_integration_guide/#documentation-generation","title":"Documentation Generation","text":"<pre><code># Generate all docs\n!edg\n\n# Generate specific docs\n!edgt  # Technical documentation\n!edga  # API documentation\n!edgu  # User guide\n</code></pre>"},{"location":"ripersigma/bmad_integration_guide/#version-management","title":"Version Management","text":"<pre><code># Bump version\n!evb minor  # 1.0.0 \u2192 1.1.0\n\n# Create release tag\n!evt\n\n# View changelog\n!evc\n</code></pre>"},{"location":"ripersigma/bmad_integration_guide/#compliance-tracking","title":"Compliance Tracking","text":"<pre><code># Check compliance score\n!ecs\n\n# Generate compliance report\n!ecr\n\n# View compliance gaps\n!ecg\n</code></pre>"},{"location":"ripersigma/bmad_integration_guide/#best-practices","title":"\ud83d\udcca Best Practices","text":""},{"location":"ripersigma/bmad_integration_guide/#1-role-discipline","title":"1. Role Discipline","text":"<ul> <li>Stay within role boundaries</li> <li>Use appropriate modes for role</li> <li>Request approval from correct roles</li> </ul>"},{"location":"ripersigma/bmad_integration_guide/#2-prd-maintenance","title":"2. PRD Maintenance","text":"<ul> <li>Keep PRD as single source of truth</li> <li>Update PRD before implementation</li> <li>Archive completed PRDs</li> </ul>"},{"location":"ripersigma/bmad_integration_guide/#3-gate-hygiene","title":"3. Gate Hygiene","text":"<ul> <li>Never skip gates without reason</li> <li>Complete all blockers before proceeding</li> <li>Maintain audit trail</li> </ul>"},{"location":"ripersigma/bmad_integration_guide/#4-documentation","title":"4. Documentation","text":"<ul> <li>Generate docs after each gate</li> <li>Keep docs version-aligned</li> <li>Automate where possible</li> </ul>"},{"location":"ripersigma/bmad_integration_guide/#configuration-examples","title":"\ud83d\udd27 Configuration Examples","text":""},{"location":"ripersigma/bmad_integration_guide/#team-configuration","title":"Team Configuration","text":"<pre><code>{\n  \"team\": {\n    \"product_owner\": [\"alice@company.com\"],\n    \"architects\": [\"bob@company.com\"],\n    \"developers\": [\"carol@company.com\", \"dave@company.com\"],\n    \"qa\": [\"eve@company.com\"],\n    \"devops\": [\"frank@company.com\"]\n  },\n  \"gate_enforcement\": \"advisory\",  // advisory | strict\n  \"prd_required\": true,\n  \"auto_documentation\": true\n}\n</code></pre>"},{"location":"ripersigma/bmad_integration_guide/#gate-customization","title":"Gate Customization","text":"<pre><code>// In quality_gates.mdc\n\u039a_custom = {\n  security_review: {\n    phase: \"Pre-deployment\",\n    blockers: {\n      security_scan: \"passed\",\n      penetration_test: \"completed\"\n    },\n    approvers: [\"security_team\"]\n  }\n}\n</code></pre>"},{"location":"ripersigma/bmad_integration_guide/#common-challenges","title":"\ud83d\udea8 Common Challenges","text":""},{"location":"ripersigma/bmad_integration_guide/#role-permissions-conflict","title":"\"Role permissions conflict\"","text":"<ul> <li>Check role-mode affinity</li> <li>Some operations need specific roles</li> <li>Use !brp to see role permissions</li> </ul>"},{"location":"ripersigma/bmad_integration_guide/#gate-blocked-indefinitely","title":"\"Gate blocked indefinitely\"","text":"<ul> <li>Review !kgb for blockers</li> <li>Ensure artifacts uploaded</li> <li>Check approver availability</li> </ul>"},{"location":"ripersigma/bmad_integration_guide/#prd-out-of-sync","title":"\"PRD out of sync\"","text":"<ul> <li>Always update PRD first</li> <li>Use !prdv to validate</li> <li>Archive old versions properly</li> </ul>"},{"location":"ripersigma/bmad_integration_guide/#success-metrics","title":"\ud83d\udcc8 Success Metrics","text":"<p>Track these KPIs: 1. Gate cycle time: Time spent at each gate 2. PRD accuracy: Changes after approval 3. Defect escape rate: Bugs found post-gates 4. Documentation coverage: Auto-generated % 5. Compliance score: Overall compliance %</p>"},{"location":"ripersigma/bmad_integration_guide/#training-resources","title":"\ud83c\udf93 Training Resources","text":"<ol> <li>Role-specific guides: <code>/docs/bmad/roles/</code></li> <li>PRD templates: <code>/prd/templates/</code></li> <li>Gate checklists: <code>/quality/checklists/</code></li> <li>Video tutorials: Coming soon</li> <li>Practice project: <code>/examples/bmad-tutorial/</code></li> </ol>"},{"location":"ripersigma/bmad_integration_guide/#rollback-plan","title":"\ud83d\udd04 Rollback Plan","text":"<p>If BMAD doesn't fit your team: 1. Disable components in <code>.cursor/bmad.json</code> 2. Revert to memory banks 3. Keep what works (e.g., just roles) 4. No framework damage - fully reversible</p> <p>BMAD Integration Guide v1.0 | Framework v1.0.5</p>"},{"location":"ripersigma/command_cheatsheet/","title":"Command cheatsheet","text":""},{"location":"ripersigma/command_cheatsheet/#cursorriper-command-cheatsheet","title":"\ud83d\udcd1 CursorRIPER \u03a3 Command Cheatsheet","text":"<p>v1.0 | Last Updated: 2025-04-11</p> <p>This cheatsheet provides a quick reference for all commands in the CursorRIPER \u03a3 framework. Commands are organized by system and functionality.</p>"},{"location":"ripersigma/command_cheatsheet/#riper-mode-commands","title":"\ud83d\udd0d RIPER Mode Commands","text":"<p>Switch between RIPER modes using these natural language commands:</p> Natural Command Shorthand Symbol Mode Focus <code>/research</code> <code>/r</code> \u03a9\u2081/\ud83d\udd0dR RESEARCH Gathering information and understanding the problem <code>/innovate</code> <code>/i</code> \u03a9\u2082/\ud83d\udca1I INNOVATE Generating ideas and exploring possibilities <code>/plan</code> <code>/p</code> \u03a9\u2083/\ud83d\udcddP PLAN Creating structured plans and specifications <code>/execute</code> <code>/e</code> \u03a9\u2084/\u2699\ufe0fE EXECUTE Implementing the planned solution <code>/review</code> <code>/rev</code> \u03a9\u2085/\ud83d\udd0eRV REVIEW Validating and reviewing the implementation"},{"location":"ripersigma/command_cheatsheet/#protection-system-commands","title":"\ud83d\udd12 Protection System Commands","text":"<p>Control code protection levels using these commands:</p> Command Description Protection Level <code>!cp</code> Set code to PROTECTED status PROTECTED - DO NOT MODIFY <code>!cg</code> Set code to GUARDED status GUARDED - ASK BEFORE MODIFYING <code>!ci</code> Set code to INFO status INFO - CONTEXT NOTE <code>!cd</code> Set code to DEBUG status DEBUG - DEBUGGING CODE <code>!ct</code> Set code to TEST status TEST - TESTING CODE <code>!cc</code> Set code to CRITICAL status CRITICAL - BUSINESS LOGIC"},{"location":"ripersigma/command_cheatsheet/#context-system-commands","title":"\ud83d\udc41\ufe0f Context System Commands","text":"<p>Manage context references with these commands:</p> Command Description Context Type <code>!af</code> Add FILES to context \u0393\u2081 (Files) <code>!ad</code> Add DOCS to context \u0393\u2082 (Documentation) <code>!ac</code> Add CODE to context \u0393\u2083 (Code) <code>!ai</code> Add ISSUES to context \u0393\u2084 (Issues) <code>!ap</code> Add PLANS to context \u0393\u2085 (Plans) <code>!ar</code> Add REQUIREMENTS to context \u0393\u2086 (Requirements) <code>!aa</code> Add APIs to context \u0393\u2087 (APIs) <code>!at</code> Add TESTS to context \u0393\u2088 (Tests) <code>!afs</code> Add FILESYSTEM to context \u0393\u2089 (Filesystem)"},{"location":"ripersigma/command_cheatsheet/#permission-system-commands","title":"\ud83d\udd11 Permission System Commands","text":"<p>Manage operation permissions with these commands:</p> Command Description <code>!ckp</code> Check permissions for current mode <code>!pm</code> Check if operation is permitted in current mode <code>!sp</code> Show all permissions for specified mode <code>!vm</code> Verify mode appropriate for operation"},{"location":"ripersigma/command_cheatsheet/#filesystem-commands-mcp","title":"\ud83d\udcc1 Filesystem Commands (MCP)","text":"<p>Perform filesystem operations with these commands:</p> Command Description Operation <code>!fr</code> Read file contents \u03a6_fs.read <code>!fm</code> Read multiple files \u03a6_fs.read_multi <code>!fw</code> Write to file \u03a6_fs.write <code>!fe</code> Edit file \u03a6_fs.edit <code>!fc</code> Create directory \u03a6_fs.create_dir <code>!fl</code> List directory contents \u03a6_fs.list <code>!ft</code> View directory tree \u03a6_fs.tree <code>!fv</code> Move file \u03a6_fs.move <code>!fs</code> Search files \u03a6_fs.search <code>!fi</code> Get file info \u03a6_fs.info <code>!fa</code> List allowed directories \u03a6_fs.allowed"},{"location":"ripersigma/command_cheatsheet/#memory-management-commands","title":"\ud83d\udcbe Memory Management Commands","text":"<p>Access and update memory files:</p> Command Description Memory File <code>@ps</code> Access Project Summary \u03c3\u2081 (Project Summary) <code>@sp</code> Access System Patterns \u03c3\u2082 (System Patterns) <code>@tc</code> Access Tech Context \u03c3\u2083 (Tech Context) <code>@ac</code> Access Active Context \u03c3\u2084 (Active Context) <code>@pg</code> Access Progress \u03c3\u2085 (Progress) <code>@pt</code> Access Protection \u03c3\u2086 (Protection)"},{"location":"ripersigma/command_cheatsheet/#cross-reference-notation","title":"\ud83d\udcca Cross-Reference Notation","text":"<p>Create references between elements using these formats:</p> Format Description Example <code>[\u2197\ufe0f\u03c3\u2081:R\u2081]</code> Reference to Requirement 1 in Project Summary <code>This feature addresses [\u2197\ufe0f\u03c3\u2081:R\u2081]</code> <code>[\u2197\ufe0f\u03c3\u2082:C\u2081]</code> Reference to Component 1 in System Patterns <code>Implements the [\u2197\ufe0f\u03c3\u2082:C\u2081] pattern</code> <code>[\u2197\ufe0f\u03c3\u2083:T\u2081]</code> Reference to Technology 1 in Tech Context <code>Using [\u2197\ufe0f\u03c3\u2083:T\u2081] for implementation</code> <code>[\u2197\ufe0f\u03c3\u2081:R\u2081\\|\u0393\u2083]</code> Reference with context <code>Code for [\u2197\ufe0f\u03c3\u2081:R\u2081\\|\u0393\u2083]</code> <code>[\u2119(\u03a9\u2081):read_only]</code> Reference with permissions <code>This operation is [\u2119(\u03a9\u2081):read_only]</code> <code>[\u0393\u2089:path/to/file.js]</code> Filesystem reference <code>See [\u0393\u2089:path/to/file.js]</code>"},{"location":"ripersigma/command_cheatsheet/#safety-protocols","title":"\ud83d\udee1\ufe0f Safety Protocols","text":"<p>Safety protocols that trigger automatically:</p> Symbol Description Trigger \u0394\u2081 Destructive operation warning When performing destructive operations \u0394\u2082 Phase transition backup When changing project phase \u0394\u2083-\u0394\u2086 Various safety checks System-specific conditions \u0394\u2087 Filesystem operation safety When performing write operations"},{"location":"ripersigma/command_cheatsheet/#backup-commands","title":"\ud83d\udd04 Backup Commands","text":"<p>Manage system backups:</p> Command Description <code>!backup</code> Create manual backup of all memory files <code>!restore &lt;timestamp&gt;</code> Restore from backup with specified timestamp <code>!list-backups</code> List all available backups"},{"location":"ripersigma/command_cheatsheet/#tips-for-effective-use","title":"\ud83d\udd2e Tips for Effective Use","text":"<ul> <li>Start with the right mode: Use <code>/r</code> when starting research, <code>/p</code> before implementation</li> <li>Keep context relevant: Use context commands to maintain focus on current tasks</li> <li>Respect permissions: Don't attempt operations forbidden in current mode</li> <li>Use protection wisely: Set appropriate protection levels for sensitive code</li> <li>Cross-reference often: Use cross-references to maintain traceability</li> <li>Backup before major changes: Create manual backups before significant changes</li> </ul> <p>Remember, you can use natural language commands instead of symbolic notation for all operations. The framework will work exactly the same way with either approach.</p> <p>For a full reference of all symbols, see <code>docs/symbols.md</code>.</p>"},{"location":"ripersigma/howto_context/","title":"Howto context","text":""},{"location":"ripersigma/howto_context/#how-to-use-context-references-in-cursorriper","title":"\ud83d\udcda How to Use Context References in CursorRIPER \u03a3","text":"<p>v1.0 | Created: 2025-04-10</p> <p>This guide provides practical examples of how to use the context reference system in CursorRIPER \u03a3.</p>"},{"location":"ripersigma/howto_context/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ol> <li>Basic Context References</li> <li>Working with Mode-Specific Context</li> <li>Context Status Management</li> <li>Cross-References with Context</li> <li>Protection and Context Integration</li> <li>Context in Memory Files</li> <li>Advanced Context Operations</li> </ol>"},{"location":"ripersigma/howto_context/#basic-context-references","title":"Basic Context References","text":""},{"location":"ripersigma/howto_context/#adding-file-references","title":"Adding File References","text":"<pre><code>// Add a specific file to your context\n!af src/main.js\n\n// Add multiple files\n!af src/components/Auth.js\n!af src/utils/helpers.js\n\n// Reference in discussion\nAccording to the implementation in \ud83d\udcc4src/components/Auth.js, we need to...\n</code></pre>"},{"location":"ripersigma/howto_context/#adding-code-references","title":"Adding Code References","text":"<pre><code>// Add specific function to context\n!ac validateUser()\n\n// Add a class to context\n!ac AuthController\n\n// Reference in discussion\nThe \ud83d\udcbbvalidateUser() function should handle these edge cases...\n</code></pre>"},{"location":"ripersigma/howto_context/#adding-documentation-references","title":"Adding Documentation References","text":"<pre><code>// Add API documentation to context\n!adoc API Reference\n\n// Reference in discussion\nBased on \ud83d\udcdaAPI Reference, we should implement the endpoint as...\n</code></pre>"},{"location":"ripersigma/howto_context/#removing-context-references","title":"Removing Context References","text":"<pre><code>// Remove a reference that's no longer needed\n!cr src/components/Auth.js\n\n// Clear all context references\n!cc\n</code></pre>"},{"location":"ripersigma/howto_context/#working-with-mode-specific-context","title":"Working with Mode-Specific Context","text":""},{"location":"ripersigma/howto_context/#setting-context-for-current-mode","title":"Setting Context for Current Mode","text":"<pre><code>// Switch to Research mode\n/r\n\n// Apply default context for Research mode (docs, folders, git)\n!cm\n\n// Result:\n// \ud83d\udcdaAPI Documentation, \ud83d\udcc1src/components/, \ud83d\udd04feature/auth\n</code></pre>"},{"location":"ripersigma/howto_context/#mode-specific-usage-examples","title":"Mode-Specific Usage Examples","text":""},{"location":"ripersigma/howto_context/#research-mode-1","title":"Research Mode (\u03a9\u2081)","text":"<pre><code>/r\n!cm\n!adoc Security Best Practices\n!ad src/auth/\n!ag commit:a8f2e3\n</code></pre>"},{"location":"ripersigma/howto_context/#innovate-mode-2","title":"Innovate Mode (\u03a9\u2082)","text":"<pre><code>/i\n!cm\n!ac AuthProtocol\n!adoc OAuth Standards\n!an Auth Ideas\n</code></pre>"},{"location":"ripersigma/howto_context/#plan-mode-3","title":"Plan Mode (\u03a9\u2083)","text":"<pre><code>/p\n!cm\n!af src/roadmap.md\n!ad test/\n!ar Coding Standards\n</code></pre>"},{"location":"ripersigma/howto_context/#execute-mode-4","title":"Execute Mode (\u03a9\u2084)","text":"<pre><code>/e\n!cm\n!ac implementAuth()\n!af src/auth/login.js\n!pf test/auth/login.test.js\n</code></pre>"},{"location":"ripersigma/howto_context/#review-mode-5","title":"Review Mode (\u03a9\u2085)","text":"<pre><code>/rev\n!cm\n!ac validateCredentials()\n!af src/auth/validation.js\n!ag PR#42\n</code></pre>"},{"location":"ripersigma/howto_context/#context-status-management","title":"Context Status Management","text":""},{"location":"ripersigma/howto_context/#setting-context-status","title":"Setting Context Status","text":"<pre><code>// Mark a reference as essential\n!cs validateUser() essential\n\n// Mark a reference as partially relevant\n!cs helpers.js partially\n\n// Mark a reference as deprecated\n!cs oldUtil.js deprecated\n</code></pre>"},{"location":"ripersigma/howto_context/#referencing-by-status","title":"Referencing by Status","text":"<pre><code>// In discussions\nAccording to the essential context (\ud83d\udfe3\ud83d\udcbbvalidateUser()), we should...\n\nThe partially relevant \ud83d\udfe1\ud83d\udcc4helpers.js contains utility functions...\n\nWe should replace \ud83d\udd34\ud83d\udcc4oldUtil.js with the new implementation.\n</code></pre>"},{"location":"ripersigma/howto_context/#cross-references-with-context","title":"Cross-References with Context","text":""},{"location":"ripersigma/howto_context/#basic-cross-references-with-context","title":"Basic Cross-References with Context","text":"<pre><code>// Reference a requirement with code context\nThis implementation satisfies [\u2197\ufe0f\u03c3\u2081:R\u2083|\u0393\u2083:validateUser()]\n\n// Reference a task with file context\nAccording to task [\u2197\ufe0f\u03c3\u2084:T\u2082|\u0393\u2081:auth.js], we need to...\n\n// Reference a protected region with documentation\nThe protected region [\u2197\ufe0f\u03c3\u2086:P\u2081|\u0393\u2084:Security Guide] specifies...\n</code></pre>"},{"location":"ripersigma/howto_context/#context-only-references","title":"Context-Only References","text":"<pre><code>// Direct context reference\nThe [\u0393\u2083:AuthService] needs to handle these cases...\n\n// With protection level\nThe [\u03a8\u2081+\u0393\u2083:validateUser()] function is protected and should not...\n</code></pre>"},{"location":"ripersigma/howto_context/#protection-and-context-integration","title":"Protection and Context Integration","text":""},{"location":"ripersigma/howto_context/#referencing-protected-code","title":"Referencing Protected Code","text":"<pre><code>// Protected code reference\nThe \ud83d\udd12\ud83d\udcbbvalidateUser() function contains critical authentication logic...\n\n// Guarded code reference\nThe \ud83d\udee1\ufe0f\ud83d\udcbbprocessPayment() function should only be modified after review...\n\n// Info code reference\nThe \u2139\ufe0f\ud83d\udcbblogActivity() function provides context for debugging...\n</code></pre>"},{"location":"ripersigma/howto_context/#combined-protection-and-context","title":"Combined Protection and Context","text":"<pre><code>// Add protected code to context\n!ac validateUser()\n!cp validateUser()\n\n// Combined reference in discussion\nThe \ud83d\udd12\ud83d\udcbbvalidateUser() function satisfies requirement [\u2197\ufe0f\u03c3\u2081:R\u2082|\u0393\u2083]\n</code></pre>"},{"location":"ripersigma/howto_context/#context-in-memory-files","title":"Context in Memory Files","text":""},{"location":"ripersigma/howto_context/#reading-context-from-active-context","title":"Reading Context from Active Context","text":"<pre><code>// activeContext.md excerpt:\n## \ud83d\udcce Context References\n- \ud83d\udcc4 Active Files: [auth.js, config.json]\n- \ud83d\udcbb Active Code: [validateUser(), AuthService]\n- \ud83d\udcda Active Docs: [Security Guide]\n- \ud83d\udd04 Git References: [PR#42]\n\n## \ud83d\udce1 Context Status\n- \ud83d\udfe2 Active: [auth.js, AuthService]\n- \ud83d\udfe3 Essential: [validateUser()]\n- \ud83d\udfe1 Partially Relevant: [config.json]\n</code></pre>"},{"location":"ripersigma/howto_context/#updating-context-via-mode-switching","title":"Updating Context via Mode Switching","text":"<pre><code>// Current context contains research references\n/i\n!cm\n\n// Context is updated with innovate-specific references\n// Previous context is backed up before replacement\n</code></pre>"},{"location":"ripersigma/howto_context/#advanced-context-operations","title":"Advanced Context Operations","text":""},{"location":"ripersigma/howto_context/#context-intersection","title":"Context Intersection","text":"<pre><code>// Find overlap between active files and protected files\nLet's look at the intersection of \ud83d\udcc4 \u2229 \ud83d\udd12 = {auth.js, config.json}\n</code></pre>"},{"location":"ripersigma/howto_context/#context-union","title":"Context Union","text":"<pre><code>// Combine debug and test code contexts for testing\nWe need to consider \ud83d\udc1e\ud83d\udcbb \u222a \ud83e\uddea\ud83d\udcbb = {debug(), test(), validate.test()}\n</code></pre>"},{"location":"ripersigma/howto_context/#context-filtering","title":"Context Filtering","text":"<pre><code>// Filter context by criteria\n\u03a6\u0393\u2082(\ud83d\udcbb, \"auth\") \u2192 {authenticateUser(), validateSession()}\n\n// Context prioritization\n\u03a6\u0393\u2085(\ud83d\udcc4, \"critical\") \u2192 [auth.js, encryption.js]\n</code></pre>"},{"location":"ripersigma/howto_context/#quick-tips","title":"\ud83d\udd0d Quick Tips","text":"<ol> <li>Start with <code>!cm</code> after switching modes to get default context</li> <li>Use specific context commands (!af, !ac, etc.) to fine-tune</li> <li>Set status (!cs) for important references</li> <li>Use cross-references with context for traceability</li> <li>Backup context is created automatically on major changes</li> <li>Combine protection and context for security-critical code</li> <li>Use context operations for complex relationships</li> </ol> <p>This guide provides examples for using the context reference system in CursorRIPER \u03a3</p>"},{"location":"ripersigma/integration_guide/","title":"Integration guide","text":""},{"location":"ripersigma/integration_guide/#cursorripersigma-user-guide","title":"CursorRIPER.sigma User Guide","text":"<p>Adding the CursorRIPER.sigma Framework to Existing Projects</p>"},{"location":"ripersigma/integration_guide/#introduction","title":"Introduction","text":"<p>CursorRIPER.sigma is a highly condensed version of the CursorRIPER Framework using symbolic notation, emoji, and mathematical symbols. This framework provides a structured approach to project management through five RIPER modes (Research, Innovate, Plan, Execute, Review) and a robust memory system.</p> <p>This guide will walk you through the process of integrating CursorRIPER.sigma with your existing projects.</p>"},{"location":"ripersigma/integration_guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>An existing project that you want to enhance with the CursorRIPER.sigma framework</li> <li>The CursorRIPER.sigma framework files</li> </ul>"},{"location":"ripersigma/integration_guide/#setup-process","title":"Setup Process","text":""},{"location":"ripersigma/integration_guide/#step-1-initialize-the-system","title":"Step 1: Initialize the System","text":"<pre><code>/initialize system\n</code></pre> <p>What this does: Creates the basic directory structure (\ud83d\udcc2 and \ud83d\udce6 folders) and generates all template memory files. It establishes the foundation for the framework by running the <code>\u03a6_file.init()</code> and <code>\u03a6_memory.initialize()</code> functions.</p>"},{"location":"ripersigma/integration_guide/#step-2-set-development-phase","title":"Step 2: Set Development Phase","text":"<pre><code>/set phase development\n</code></pre> <p>What this does: Establishes the current project phase as \u03a0\u2081: \ud83c\udfd7\ufe0fDEVELOPMENT, indicating that your project is in active development. This affects how the framework processes commands and what operations are available to you.</p>"},{"location":"ripersigma/integration_guide/#step-3-set-research-mode","title":"Step 3: Set Research Mode","text":"<pre><code>/set mode research\n</code></pre> <p>or the shorthand:</p> <pre><code>/r\n</code></pre> <p>What this does: Sets the current RIPER mode to \u03a9\u2081: \ud83d\udd0dRESEARCH, focusing the framework on gathering information about your existing project. This activates specific task categories in the framework and prepares it for analysis.</p>"},{"location":"ripersigma/integration_guide/#step-4-update-project-brief","title":"Step 4: Update Project Brief","text":"<pre><code>/update projectbrief\n</code></pre> <p>What this does: Opens the project summary template (\u03c3\u2081) for editing, where you should input: - Project overview and purpose - Key requirements (R\u2081, R\u2082, etc.) - Success criteria - Project scope</p> <p>This creates the foundation for all future framework operations.</p>"},{"location":"ripersigma/integration_guide/#step-5-update-technical-context","title":"Step 5: Update Technical Context","text":"<pre><code>/update techContext\n</code></pre> <p>What this does: Prompts you to document your existing project's technology stack, environment, and dependencies in the \u03c3\u2083 memory file. This helps the framework understand the technical context of your project.</p>"},{"location":"ripersigma/integration_guide/#step-6-analyze-project","title":"Step 6: Analyze Project","text":"<pre><code>/analyze project\n</code></pre> <p>What this does: Automatically scans your existing project structure and generates insights in the activeContext.md file (\u03c3\u2084). This provides an initial assessment of your project's components and architecture.</p>"},{"location":"ripersigma/integration_guide/#step-7-create-initial-progress-tracking","title":"Step 7: Create Initial Progress Tracking","text":"<pre><code>/create initial-progress\n</code></pre> <p>What this does: Establishes baseline metrics in the progress.md file (\u03c3\u2085), setting initial completion percentages, milestones, and known issues based on your current project state.</p>"},{"location":"ripersigma/integration_guide/#step-8-set-protection-levels","title":"Step 8: Set Protection Levels","text":"<pre><code>/set protection-levels\n</code></pre> <p>What this does: Configures appropriate code protection settings in the protection.md file (\u03c3\u2086), establishing which parts of your code require special handling or permissions.</p>"},{"location":"ripersigma/integration_guide/#step-9-create-initial-backup","title":"Step 9: Create Initial Backup","text":"<pre><code>/backup create initial\n</code></pre> <p>What this does: Creates the first backup of all memory files with a timestamped identifier. This preserves the initial state before the framework begins actively working with your project.</p>"},{"location":"ripersigma/integration_guide/#step-10-transition-to-innovate-mode","title":"Step 10: Transition to Innovate Mode","text":"<pre><code>/mode innovate\n</code></pre> <p>or the shorthand:</p> <pre><code>/i\n</code></pre> <p>What this does: Transitions to \u03a9\u2082: \ud83d\udca1INNOVATE mode, enabling the framework to suggest improvements and possibilities based on the gathered research.</p>"},{"location":"ripersigma/integration_guide/#using-riper-modes","title":"Using RIPER Modes","text":"<p>The CursorRIPER.sigma framework operates through five distinct modes, each with its own focus:</p>"},{"location":"ripersigma/integration_guide/#research-mode-1","title":"\ud83d\udd0d Research Mode (\u03a9\u2081)","text":"<pre><code>/mode research\n</code></pre> <p>or</p> <pre><code>/r\n</code></pre> <p>Focus: Understanding the project, gathering information, exploring the codebase</p>"},{"location":"ripersigma/integration_guide/#innovate-mode-2","title":"\ud83d\udca1 Innovate Mode (\u03a9\u2082)","text":"<pre><code>/mode innovate\n</code></pre> <p>or</p> <pre><code>/i\n</code></pre> <p>Focus: Generating ideas, suggesting improvements, exploring possibilities</p>"},{"location":"ripersigma/integration_guide/#plan-mode-3","title":"\ud83d\udcdd Plan Mode (\u03a9\u2083)","text":"<pre><code>/mode plan\n</code></pre> <p>or</p> <pre><code>/p\n</code></pre> <p>Focus: Creating implementation plans, establishing milestones, setting priorities</p>"},{"location":"ripersigma/integration_guide/#execute-mode-4","title":"\u2699\ufe0f Execute Mode (\u03a9\u2084)","text":"<pre><code>/mode execute\n</code></pre> <p>or</p> <pre><code>/e\n</code></pre> <p>Focus: Implementing solutions, writing code, following the established plan</p>"},{"location":"ripersigma/integration_guide/#review-mode-5","title":"\ud83d\udd0e Review Mode (\u03a9\u2085)","text":"<pre><code>/mode review\n</code></pre> <p>or</p> <pre><code>/rev\n</code></pre> <p>Focus: Testing implementations, validating outputs, ensuring adherence to requirements</p>"},{"location":"ripersigma/integration_guide/#memory-system","title":"Memory System","text":"<p>The framework maintains six memory files:</p> <ol> <li>\u03c3\u2081: Project Brief (\ud83d\udccb) - Requirements, scope, and success criteria</li> <li>\u03c3\u2082: System Patterns (\ud83c\udfdb\ufe0f) - Architecture, components, and design decisions</li> <li>\u03c3\u2083: Technical Context (\ud83d\udcbb) - Technology stack, environment, and dependencies</li> <li>\u03c3\u2084: Active Context (\ud83d\udd2e) - Current focus, changes, and next steps</li> <li>\u03c3\u2085: Progress (\ud83d\udcca) - Status tracking, milestones, and issues</li> <li>\u03c3\u2086: Protection (\ud83d\udee1\ufe0f) - Security levels and permission settings</li> </ol>"},{"location":"ripersigma/integration_guide/#advanced-features","title":"Advanced Features","text":""},{"location":"ripersigma/integration_guide/#context-reference-system","title":"Context Reference System","text":"<p>Use \u0393 (Gamma) symbols to reference specific contexts:</p> <pre><code>[\u2197\ufe0f\u03c3\u2081:R\u2081|\u0393\u2083]\n</code></pre>"},{"location":"ripersigma/integration_guide/#permission-system","title":"Permission System","text":"<p>Control access using \u2119 (Pi) symbols:</p> <pre><code>[\u2119(\u03a9\u2081):read_only]\n</code></pre>"},{"location":"ripersigma/integration_guide/#backup-system","title":"Backup System","text":"<p>Create backups at any time:</p> <pre><code>/backup create custom_name\n</code></pre>"},{"location":"ripersigma/integration_guide/#file-protection","title":"File Protection","text":"<p>Six protection levels are available to secure code and resources:</p> <pre><code>/set protection-level file_name 3\n</code></pre>"},{"location":"ripersigma/integration_guide/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues:</p> <ol> <li>Check the relevant memory files for error messages</li> <li>Use <code>/status</code> to see the current state of the framework</li> <li>Use <code>/validate system</code> to check for consistency issues</li> <li>Restore from a backup if necessary: <code>/backup restore timestamp</code></li> </ol>"},{"location":"ripersigma/integration_guide/#symbol-reference","title":"Symbol Reference","text":"<p>For a complete reference of symbols used in the framework, check the automatically generated <code>symbol-reference-guide.md</code> file in the \ud83d\udcc2 directory.</p> <p>For more detailed information on specific features, refer to the documentation in the docs/ directory.</p>"},{"location":"ripersigma/integration_guide/#design-systems","title":"Design Systems","text":"<ul> <li>Select a primary system using <code>docs/design-systems/decision-tree.md</code></li> <li>Implement tokens and themes; see <code>docs/design-systems/meta-guidelines.md</code></li> <li>Follow per-mode steps: <code>docs/design-systems/mode-checklists.md</code></li> </ul>"},{"location":"ripersigma/mode_transition_diagram/","title":"Mode transition diagram","text":""},{"location":"ripersigma/mode_transition_diagram/#mode-transition-diagram","title":"\ud83d\udd04 Mode Transition Diagram","text":"<p>v1.0 | Created: 2025-04-10</p>"},{"location":"ripersigma/mode_transition_diagram/#mode-transitions-with-permission-enforcement","title":"\ud83d\udcca Mode Transitions with Permission Enforcement","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      permission(R)     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502             \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502             \u2502\n\u2502   RESEARCH  \u2502                         \u2502  INNOVATE   \u2502\n\u2502     (\u03a9\u2081)    \u2502\u25c0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502    (\u03a9\u2082)     \u2502\n\u2502             \u2502      permission(R)      \u2502             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u25b2  \u2502                                    \u25b2  \u2502\n      \u2502  \u2502                                    \u2502  \u2502\n      \u2502  \u2502 permission(R)                      \u2502  \u2502 permission(R)\n      \u2502  \u25bc                                    \u2502  \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502             \u2502      permission(R)      \u2502             \u2502\n\u2502   REVIEW    \u2502\u25c0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502   EXECUTE   \u2502\n\u2502    (\u03a9\u2085)     \u2502                         \u2502    (\u03a9\u2084)     \u2502\n\u2502             \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     permission(RU)      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u25b2  \u2502                                    \u25b2  \u2502\n      \u2502  \u2502                                    \u2502  \u2502\n      \u2502  \u2502 permission(R)                      \u2502  \u2502 permission(RU)\n      \u2502  \u25bc                                    \u2502  \u25bc\n      \u2502        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510               \u2502\n      \u2502        \u2502             \u2502               \u2502\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502    PLAN     \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502    (\u03a9\u2083)     \u2502\n               \u2502             \u2502\n               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ripersigma/mode_transition_diagram/#permission-enforcement-at-transition","title":"\ud83d\udd10 Permission Enforcement at Transition","text":"<p>\u03a4(\u03a9\u2090\u2192\u03a9\u1d66) = {   verify(\u2119(\u03a9\u1d66)) \u2227    log_transition() \u2227    update_context(\u03a9\u1d66) \u2227   enforce_permissions(\ud835\udd4a(\u03a9\u1d66)) }</p>"},{"location":"ripersigma/mode_transition_diagram/#transition-rules","title":"\ud83d\udcdd Transition Rules","text":"<ol> <li>Mode-to-Mode Allowed Transitions:</li> <li>\u03a9\u2081\u2192\u03a9\u2082: RESEARCH \u2192 INNOVATE (Ideas based on research)</li> <li>\u03a9\u2082\u2192\u03a9\u2083: INNOVATE \u2192 PLAN (Formalize ideas into plans)</li> <li>\u03a9\u2083\u2192\u03a9\u2084: PLAN \u2192 EXECUTE (Implement the plan)</li> <li>\u03a9\u2084\u2192\u03a9\u2085: EXECUTE \u2192 REVIEW (Verify implementation)</li> <li>\u03a9\u2085\u2192\u03a9\u2083: REVIEW \u2192 PLAN (Refine plan based on review)</li> <li>\u03a9\u2081\u2194\u03a9\u2083: RESEARCH \u2194 PLAN (Bidirectional for refinement)</li> <li> <p>\u03a9\u2085\u2194\u03a9\u2084: REVIEW \u2194 EXECUTE (Fix issues during review)</p> </li> <li> <p>Mode Permission Changes:</p> </li> <li>On transition to \u03a9\u2081: Apply \u2119(\u03a9\u2081) = {R: \u2713, C: \u2717, U: \u2717, D: \u2717}</li> <li>On transition to \u03a9\u2082: Apply \u2119(\u03a9\u2082) = {R: \u2713, C: ~, U: \u2717, D: \u2717}</li> <li>On transition to \u03a9\u2083: Apply \u2119(\u03a9\u2083) = {R: \u2713, C: \u2713, U: ~, D: \u2717}</li> <li>On transition to \u03a9\u2084: Apply \u2119(\u03a9\u2084) = {R: \u2713, C: \u2713, U: \u2713, D: ~}</li> <li> <p>On transition to \u03a9\u2085: Apply \u2119(\u03a9\u2085) = {R: \u2713, C: \u2717, U: \u2717, D: \u2717}</p> </li> <li> <p>Safe Transition Protocol: <code>transition(\u03a9\u2090\u2192\u03a9\u1d66) = {      backup_state(),      verify_completion(\u03a9\u2090),      set_mode(\u03a9\u1d66),      apply_permissions(\u2119(\u03a9\u1d66)),      update_context(M\u0393[\u03a9\u1d66]),      log_transition(\u03a9\u2090\u2192\u03a9\u1d66)    }</code></p> </li> </ol>"},{"location":"ripersigma/mode_transition_diagram/#violation-recovery-transitions","title":"\u26a0\ufe0f Violation Recovery Transitions","text":"<pre><code>      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n      \u2502                                \u2502\n      \u2502    ANY MODE WITH VIOLATION     \u2502\n      \u2502            (\u03a9\u2099)               \u2502\n      \u2502                                \u2502\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                       \u2502\n                       \u2502 \ud835\udd4d(\u03a9\u2099, op)\n                       \u25bc\n      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n      \u2502                                \u2502\n      \u2502     PLAN MODE (SAFE MODE)      \u2502\n      \u2502             (\u03a9\u2083)               \u2502\n      \u2502                                \u2502\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Mode transition diagram with permission enforcement for CursorRIPER \u03a3 framework</p>"},{"location":"ripersigma/permission_reference/","title":"Permission reference","text":""},{"location":"ripersigma/permission_reference/#permission-system-quick-reference","title":"\ud83d\udd10 Permission System Quick Reference","text":"<p>v1.0 | Created: 2025-04-10</p>"},{"location":"ripersigma/permission_reference/#mode-permission-matrix","title":"\ud83d\udccb Mode Permission Matrix","text":"Mode Read Create Update Delete \ud83d\udd0d RESEARCH (\u03a9\u2081) \u2713 \u2717 \u2717 \u2717 \ud83d\udca1 INNOVATE (\u03a9\u2082) \u2713 ~ \u2717 \u2717 \ud83d\udcdd PLAN (\u03a9\u2083) \u2713 \u2713 ~ \u2717 \u2699\ufe0f EXECUTE (\u03a9\u2084) \u2713 \u2713 \u2713 ~ \ud83d\udd0e REVIEW (\u03a9\u2085) \u2713 \u2717 \u2717 \u2717"},{"location":"ripersigma/permission_reference/#operation-category-permissions","title":"\ud83d\udd0d Operation Category Permissions","text":"Mode Observe Virtual Real \ud83d\udd0d RESEARCH (\u03a9\u2081) \u2713 ~ \u2717 \ud83d\udca1 INNOVATE (\u03a9\u2082) \u2713 \u2713 \u2717 \ud83d\udcdd PLAN (\u03a9\u2083) \u2713 \u2713 ~ \u2699\ufe0f EXECUTE (\u03a9\u2084) \u2713 ~ \u2713 \ud83d\udd0e REVIEW (\u03a9\u2085) \u2713 ~ \u2717"},{"location":"ripersigma/permission_reference/#legend","title":"\ud83d\udd23 Legend","text":"<ul> <li>\u2713 = Allowed</li> <li>\u2717 = Forbidden</li> <li>~ = Conditional/Limited</li> </ul>"},{"location":"ripersigma/permission_reference/#operation-categories","title":"\ud83d\udcdd Operation Categories","text":"<ul> <li>Observe Operations (\ud835\udd46\u2092\u1d66\u209b\u2091\u1d63\u1d65\u2091): read_files, analyze_content, identify_patterns</li> <li>Virtual Operations (\ud835\udd46\u1d65\u1d62\u1d63\u209c\u1d64\u2090\u2097): suggest_ideas, explore_concepts, evaluate_approaches</li> <li>Real Operations (\ud835\udd46\u1d63\u2091\u2090\u2097): modify_files, write_code, delete_content, refactor</li> </ul>"},{"location":"ripersigma/permission_reference/#mode-commands","title":"\ud83d\udd04 Mode Commands","text":"<ul> <li><code>/r</code> - Switch to RESEARCH mode (\u03a9\u2081)</li> <li><code>/i</code> - Switch to INNOVATE mode (\u03a9\u2082)</li> <li><code>/p</code> - Switch to PLAN mode (\u03a9\u2083)</li> <li><code>/e</code> - Switch to EXECUTE mode (\u03a9\u2084)</li> <li><code>/rev</code> - Switch to REVIEW mode (\u03a9\u2085)</li> </ul>"},{"location":"ripersigma/permission_reference/#violation-severity-levels","title":"\u26a0\ufe0f Violation Severity Levels","text":"<ul> <li>CRITICAL: Real operations in RESEARCH, INNOVATE, or REVIEW modes</li> <li>HIGH: Real operations in PLAN mode</li> <li>MEDIUM: Virtual operations in RESEARCH or REVIEW modes</li> <li>LOW: All other violations</li> </ul>"},{"location":"ripersigma/permission_reference/#permission-command-examples","title":"\ud83d\udd12 Permission Command Examples","text":"<pre><code>!ckp = Check permissions for current mode\n!pm &lt;operation&gt; = Check if operation is permitted in current mode\n!sp &lt;mode&gt; = Show all permissions for specified mode\n!vm &lt;operation&gt; = Verify mode appropriate for operation\n</code></pre> <p>Quick reference for the permission system in CursorRIPER \u03a3 framework</p>"},{"location":"ripersigma/permission_schema/","title":"Permission schema","text":""},{"location":"ripersigma/permission_schema/#crud-permission-schema","title":"\ud83d\udd10 CRUD Permission Schema","text":"<p>v1.0 | Created: 2025-04-10</p>"},{"location":"ripersigma/permission_schema/#permission-matrix","title":"\ud83d\udccb Permission Matrix","text":"<p>\u2119 = {C: create, R: read, U: update, D: delete}</p> <p>\u2119(\u03a9\u2081) = {R: \u2713, C: \u2717, U: \u2717, D: \u2717} // Research mode \u2119(\u03a9\u2082) = {R: \u2713, C: ~, U: \u2717, D: \u2717} // Innovate mode (~: conceptual only) \u2119(\u03a9\u2083) = {R: \u2713, C: \u2713, U: ~, D: \u2717} // Plan mode (~: plan changes only) \u2119(\u03a9\u2084) = {R: \u2713, C: \u2713, U: \u2713, D: ~} // Execute mode (~: limited scope) \u2119(\u03a9\u2085) = {R: \u2713, C: \u2717, U: \u2717, D: \u2717} // Review mode</p>"},{"location":"ripersigma/permission_schema/#operation-categorization","title":"\ud83d\udccb Operation Categorization","text":"<p>\ud835\udd46\u1d63\u2091\u2090\u2097 = {modify_files, write_code, delete_content, refactor} \ud835\udd46\u1d65\u1d62\u1d63\u209c\u1d64\u2090\u2097 = {suggest_ideas, explore_concepts, evaluate_approaches} \ud835\udd46\u2092\u1d66\u209b\u2091\u1d63\u1d65\u2091 = {read_files, analyze_content, identify_patterns}</p> <p>\ud835\udd4a(\u03a9\u2081) = {\ud835\udd46\u2092\u1d66\u209b\u2091\u1d63\u1d65\u2091: \u2713, \ud835\udd46\u1d65\u1d62\u1d63\u209c\u1d64\u2090\u2097: ~, \ud835\udd46\u1d63\u2091\u2090\u2097: \u2717} // Research \ud835\udd4a(\u03a9\u2082) = {\ud835\udd46\u2092\u1d66\u209b\u2091\u1d63\u1d65\u2091: \u2713, \ud835\udd46\u1d65\u1d62\u1d63\u209c\u1d64\u2090\u2097: \u2713, \ud835\udd46\u1d63\u2091\u2090\u2097: \u2717} // Innovate \ud835\udd4a(\u03a9\u2083) = {\ud835\udd46\u2092\u1d66\u209b\u2091\u1d63\u1d65\u2091: \u2713, \ud835\udd46\u1d65\u1d62\u1d63\u209c\u1d64\u2090\u2097: \u2713, \ud835\udd46\u1d63\u2091\u2090\u2097: ~} // Plan \ud835\udd4a(\u03a9\u2084) = {\ud835\udd46\u2092\u1d66\u209b\u2091\u1d63\u1d65\u2091: \u2713, \ud835\udd46\u1d65\u1d62\u1d63\u209c\u1d64\u2090\u2097: ~, \ud835\udd46\u1d63\u2091\u2090\u2097: \u2713} // Execute \ud835\udd4a(\u03a9\u2085) = {\ud835\udd46\u2092\u1d66\u209b\u2091\u1d63\u1d65\u2091: \u2713, \ud835\udd46\u1d65\u1d62\u1d63\u209c\u1d64\u2090\u2097: ~, \ud835\udd46\u1d63\u2091\u2090\u2097: \u2717} // Review</p>"},{"location":"ripersigma/permission_schema/#permission-symbols","title":"\ud83d\udcca Permission Symbols","text":"<p>\u2713 = Allowed operation \u2717 = Forbidden operation ~ = Conditional/Limited operation</p>"},{"location":"ripersigma/permission_schema/#permission-mapping-to-tasks","title":"\ud83d\udcdd Permission Mapping to Tasks","text":"<p>\u2119\u209c\u2090\u209b\u2096\u209b = {   // Research \ud835\udd4b[0:3]   read_files: {mode: \"\ud835\udd46\u2092\u1d66\u209b\u2091\u1d63\u1d65\u2091\", CRUD: \"R\"},   ask_questions: {mode: \"\ud835\udd46\u2092\u1d66\u209b\u2091\u1d63\u1d65\u2091\", CRUD: \"R\"},   observe_code: {mode: \"\ud835\udd46\u2092\u1d66\u209b\u2091\u1d63\u1d65\u2091\", CRUD: \"R\"},   document_findings: {mode: \"\ud835\udd46\u1d65\u1d62\u1d63\u209c\u1d64\u2090\u2097\", CRUD: \"R\"},</p> <p>// Innovate \ud835\udd4b[4:6]   suggest_ideas: {mode: \"\ud835\udd46\u1d65\u1d62\u1d63\u209c\u1d64\u2090\u2097\", CRUD: \"C\"},   explore_options: {mode: \"\ud835\udd46\u1d65\u1d62\u1d63\u209c\u1d64\u2090\u2097\", CRUD: \"C\"},   evaluate_approaches: {mode: \"\ud835\udd46\u1d65\u1d62\u1d63\u209c\u1d64\u2090\u2097\", CRUD: \"R\"},</p> <p>// Plan \ud835\udd4b[7:9]   create_plan: {mode: \"\ud835\udd46\u1d65\u1d62\u1d63\u209c\u1d64\u2090\u2097\", CRUD: \"C\"},   detail_specifications: {mode: \"\ud835\udd46\u1d65\u1d62\u1d63\u209c\u1d64\u2090\u2097\", CRUD: \"C\"},   sequence_steps: {mode: \"\ud835\udd46\u1d65\u1d62\u1d63\u209c\u1d64\u2090\u2097\", CRUD: \"C\"},</p> <p>// Execute \ud835\udd4b[10:12]   implement_code: {mode: \"\ud835\udd46\u1d63\u2091\u2090\u2097\", CRUD: \"C\"},   follow_plan: {mode: \"\ud835\udd46\u1d63\u2091\u2090\u2097\", CRUD: \"R\"},   test_implementation: {mode: \"\ud835\udd46\u1d63\u2091\u2090\u2097\", CRUD: \"RU\"},</p> <p>// Review \ud835\udd4b[13:15]   validate_output: {mode: \"\ud835\udd46\u2092\u1d66\u209b\u2091\u1d63\u1d65\u2091\", CRUD: \"R\"},   verify_against_plan: {mode: \"\ud835\udd46\u2092\u1d66\u209b\u2091\u1d63\u1d65\u2091\", CRUD: \"R\"},   report_deviations: {mode: \"\ud835\udd46\u1d65\u1d62\u1d63\u209c\u1d64\u2090\u2097\", CRUD: \"R\"} }</p>"},{"location":"ripersigma/permission_schema/#scope-hierarchies","title":"\ud83d\udd10 Scope Hierarchies","text":"<p>\u2102\u209b\u208d\u209a\u2091\u208e = {   universal: {\"\": \"\"}, // All permissions in all scopes   full_read: {\"\": \"R\"}, // Read permission in all scopes   limited_create: {\"plan\": \"C\"}, // Create permission only in plan scope   restricted: {\"\": \"\u2717\"} // No permissions in any scope }</p> <p>Reference schema for CRUD permissions in CursorRIPER \u03a3 framework</p>"},{"location":"ripersigma/quickstart/","title":"RIPER Sigma Quickstart","text":""},{"location":"ripersigma/quickstart/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ol> <li>Cursor IDE installed and configured</li> <li>Node.js v18+ (for MCP <code>npx</code> servers)</li> <li>Project folder initialized</li> </ol>"},{"location":"ripersigma/quickstart/#quick-setup-5-minutes","title":"\ud83c\udfaf Quick Setup (5 minutes)","text":""},{"location":"ripersigma/quickstart/#step-1-install-framework","title":"Step 1: Install Framework","text":"<pre><code># If using the cursorstarter template, open the repo in Cursor then run:\nbash scripts/init.sh\n\n# Otherwise copy `.cursor/`, `memory-bank/`, and `scripts/` into your project root, then run:\nbash scripts/init.sh\n</code></pre>"},{"location":"ripersigma/quickstart/#step-2-enable-core-framework","title":"Step 2: Enable Core Framework","text":"<ol> <li>Open Cursor IDE</li> <li>Go to Settings \u2192 Cursor Rules and enable:</li> <li><code>.cursor/rules/ripersigma105.mdc</code></li> <li><code>.cursor/rules/cursorstarter-core.mdc</code></li> <li><code>.cursor/rules/commit-mode.mdc</code></li> <li><code>.cursor/rules/code-protection.mdc</code></li> <li><code>.cursor/rules/permissions.mdc</code></li> <li><code>.cursor/rules/context.mdc</code></li> <li>Optional overlays:</li> <li><code>.cursor/rules/webdev-best-practices.mdc</code></li> <li><code>.cursor/rules/analytics-clarity.mdc</code></li> <li>In Cursor: Settings \u2192 Features \u2192 enable Codebase Indexing</li> </ol>"},{"location":"ripersigma/quickstart/#step-3-initialize-memory-bank","title":"Step 3: Initialize Memory Bank","text":"<pre><code>/start\n</code></pre> <p>Or via CLI:</p> <pre><code>bash scripts/init.sh\n</code></pre> <p>This creates: - <code>/memory-bank/</code> folder (and <code>/memory-bank/backups/</code>) - Six memory files: <code>projectbrief.md</code>, <code>systemPatterns.md</code>, <code>techContext.md</code>, <code>activeContext.md</code>, <code>progress.md</code>, <code>protection.md</code></p>"},{"location":"ripersigma/quickstart/#basic-usage","title":"\ud83d\udd25 Basic Usage","text":""},{"location":"ripersigma/quickstart/#mode-switching","title":"Mode Switching","text":"<ul> <li><code>/r</code> or <code>/research</code> - Research mode \ud83d\udd0d</li> <li><code>/i</code> or <code>/innovate</code> - Innovate mode \ud83d\udca1</li> <li><code>/p</code> or <code>/plan</code> - Plan mode \ud83d\udcdd</li> <li><code>/e</code> or <code>/execute</code> - Execute mode \u2699\ufe0f</li> <li><code>/rev</code> or <code>/review</code> - Review mode \ud83d\udd0e</li> </ul>"},{"location":"ripersigma/quickstart/#code-protection","title":"Code Protection","text":"<pre><code>// !cp PROTECTED - Never modify\nfunction criticalFunction() {\n  // Core business logic\n}\n// !cp END-P\n\n// !cg GUARDED - Ask before changing\nfunction importantFunction() {\n  // Important logic\n}\n// !cg END-G\n</code></pre>"},{"location":"ripersigma/quickstart/#context-management","title":"Context Management","text":"<pre><code>!af src/main.js        # Add file to context\n!ac validateUser()     # Add code reference\n!cm                    # Set mode-appropriate context\n!cc                    # Clear all context\n</code></pre>"},{"location":"ripersigma/quickstart/#optional-mcp-services","title":"\ud83d\udd0c Optional: MCP Services","text":""},{"location":"ripersigma/quickstart/#enable-services-choose-what-you-need","title":"Enable Services (Choose what you need)","text":"<ol> <li>GitHub Integration <code>bash    npm install -g @modelcontextprotocol/server-github    export GITHUB_TOKEN=your_token</code></li> <li>Already listed in <code>.cursor/mcp.json</code> (service: <code>github</code>)</li> <li> <p>Use: <code>!gr pytorch</code> to search repos</p> </li> <li> <p>Web Search <code>bash    npm install -g @modelcontextprotocol/server-brave-search    export BRAVE_SEARCH_API_KEY=your_key</code></p> </li> <li>Already listed in <code>.cursor/mcp.json</code> (service: <code>brave-search</code>)</li> <li> <p>Use: <code>!ws AI frameworks</code> to search</p> </li> <li> <p>Browser Automation <code>bash    npm install -g @modelcontextprotocol/server-puppeteer</code></p> </li> <li>Already listed in <code>.cursor/mcp.json</code> (service: <code>puppeteer</code>)</li> <li> <p>Use: <code>!pn https://example.com</code> to navigate; <code>!ps name</code> for a screenshot</p> </li> <li> <p>Docker <code>bash    npm install -g docker-mcp    # Ensure Docker Desktop/daemon is running</code></p> </li> <li>Already listed in <code>.cursor/mcp.json</code> (service: <code>docker</code>)</li> <li>See: <code>docs/ripersigma/mcp/docker_setup.md</code> for available operations and examples</li> </ol>"},{"location":"ripersigma/quickstart/#optional-bmad-enterprise","title":"\ud83c\udfe2 Optional: BMAD Enterprise","text":""},{"location":"ripersigma/quickstart/#soft-migration-recommended-for-start","title":"Soft Migration (Recommended for start)","text":"<ol> <li>Keep using memory banks</li> <li>Enable BMAD rule files in <code>.cursor/rules/</code>:</li> <li><code>bmad-roles.mdc</code> \u2014 Role system</li> <li><code>prd-system.mdc</code> \u2014 PRD management</li> <li><code>quality-gates.mdc</code> \u2014 Quality gates</li> <li><code>enterprise.mdc</code> \u2014 Enterprise workflows</li> </ol>"},{"location":"ripersigma/quickstart/#commands","title":"Commands","text":"<pre><code>!br Developer      # Switch to Developer role\n!prdn             # Create new PRD\n!kg               # Check current quality gate\n</code></pre>"},{"location":"ripersigma/quickstart/#cheat-sheets","title":"\ud83d\udcda Cheat Sheets","text":""},{"location":"ripersigma/quickstart/#essential-commands","title":"Essential Commands","text":"Action Command Mode Required Read files automatic Any Write code automatic EXECUTE Create plan automatic PLAN Search web !ws query NOT EXECUTE Take screenshot !ps name Any"},{"location":"ripersigma/quickstart/#mode-permissions","title":"Mode Permissions","text":"Mode Can Do Cannot Do RESEARCH \ud83d\udd0d Read, analyze Write, modify INNOVATE \ud83d\udca1 Read, suggest Implement PLAN \ud83d\udcdd Read, design Execute EXECUTE \u2699\ufe0f All operations Deviate from plan REVIEW \ud83d\udd0e Read, verify Modify"},{"location":"ripersigma/quickstart/#common-issues","title":"\ud83d\udea8 Common Issues","text":""},{"location":"ripersigma/quickstart/#operation-not-permitted","title":"\"Operation not permitted\"","text":"<ul> <li>Check current mode with <code>[MODE: X]</code> </li> <li>Switch to the appropriate mode</li> <li>EXECUTE mode has most permissions</li> </ul>"},{"location":"ripersigma/quickstart/#mcp-service-not-available","title":"\"MCP service not available\"","text":"<ul> <li>Service not installed</li> <li>Environment variable not set</li> <li>Check <code>docs/ripersigma/mcp/</code> for setup guides</li> </ul>"},{"location":"ripersigma/quickstart/#no-search-in-execute-mode","title":"\"No search in EXECUTE mode\"","text":"<ul> <li>This is intentional! </li> <li>Maintains focus during implementation</li> <li>Switch to RESEARCH/PLAN to search</li> </ul>"},{"location":"ripersigma/quickstart/#pro-tips","title":"\ud83d\udca1 Pro Tips","text":"<ol> <li>Start Simple: Use the core framework first, add MCP/BMAD later</li> <li>Mode Discipline: Let modes guide your workflow</li> <li>Protection Markers: Use them for critical code</li> <li>Context Awareness: Keep context focused and relevant</li> <li>Gradual Adoption: Enable features as needed</li> <li>Analytics: See <code>docs/analytics/Clarity.md</code> for Microsoft Clarity setup and a mode-aware checklist</li> <li>Web.dev overlays: See <code>docs/webdev-integration.md</code> for PWA, Streams, Passkeys, and Web Vitals guidance across modes</li> </ol>"},{"location":"ripersigma/quickstart/#next-steps","title":"\ud83c\udf93 Next Steps","text":"<ol> <li>Read complete documentation in <code>/docs/</code></li> <li>Review the symbol reference guide</li> <li>Try a simple project with RIPER modes</li> <li>Enable MCP services one at a time</li> <li>Consider BMAD for team projects</li> </ol> <p>Framework Version: 1.0.5 | Quick Start v1.1</p>"},{"location":"ripersigma/quickstart/#design-systems-integration","title":"Design Systems Integration","text":"<ul> <li>Read <code>docs/design-systems/meta-guidelines.md</code></li> <li>Make a selection with <code>docs/design-systems/decision-tree.md</code></li> <li>Follow <code>docs/design-systems/mode-checklists.md</code> during each mode</li> <li>Record outcomes in <code>memory-bank/</code> files as indicated</li> </ul>"},{"location":"ripersigma/usage-examples/","title":"Usage examples","text":""},{"location":"ripersigma/usage-examples/#symbol-usage-examples","title":"\ud83d\udd0d @ Symbol Usage Examples","text":"<p>v1.0 | Created: 2025-04-10</p>"},{"location":"ripersigma/usage-examples/#basic-symbol-usage","title":"\ud83e\udde9 Basic Symbol Usage","text":""},{"location":"ripersigma/usage-examples/#file-references-1","title":"\ud83d\udcc4 File References (\u0393\u2081)","text":"<pre><code>// In activeContext.md\n## \ud83d\udd2e Context References\n- Active Files: [main.js, utils.js, config.json]\n\n// In discussions\nI've added the configuration file to our context: \ud83d\udcc4config.json\nThis should match the requirement [\u2197\ufe0f\u03c3\u2081:R\u2081|\ud83d\udcc4config.json]\n</code></pre>"},{"location":"ripersigma/usage-examples/#code-references-3","title":"\ud83d\udcbb Code References (\u0393\u2083)","text":"<pre><code>// In activeContext.md\n## \ud83d\udd2e Context References\n- Active Code: [calculateTotals(), UserClass, validateInput()]\n\n// In discussions\nThe bug appears to be in the validation function: \ud83d\udcbbvalidateInput()\nThis implementation satisfies requirement [\u2197\ufe0f\u03c3\u2081:R\u2084|\ud83d\udcbbcalculateTotals()]\n</code></pre>"},{"location":"ripersigma/usage-examples/#documentation-references-4","title":"\ud83d\udcda Documentation References (\u0393\u2084)","text":"<pre><code>// In activeContext.md\n## \ud83d\udd2e Context References\n- Active Docs: [API Guide, Setup Instructions]\n\n// In discussions\nAccording to our technical documentation: \ud83d\udcdaAPI Guide\nThis matches our documentation standard [\u2197\ufe0f\u03c3\u2083:D\u2082|\ud83d\udcdaSetup Instructions]\n</code></pre>"},{"location":"ripersigma/usage-examples/#design-system-references-4","title":"\ud83e\udded Design System References (\u0393\u2084)","text":"<pre><code>// In activeContext.md\n## \ud83d\udd2e Context References\n- Active Docs: [Design Systems Meta-Playbook, DS Decision Tree]\n- DS: docs/design-systems/meta-guidelines.md, docs/design-systems/decision-tree.md\n\n// In discussions\nPer our DS strategy (\ud83d\udcdaDesign Systems Meta-Playbook), we chose Material 3 and will borrow Carbon Data Table as allowed.\n</code></pre>"},{"location":"ripersigma/usage-examples/#mode-specific-examples","title":"\ud83d\udd04 Mode-Specific Examples","text":""},{"location":"ripersigma/usage-examples/#research-mode-1-example","title":"\ud83d\udd0d Research Mode (\u03a9\u2081) Example","text":"<pre><code>// Auto-activated on mode switch\n@Mode: RESEARCH (\u03a9\u2081) \u2192 Context set: [\ud83d\udcdaDocumentation, \ud83d\udcc1Project Structure, \ud83d\udd04Git History]\n\n// Command usage\n!adoc API Documentation   // Add documentation reference\n!ad src/components/       // Add folder reference\n!ag feature/login         // Add git branch reference\n\n// In discussion\nBased on our research context (\ud83d\udd0d\u0393[\ud83d\udcda,\ud83d\udcc1,\ud83d\udd04]), we should examine...\n</code></pre>"},{"location":"ripersigma/usage-examples/#innovate-mode-2-example","title":"\ud83d\udca1 Innovate Mode (\u03a9\u2082) Example","text":"<pre><code>// Auto-activated on mode switch\n@Mode: INNOVATE (\u03a9\u2082) \u2192 Context set: [\ud83d\udcbbCode Elements, \ud83d\udcdaDocumentation, \ud83d\udcddNotepads]\n\n// Command usage\n!ac UserAuthentication    // Add code reference\n!adoc Security Guidelines // Add documentation reference\n!an AuthIdeas             // Add notepad reference\n\n// In discussion\nConsidering our innovation context (\ud83d\udca1\u0393[\ud83d\udcbb,\ud83d\udcda,\ud83d\udcdd]), we could approach...\n</code></pre>"},{"location":"ripersigma/usage-examples/#execute-mode-4-example","title":"\u2699\ufe0f Execute Mode (\u03a9\u2084) Example","text":"<pre><code>// Auto-activated on mode switch\n@Mode: EXECUTE (\u03a9\u2084) \u2192 Context set: [\ud83d\udcbbCode Elements, \ud83d\udcc4Files, \ud83d\udcccPinned Files]\n\n// Command usage\n!ac implementFeature()    // Add code reference\n!af src/feature.js        // Add file reference\n!pf test/feature.test.js  // Pin test file to context\n\n// In discussion\nAccording to our execution context (\u2699\ufe0f\u0393[\ud83d\udcbb,\ud83d\udcc4,\ud83d\udccc]), we should implement...\n</code></pre>"},{"location":"ripersigma/usage-examples/#advanced-usage-examples","title":"\ud83d\udd17 Advanced Usage Examples","text":""},{"location":"ripersigma/usage-examples/#protection-context-integration","title":"\ud83d\udee1\ufe0f Protection-Context Integration","text":"<pre><code>// Applying protection to code context\n\ud83d\udd12\ud83d\udcbbvalidateInput() = \u03a8\u2081(PROTECTED) + \u0393\u2083(Code:validateInput())\n\n// In activeContext.md\n## \ud83d\udd2e Protection Context\n- Protected: [\ud83d\udd12\ud83d\udcbbvalidateInput(), \ud83d\udd12\ud83d\udcc4config.json]\n- Guarded: [\ud83d\udee1\ufe0f\ud83d\udcbbprocessPayment(), \ud83d\udee1\ufe0f\ud83d\udcc4secrets.js]\n\n// Command usage\n!cp validateInput()       // Add protection and code reference\n</code></pre>"},{"location":"ripersigma/usage-examples/#context-operations","title":"\ud83d\udcca Context Operations","text":"<pre><code>// Context intersection example\nActive Files \u2229 Protected Files = {config.json}  // Files that are both active and protected\n\n// Context union example\nDebug Code \u222a Test Code = {validateInput(), testValidation()}  // Combined context\n\n// Context filtering\n\u03a6\u0393\u2082(\ud83d\udd12\ud83d\udcbb, \"auth\") \u2192 {authenticateUser(), validateSession()}  // Protected auth code\n\n// Context persistence\n\u03a6\u0393\u2083(\u0393\u2083, \ud83d\udcc2) \u2192 Updated activeContext.md  // Save code context to memory\n</code></pre>"},{"location":"ripersigma/usage-examples/#cross-reference-enhancements","title":"\ud83d\udd00 Cross-Reference Enhancements","text":"<pre><code>// Requirement with code implementation reference\n[\u2197\ufe0f\u03c3\u2081:R\u2083|\ud83d\udcbbimplementFeature()] = \"Feature implementation satisfying requirement R\u2083\"\n\n// Issue with file context reference\n[\u2197\ufe0f\u03c3\u2085:I\u2082|\ud83d\udcc4buggy-file.js] = \"Issue I\u2082 related to file buggy-file.js\"\n\n// Protected region with documentation reference\n[\u2197\ufe0f\u03c3\u2086:P\u2083|\ud83d\udcdaSecurity Guidelines] = \"Protected region P\u2083 with security documentation\"\n</code></pre>"},{"location":"ripersigma/usage-examples/#practical-workflow-example","title":"\ud83e\uddea Practical Workflow Example","text":""},{"location":"ripersigma/usage-examples/#complete-mode-transition-with-context","title":"\ud83d\udd04 Complete Mode Transition with Context","text":"<pre><code>// Current State\n@Mode: RESEARCH (\u03a9\u2081)\n@Context: [\ud83d\udcdaAPI Docs, \ud83d\udcc1src/auth/, \ud83d\udd04feature/login]\n\n// Transition command issued\n/i  // Switch to INNOVATE mode\n\n// System performs:\n1. \u03a3_backup.create_backup()\n2. update_mode(\u03a9\u2082)\n3. apply_default_context(M\u0393\u2082)\n4. update_file(\ud835\udd44[3])\n\n// New State\n@Mode: INNOVATE (\u03a9\u2082)\n@Context: [\ud83d\udcbbAuthService, \ud83d\udcdaSecurity Docs, \ud83d\udcddAuth Ideas]\n// Previous context preserved in memory with timestamp\n</code></pre>"},{"location":"ripersigma/usage-examples/#context-aware-planning-example","title":"\ud83d\udcdd Context-Aware Planning Example","text":"<pre><code>// In plan mode with context\n@Mode: PLAN (\u03a9\u2083)\n@Context: [\ud83d\udcc4implementation.js, \ud83d\udcc1src/feature/, \ud83d\udccfCoding Standards]\n\n// Creating context-aware tasks\n## \ud83d\udccb Implementation Tasks\n- T\u2081: Implement feature [\u2197\ufe0f\u03c3\u2081:R\u2082|\ud83d\udcc4implementation.js]\n- T\u2082: Write unit tests [\u2197\ufe0f\u03c3\u2081:R\u2082|\ud83d\udcc1src/feature/tests/]\n- T\u2083: Ensure code standards [\u2197\ufe0f\u03c3\u2081:R\u2082|\ud83d\udccfCoding Standards]\n\n// Context tracking in tasks\nT\u2081.context = {\ud83d\udcc4implementation.js, \ud83d\udcbbimplementFeature()}\nT\u2082.context = {\ud83d\udcc1src/feature/tests/, \ud83d\udcc4test-utils.js}\nT\u2083.context = {\ud83d\udccfCoding Standards, \ud83d\udcdaStyle Guide}\n</code></pre>"},{"location":"ripersigma/usage-examples/#context-aware-review-example","title":"\ud83d\udd0e Context-Aware Review Example","text":"<pre><code>// In review mode with context\n@Mode: REVIEW (\u03a9\u2085)\n@Context: [\ud83d\udcbbvalidateUser(), \ud83d\udcc4user-validation.js, \ud83d\udd04PR#42]\n\n// Review findings with context references\n## \ud83d\udd0d Review Findings\n- F\u2081: Validation incomplete [\u2197\ufe0f\u03c3\u2081:R\u2085|\ud83d\udcbbvalidateUser()]\n- F\u2082: Edge cases not handled [\u2197\ufe0f\u03c3\u2081:R\u2085|\ud83d\udcc4user-validation.js]\n- F\u2083: Tests passing [\u2197\ufe0f\u03c3\u2081:R\u2085|\ud83d\udd04PR#42]\n\n// Context status in review\nF\u2081.context_status = \ud83d\udfe1\ud83d\udcbb  // Partially relevant context\nF\u2082.context_status = \ud83d\udfe2\ud83d\udcc4  // Active context\nF\u2083.context_status = \ud83d\udfe3\ud83d\udd04  // Essential context\n</code></pre> <p>These examples demonstrate real-world usage of the @ symbol notation system within the CursorRIPER \u03a3 framework.</p>"},{"location":"ripersigma/mcp/MCP-readme/","title":"MCP readme","text":""},{"location":"ripersigma/mcp/MCP-readme/#mcp-integration-for-cursorriper","title":"MCP Integration for CursorRIPER\u2666\u03a3","text":""},{"location":"ripersigma/mcp/MCP-readme/#overview","title":"\ud83d\udcda Overview","text":"<p>CursorRIPER\u2666\u03a3 now includes optional integration with Model Context Protocol (MCP) servers, enabling powerful capabilities like filesystem operations, web searches, and GitHub integration while maintaining the framework's symbolic notation and permission system.</p>"},{"location":"ripersigma/mcp/MCP-readme/#features","title":"\ud83d\udee0\ufe0f Features","text":"<ul> <li>Optional MCP Integration: Use MCP services only if you have them installed</li> <li>Symbolic Notation: Consistent with the CursorRIPER\u2666\u03a3 style (\u03a6 for filesystem)</li> <li>Mode-Specific Permissions: MCP operations follow RIPER mode restrictions</li> <li>Protection Integration: MCP operations respect code protection levels</li> <li>Context Integration: MCP paths can be added to context references</li> <li>Command Shortcuts: Quick access to MCP operations with !f* commands</li> </ul>"},{"location":"ripersigma/mcp/MCP-readme/#installation","title":"\u2699\ufe0f Installation","text":""},{"location":"ripersigma/mcp/MCP-readme/#1-mcp-server-setup","title":"1. MCP Server Setup","text":"<p>Install the MCP servers you want to use:</p> <pre><code># Filesystem operations\nnpm install -g @modelcontextprotocol/server-filesystem\n\n# Web search (optional)\nnpm install -g @modelcontextprotocol/server-websearch\n\n# GitHub integration (optional)\nnpm install -g @modelcontextprotocol/server-github\n</code></pre>"},{"location":"ripersigma/mcp/MCP-readme/#2-configure-cursor-mcp","title":"2. Configure Cursor MCP","text":"<p>Create or update <code>.cursor/mcp.json</code> in your project:</p> <pre><code>{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-filesystem\",\n        \"path/to/your/project\"\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"ripersigma/mcp/MCP-readme/#3-enable-mcp-services-note-currently-only-file-system-is-working-you-can-skip-this-step-until-other-ones-are-built-out","title":"3. Enable MCP Services (NOTE: CURRENTLY ONLY FILE SYSTEM IS WORKING &amp; YOU CAN SKIP THIS STEP UNTIL OTHER ONES ARE BUILT OUT)","text":"<p>Edit <code>RIPERsigma.mcp.mdc</code> and uncomment the services you want to use:</p> <pre><code>## \ud83d\udcc1 Filesystem Services\n@file \".cursor/rules/mcp_filesystem.mdc\" # Local filesystem operations\n\n## \ud83d\udd0d Web Search Services\n# @file \".cursor/rules/mcp_websearch.mdc\" # Web search capabilities\n</code></pre>"},{"location":"ripersigma/mcp/MCP-readme/#using-mcp-filesystem","title":"\ud83d\udd0d Using MCP Filesystem","text":""},{"location":"ripersigma/mcp/MCP-readme/#filesystem-operations","title":"Filesystem Operations","text":"<p>The filesystem operations are represented by the \u03a6_fs (Phi) symbol and include:</p> Operation Symbol Description Shortcut Read File \u03a6_fs.read Read a file's contents !fr Multiple Read \u03a6_fs.read_multi Read multiple files !fm Write File \u03a6_fs.write Create or overwrite a file !fw Edit File \u03a6_fs.edit Make targeted edits to a file !fe Create Directory \u03a6_fs.create_dir Create a new directory !fc List Directory \u03a6_fs.list List contents of a directory !fl Directory Tree \u03a6_fs.tree Get recursive directory structure !ft Move File \u03a6_fs.move Move or rename a file !fv Search Files \u03a6_fs.search Find files matching a pattern !fs File Info \u03a6_fs.info Get file metadata !fi Allowed Dirs \u03a6_fs.allowed Get allowed directories !fa"},{"location":"ripersigma/mcp/MCP-readme/#example-usage","title":"Example Usage","text":"<pre><code># Read a file\n!fr(\"path/to/file.js\")\n\n# List directory contents\n!fl(\"src/components\")\n\n# Search for JavaScript files\n!fs(\"src\", \"*.js\")\n\n# Write to a file (Execute mode only)\n!fw(\"output.txt\", \"File content\")\n\n# Add file to context\n!afs(\"important.js\")\n</code></pre>"},{"location":"ripersigma/mcp/MCP-readme/#permission-system","title":"\ud83d\udd12 Permission System","text":"<p>MCP operations respect the RIPER permission system:</p> Mode Read Create Update Delete \ud83d\udd0d Research \u2713 \u2717 \u2717 \u2717 \ud83d\udca1 Innovate \u2713 ~ \u2717 \u2717 \ud83d\udcdd Plan \u2713 \u2713 ~ \u2717 \u2699\ufe0f Execute \u2713 \u2713 \u2713 ~ \ud83d\udd0e Review \u2713 \u2717 \u2717 \u2717"},{"location":"ripersigma/mcp/MCP-readme/#context-integration","title":"\ud83d\udcce Context Integration","text":"<p>Add filesystem references to your context:</p> <pre><code># Add file to context\n!afs(\"src/main.js\")\n\n# Reference in cross-references\n[\u0393\u2089:src/components/Button.js]  # Filesystem reference\n</code></pre>"},{"location":"ripersigma/mcp/MCP-readme/#protection-levels","title":"\ud83d\udee1\ufe0f Protection Levels","text":"<p>Filesystem operations are protected with the following levels:</p> Level Name Allowed Operations \u03c8\u2081 Public All operations \u03c8\u2082 Visible read, list, search, info \u03c8\u2083 Limited read, info \u03c8\u2084 Private info only \u03c8\u2085 Restricted none \u03c8\u2086 Forbidden none"},{"location":"ripersigma/mcp/MCP-readme/#troubleshooting","title":"\ud83d\udd0d Troubleshooting","text":""},{"location":"ripersigma/mcp/MCP-readme/#mcp-server-not-available","title":"MCP Server Not Available","text":"<p>If you see \"MCP Filesystem not available\" errors:</p> <ol> <li>Check that you've installed the MCP server: <code>npm list -g @modelcontextprotocol/server-filesystem</code></li> <li>Verify your <code>.cursor/mcp.json</code> configuration</li> <li>Restart Cursor IDE</li> </ol>"},{"location":"ripersigma/mcp/MCP-readme/#permission-errors","title":"Permission Errors","text":"<p>If operations are blocked due to permissions:</p> <ol> <li>Check which RIPER mode you're in (<code>/r</code>, <code>/i</code>, <code>/p</code>, <code>/e</code>, <code>/rev</code>)</li> <li>Switch to the appropriate mode for the operation (e.g., Execute mode for write operations)</li> </ol>"},{"location":"ripersigma/mcp/MCP-readme/#path-errors","title":"Path Errors","text":"<p>If you see path-related errors:</p> <ol> <li>Make sure the path is within the allowed directories</li> <li>Check that the path exists for read operations</li> <li>Verify you have appropriate filesystem permissions</li> </ol>"},{"location":"ripersigma/mcp/MCP-readme/#additional-mcp-services","title":"\ud83d\udcda Additional MCP Services","text":"<p>The MCP integration can be extended with other services by uncommenting them in <code>RIPERsigma.mcp.mdc</code>:</p> <pre><code>## \ud83d\udd0d Web Search Services\n@file \".cursor/rules/mcp_websearch.mdc\" # Web search capabilities\n\n## \ud83d\udcbb GitHub Integration\n@file \".cursor/rules/mcp_github.mdc\" # GitHub repository operations\n</code></pre> <p>Each service has its own symbolic notation, permissions, and commands.</p>"},{"location":"ripersigma/mcp/MCP-readme/#integration-architecture","title":"\ud83d\uddfa\ufe0f Integration Architecture","text":"<p>The MCP integration follows a modular approach:</p> <ol> <li>Master Configuration: <code>RIPERsigma.mcp.mdc</code> controls which services are enabled</li> <li>Service Modules: Individual <code>.mdc</code> files in <code>.cursor/rules/</code> implement each service</li> <li>MCP Server Config: <code>.cursor/mcp.json</code> configures the MCP servers</li> </ol> <p>This architecture ensures that: - Core framework remains unchanged - Users enable only the services they need - New services can be added without modifying existing ones - Permissions and protection are consistent across services</p>"},{"location":"ripersigma/mcp/MCP-readme/#references","title":"\ud83d\udd16 References","text":"<ul> <li>Model Context Protocol Documentation</li> <li>[CursorRIPER\u2666\u03a3 Symbols Reference](./symbol-reference-guide.md</li> <li>MCP Filesystem Server Documentation</li> </ul>"},{"location":"ripersigma/mcp/docker_setup/","title":"\ud83d\udc33 Docker MCP Setup Guide","text":""},{"location":"ripersigma/mcp/docker_setup/#prerequisites","title":"Prerequisites","text":"<ol> <li>Docker Desktop: Installed and running</li> <li>Windows: https://docs.docker.com/desktop/install/windows-install/</li> <li>macOS: https://docs.docker.com/desktop/install/mac-install/</li> <li> <p>Linux: https://docs.docker.com/engine/install/</p> </li> <li> <p>Docker Daemon: Must be running</p> </li> <li>Sufficient Resources: At least 4GB RAM allocated to Docker</li> </ol>"},{"location":"ripersigma/mcp/docker_setup/#installation","title":"Installation","text":"<pre><code>npm install -g docker-mcp\n</code></pre>"},{"location":"ripersigma/mcp/docker_setup/#verify-docker-installation","title":"Verify Docker Installation","text":"<pre><code># Check Docker is installed\ndocker --version\n\n# Check Docker daemon is running\ndocker ps\n\n# Check Docker Compose\ndocker compose version\n</code></pre>"},{"location":"ripersigma/mcp/docker_setup/#configuration","title":"Configuration","text":"<p>No additional environment variables required if Docker is properly installed.</p>"},{"location":"ripersigma/mcp/docker_setup/#windows-specific","title":"Windows Specific","text":"<ul> <li>Ensure Docker Desktop is running</li> <li>May need to enable virtualization in BIOS</li> <li>Use WSL2 backend (recommended)</li> </ul>"},{"location":"ripersigma/mcp/docker_setup/#macos-specific","title":"macOS Specific","text":"<ul> <li>Docker Desktop should start automatically</li> <li>Grant necessary permissions when prompted</li> </ul>"},{"location":"ripersigma/mcp/docker_setup/#linux-specific","title":"Linux Specific","text":"<ul> <li>Add user to docker group:   <code>bash   sudo usermod -aG docker $USER   newgrp docker</code></li> </ul>"},{"location":"ripersigma/mcp/docker_setup/#verify-mcp-installation","title":"Verify MCP Installation","text":"<ol> <li>Restart Cursor IDE</li> <li>Check MCP is loaded: Look for Docker operations</li> <li>Test with: <code>!dls</code> (list containers)</li> </ol>"},{"location":"ripersigma/mcp/docker_setup/#available-operations","title":"Available Operations","text":""},{"location":"ripersigma/mcp/docker_setup/#container-management","title":"Container Management","text":"<ul> <li>Create: Spin up new containers</li> <li>List: Show running/stopped containers</li> <li>Logs: View container output</li> <li>Remove: Clean up containers</li> </ul>"},{"location":"ripersigma/mcp/docker_setup/#compose-operations","title":"Compose Operations","text":"<ul> <li>Deploy: Launch multi-container stacks</li> <li>Scale: Adjust service replicas</li> <li>Down: Stop and remove stacks</li> </ul>"},{"location":"ripersigma/mcp/docker_setup/#image-operations","title":"Image Operations","text":"<ul> <li>Pull: Download images (automatic)</li> <li>Build: Create from Dockerfile</li> </ul>"},{"location":"ripersigma/mcp/docker_setup/#mode-restrictions","title":"Mode Restrictions","text":"<ul> <li>RESEARCH (\u03a9\u2081): List and logs only</li> <li>INNOVATE (\u03a9\u2082): Read + pull images</li> <li>PLAN (\u03a9\u2083): All operations</li> <li>EXECUTE (\u03a9\u2084): Create, deploy, logs</li> <li>REVIEW (\u03a9\u2085): Monitoring only</li> </ul>"},{"location":"ripersigma/mcp/docker_setup/#common-docker-compose-examples","title":"Common Docker Compose Examples","text":""},{"location":"ripersigma/mcp/docker_setup/#basic-web-app","title":"Basic Web App","text":"<pre><code>version: '3.8'\nservices:\n  web:\n    image: nginx:alpine\n    ports:\n      - \"8080:80\"\n    volumes:\n      - ./html:/usr/share/nginx/html\n</code></pre>"},{"location":"ripersigma/mcp/docker_setup/#nodejs-with-database","title":"Node.js with Database","text":"<pre><code>version: '3.8'\nservices:\n  app:\n    image: node:18-alpine\n    working_dir: /app\n    volumes:\n      - .:/app\n    command: npm start\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - db\n\n  db:\n    image: postgres:15-alpine\n    environment:\n      POSTGRES_PASSWORD: secret\n    volumes:\n      - pgdata:/var/lib/postgresql/data\n\nvolumes:\n  pgdata:\n</code></pre>"},{"location":"ripersigma/mcp/docker_setup/#resource-limits","title":"Resource Limits","text":""},{"location":"ripersigma/mcp/docker_setup/#development","title":"Development","text":"<ul> <li>Max 10 containers</li> <li>4GB memory total</li> <li>2 CPU cores</li> </ul>"},{"location":"ripersigma/mcp/docker_setup/#production","title":"Production","text":"<ul> <li>Max 50 containers</li> <li>16GB memory total</li> <li>8 CPU cores</li> </ul>"},{"location":"ripersigma/mcp/docker_setup/#safety-features","title":"Safety Features","text":"<ol> <li>Confirmation Required: For destructive operations</li> <li>Automatic Backups: Config saved before changes</li> <li>Resource Validation: Prevents overcommit</li> <li>Port Conflict Detection: Automatic</li> </ol>"},{"location":"ripersigma/mcp/docker_setup/#best-practices","title":"Best Practices","text":"<ol> <li>Use Compose: For multi-container apps</li> <li>Set Resource Limits: Prevent runaway containers</li> <li>Volume Mounts: For persistent data</li> <li>Health Checks: Monitor container status</li> <li>Clean Up: Remove unused containers/images</li> </ol>"},{"location":"ripersigma/mcp/docker_setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ripersigma/mcp/docker_setup/#docker-daemon-not-running","title":"Docker Daemon Not Running","text":"<pre><code># Windows/macOS\n# Start Docker Desktop application\n\n# Linux\nsudo systemctl start docker\n</code></pre>"},{"location":"ripersigma/mcp/docker_setup/#permission-denied","title":"Permission Denied","text":"<pre><code># Linux: Add to docker group\nsudo usermod -aG docker $USER\n# Log out and back in\n</code></pre>"},{"location":"ripersigma/mcp/docker_setup/#port-already-in-use","title":"Port Already in Use","text":"<pre><code># Find process using port\nnetstat -ano | findstr :8080  # Windows\nlsof -i :8080                  # macOS/Linux\n\n# Or use different port in compose\n</code></pre>"},{"location":"ripersigma/mcp/docker_setup/#out-of-space","title":"Out of Space","text":"<pre><code># Clean up unused resources\ndocker system prune -a\n</code></pre>"},{"location":"ripersigma/mcp/docker_setup/#integration-examples","title":"Integration Examples","text":""},{"location":"ripersigma/mcp/docker_setup/#deploy-from-github","title":"Deploy from GitHub","text":"<pre><code>// Combines GitHub + Docker\n\u0398\u00d7\u039e = deploy_from_github()\n// Fetches Dockerfile and compose from repo\n// Then deploys with Docker\n</code></pre>"},{"location":"ripersigma/mcp/github_setup/","title":"\ud83d\udc19 GitHub MCP Setup Guide","text":""},{"location":"ripersigma/mcp/github_setup/#prerequisites","title":"Prerequisites","text":"<ol> <li>GitHub Account: You need a GitHub account</li> <li>Personal Access Token: Create one with appropriate permissions</li> </ol>"},{"location":"ripersigma/mcp/github_setup/#creating-a-github-personal-access-token","title":"Creating a GitHub Personal Access Token","text":"<ol> <li>Go to GitHub Settings \u2192 Developer settings \u2192 Personal access tokens</li> <li>Click \"Generate new token (classic)\"</li> <li>Select scopes:</li> <li><code>repo</code> (Full control of private repositories)</li> <li><code>workflow</code> (Update GitHub Action workflows)</li> <li><code>write:packages</code> (Upload packages to GitHub Package Registry)</li> <li><code>delete:packages</code> (Delete packages from GitHub Package Registry)</li> <li><code>admin:org</code> (Full control of orgs and teams, read and write org projects)</li> <li><code>admin:public_key</code> (Full control of user public keys)</li> <li><code>admin:repo_hook</code> (Full control of repository hooks)</li> <li><code>gist</code> (Create gists)</li> <li><code>notifications</code> (Access notifications)</li> <li><code>user</code> (Update ALL user data)</li> <li> <p><code>project</code> (Full control of projects)</p> </li> <li> <p>Copy the generated token</p> </li> </ol>"},{"location":"ripersigma/mcp/github_setup/#installation","title":"Installation","text":"<pre><code>npm install -g @modelcontextprotocol/server-github\n</code></pre>"},{"location":"ripersigma/mcp/github_setup/#configuration","title":"Configuration","text":""},{"location":"ripersigma/mcp/github_setup/#windows","title":"Windows","text":"<pre><code>set GITHUB_TOKEN=your_token_here\n</code></pre>"},{"location":"ripersigma/mcp/github_setup/#macoslinux","title":"macOS/Linux","text":"<pre><code>export GITHUB_TOKEN=your_token_here\n</code></pre>"},{"location":"ripersigma/mcp/github_setup/#or-add-to-your-shell-profile","title":"Or add to your shell profile:","text":"<pre><code>echo 'export GITHUB_TOKEN=your_token_here' &gt;&gt; ~/.bashrc\n</code></pre>"},{"location":"ripersigma/mcp/github_setup/#verify-installation","title":"Verify Installation","text":"<ol> <li>Restart Cursor IDE</li> <li>Check MCP is loaded: Look for GitHub operations in available tools</li> <li>Test with: <code>!gr pytorch</code> (search for pytorch repositories)</li> </ol>"},{"location":"ripersigma/mcp/github_setup/#available-operations","title":"Available Operations","text":"<ul> <li>Repository Management: create, fork, search</li> <li>Branch Operations: create, list branches</li> <li>File Operations: create, update, push files</li> <li>Pull Requests: create, review, merge</li> <li>Issues: create, update, comment</li> </ul>"},{"location":"ripersigma/mcp/github_setup/#mode-restrictions","title":"Mode Restrictions","text":"<ul> <li>RESEARCH (\u03a9\u2081): Read-only operations</li> <li>INNOVATE (\u03a9\u2082): Read + fork repositories  </li> <li>PLAN (\u03a9\u2083): All operations available</li> <li>EXECUTE (\u03a9\u2084): Write operations (push, merge)</li> <li>REVIEW (\u03a9\u2085): Read-only verification</li> </ul>"},{"location":"ripersigma/mcp/github_setup/#troubleshooting","title":"Troubleshooting","text":"<ol> <li>Token not found: Ensure GITHUB_TOKEN is set in environment</li> <li>Permission denied: Check token has required scopes</li> <li>Rate limits: GitHub API has rate limits (5000 requests/hour with token)</li> </ol>"},{"location":"ripersigma/mcp/mcp_bmad_implementation/","title":"\ud83d\udcdd Multi-Service MCP and BMAD Integration Implementation","text":"<p>Created: 2025-04-26</p>"},{"location":"ripersigma/mcp/mcp_bmad_implementation/#overview","title":"\ud83d\udccb Overview","text":"<p>Successfully implemented comprehensive MCP service integrations and BMAD-Method enterprise features for CursorRIPER \u03a3 framework.</p>"},{"location":"ripersigma/mcp/mcp_bmad_implementation/#mcp-services-implemented","title":"\u2705 MCP Services Implemented","text":""},{"location":"ripersigma/mcp/mcp_bmad_implementation/#1-github-integration","title":"1. GitHub Integration (\u0398)","text":"<ul> <li>Created <code>.cursor/rules/mcp_github.mdc</code></li> <li>Operations: repository, branch, file, PR, issue management</li> <li>Mode restrictions enforcing read-only in RESEARCH/REVIEW</li> <li>Command shortcuts: !gr, !gc, !gp, !gpr, !gi, !gb, !gm</li> <li>Protection levels for critical operations</li> </ul>"},{"location":"ripersigma/mcp/mcp_bmad_implementation/#2-web-search-integration","title":"2. Web Search Integration (\u039b)","text":"<ul> <li>Created <code>.cursor/rules/mcp_websearch.mdc</code></li> <li>Operations: web search, local search, URL fetching</li> <li>Critical: NO SEARCH in EXECUTE mode (maintain focus!)</li> <li>Context tracking: \u0393\u2081\u2080 (results), \u0393\u2081\u2081 (history)</li> <li>Command shortcuts: !ws, !wl, !wf, !wc, !wh</li> </ul>"},{"location":"ripersigma/mcp/mcp_bmad_implementation/#3-puppeteerplaywright-integration","title":"3. Puppeteer/Playwright Integration (\u03a5)","text":"<ul> <li>Created <code>.cursor/rules/mcp_puppeteer.mdc</code></li> <li>Operations: browser control, testing, scraping</li> <li>Test recording workflow integrated</li> <li>Command shortcuts: !pn, !ps, !pc, !pf, !pt, !pe, !pg</li> <li>Protection levels for navigation and form filling</li> </ul>"},{"location":"ripersigma/mcp/mcp_bmad_implementation/#4-docker-integration","title":"4. Docker Integration (\u039e)","text":"<ul> <li>Created <code>.cursor/rules/mcp_docker.mdc</code></li> <li>Operations: container, compose, image management</li> <li>Safety protocols for destructive operations</li> <li>Command shortcuts: !dc, !dd, !dl, !dls, !ds, !dr</li> <li>Resource limits and deployment workflows</li> </ul>"},{"location":"ripersigma/mcp/mcp_bmad_implementation/#bmad-method-implementation","title":"\u2705 BMAD-Method Implementation","text":""},{"location":"ripersigma/mcp/mcp_bmad_implementation/#1-role-system","title":"1. Role System (\u0392)","text":"<ul> <li>Created <code>.cursor/rules/bmad_roles.mdc</code></li> <li>5 professional roles: Product Owner (\u0392\u2081), Architect (\u0392\u2082), Developer (\u0392\u2083), QA (\u0392\u2084), DevOps (\u0392\u2085)</li> <li>Role-mode affinity scoring system</li> <li>Permission matrices per role</li> <li>Command shortcuts: !br, !bra, !brp, !brg, !brh, !brs</li> </ul>"},{"location":"ripersigma/mcp/mcp_bmad_implementation/#2-prd-system","title":"2. PRD System (\u03a1)","text":"<ul> <li>Created <code>.cursor/rules/prd_system.mdc</code></li> <li>6 PRD components: Objectives (\u03a1\u2081), Requirements (\u03a1\u2082), Constraints (\u03a1\u2083), Stories (\u03a1\u2084), Acceptance (\u03a1\u2085), Metrics (\u03a1\u2086)</li> <li>Memory bank migration mapping (\u03c3 \u2192 \u03a1)</li> <li>PRD state management system</li> <li>Created directory structure: <code>/prd/active</code>, <code>/prd/templates</code>, <code>/prd/archive</code></li> <li>Command shortcuts: !prd, !prdn, !prda, !prds, !prdv, !prdc, !prdh</li> </ul>"},{"location":"ripersigma/mcp/mcp_bmad_implementation/#3-quality-gates","title":"3. Quality Gates (\u039a)","text":"<ul> <li>Created <code>.cursor/rules/quality_gates.mdc</code></li> <li>5 sequential gates: PRD Approval (\u039a\u2081), Design Review (\u039a\u2082), Code Review (\u039a\u2083), QA Signoff (\u039a\u2084), Deployment (\u039a\u2085)</li> <li>Gate enforcement with blockers and approvals</li> <li>Automated checklist generation</li> <li>Created directory structure: <code>/quality/gates</code>, <code>/quality/checklists</code></li> <li>Command shortcuts: !kg, !kga, !kgc, !kgb, !kgh, !kgr, !kgs</li> </ul>"},{"location":"ripersigma/mcp/mcp_bmad_implementation/#4-enterprise-features","title":"4. Enterprise Features (\u0395)","text":"<ul> <li>Created <code>.cursor/rules/enterprise.mdc</code></li> <li>Documentation generation system</li> <li>Semantic versioning automation</li> <li>Compliance tracking (ISO, SOC2, GDPR)</li> <li>Audit trail system</li> <li>Command shortcuts: !edg, !evb, !ecr, !eal, and more</li> </ul>"},{"location":"ripersigma/mcp/mcp_bmad_implementation/#files-createdmodified","title":"\ud83d\udcc1 Files Created/Modified","text":""},{"location":"ripersigma/mcp/mcp_bmad_implementation/#new-files","title":"New Files:","text":"<ul> <li><code>.cursor/rules/mcp_github.mdc</code></li> <li><code>.cursor/rules/mcp_websearch.mdc</code></li> <li><code>.cursor/rules/mcp_puppeteer.mdc</code></li> <li><code>.cursor/rules/mcp_docker.mdc</code></li> <li><code>.cursor/rules/bmad_roles.mdc</code></li> <li><code>.cursor/rules/prd_system.mdc</code></li> <li><code>.cursor/rules/quality_gates.mdc</code></li> <li><code>.cursor/rules/enterprise.mdc</code></li> <li><code>CursorRIPER.sigma.mcp.mdc</code> (master MCP config)</li> <li><code>.cursor/mcp.json</code> (MCP server configuration)</li> <li><code>.cursor/bmad.json</code> (BMAD configuration)</li> <li><code>/docs/mcp/github_setup.md</code></li> <li><code>/docs/mcp/websearch_setup.md</code></li> <li><code>/docs/mcp/puppeteer_setup.md</code></li> <li><code>/docs/mcp/docker_setup.md</code></li> <li><code>/prd/templates/prd_master.md</code></li> <li><code>/prd/templates/objectives_template.md</code></li> <li><code>/prd/templates/story_template.md</code></li> <li><code>/quality/checklists/gate_checklist_template.md</code></li> </ul>"},{"location":"ripersigma/mcp/mcp_bmad_implementation/#modified-files","title":"Modified Files:","text":"<ul> <li><code>RIPERsigma1.0.4.mdc</code> - Added extended reference map (\u211c) with all new services</li> <li><code>docs/symbol-reference-guide.md</code> - Updated to v3.0 with all new symbols and commands</li> </ul>"},{"location":"ripersigma/mcp/mcp_bmad_implementation/#key-features","title":"\ud83d\udd11 Key Features","text":""},{"location":"ripersigma/mcp/mcp_bmad_implementation/#cross-service-integration","title":"Cross-Service Integration","text":"<pre><code>\u0398\u00d7\u039e = deploy_from_github()     # GitHub \u2192 Docker\n\u039b\u00d7\u0398 = search_and_clone()       # Search \u2192 GitHub  \n\u03a5\u00d7\u0398 = test_and_commit()        # Test \u2192 GitHub\n</code></pre>"},{"location":"ripersigma/mcp/mcp_bmad_implementation/#mode-role-gate-integration","title":"Mode-Role-Gate Integration","text":"<pre><code>M\u00d7\u0392\u00d7\u039a = Mode-specific role permissions with gate enforcement\n</code></pre>"},{"location":"ripersigma/mcp/mcp_bmad_implementation/#modular-architecture","title":"Modular Architecture","text":"<ul> <li>All integrations are optional and can be enabled/disabled</li> <li>Graceful degradation when services unavailable</li> <li>Maintains core framework efficiency</li> </ul>"},{"location":"ripersigma/mcp/mcp_bmad_implementation/#symbol-assignments","title":"\ud83d\udcca Symbol Assignments","text":""},{"location":"ripersigma/mcp/mcp_bmad_implementation/#mcp-services","title":"MCP Services:","text":"<ul> <li>\u0398 (Theta) - GitHub</li> <li>\u039b (Lambda) - Web Search</li> <li>\u03a5 (Upsilon) - Puppeteer/Playwright</li> <li>\u039e (Xi) - Docker</li> </ul>"},{"location":"ripersigma/mcp/mcp_bmad_implementation/#bmad-components","title":"BMAD Components:","text":"<ul> <li>\u0392 (Beta) - Roles</li> <li>\u03a1 (Rho) - PRD</li> <li>\u039a (Kappa) - Quality Gates</li> <li>\u0395 (Epsilon) - Enterprise</li> </ul>"},{"location":"ripersigma/mcp/mcp_bmad_implementation/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<ol> <li>Test MCP service integrations with real operations</li> <li>Initialize first PRD using the new system</li> <li>Configure team roles and permissions</li> <li>Set up quality gate workflows</li> <li>Enable enterprise documentation generation</li> <li>Train team on new commands and workflows</li> </ol>"},{"location":"ripersigma/mcp/mcp_bmad_implementation/#implementation-notes","title":"\ud83d\udcdd Implementation Notes","text":"<ul> <li>Maintained symbolic notation consistency throughout</li> <li>Preserved token efficiency with compact representations</li> <li>All services follow established permission model</li> <li>Mode restrictions apply universally</li> <li>Protection system integrated with all new features</li> <li>Context system extended for new services</li> <li>Command shortcuts follow established patterns</li> </ul> <p>This implementation successfully transforms CursorRIPER \u03a3 from a memory-bank driven framework to an enterprise-grade, PRD-driven methodology while maintaining its core efficiency and symbolic elegance.</p> <p>Last updated: 2025-04-26</p>"},{"location":"ripersigma/mcp/puppeteer_setup/","title":"\ud83c\udfad Puppeteer/Playwright MCP Setup Guide","text":""},{"location":"ripersigma/mcp/puppeteer_setup/#prerequisites","title":"Prerequisites","text":"<ol> <li>Node.js: Version 14 or higher</li> <li>Chrome/Chromium: Automatically downloaded during installation</li> <li>Sufficient Disk Space: ~200MB for browser binaries</li> </ol>"},{"location":"ripersigma/mcp/puppeteer_setup/#installation-options","title":"Installation Options","text":""},{"location":"ripersigma/mcp/puppeteer_setup/#option-1-puppeteer-simpler","title":"Option 1: Puppeteer (Simpler)","text":"<pre><code>npm install -g @modelcontextprotocol/server-puppeteer\n</code></pre>"},{"location":"ripersigma/mcp/puppeteer_setup/#option-2-playwright-recommended-more-features","title":"Option 2: Playwright (Recommended - More Features)","text":"<pre><code>npm install -g @executeautomation/playwright-mcp-server\n</code></pre>"},{"location":"ripersigma/mcp/puppeteer_setup/#why-playwright","title":"Why Playwright?","text":"<ul> <li>\u2705 Multi-browser support (Chrome, Firefox, Safari)</li> <li>\u2705 Better test recording capabilities  </li> <li>\u2705 More reliable selectors</li> <li>\u2705 Built-in waiting strategies</li> <li>\u2705 Network interception</li> </ul>"},{"location":"ripersigma/mcp/puppeteer_setup/#configuration","title":"Configuration","text":"<p>No environment variables required! Browser automation works out of the box.</p>"},{"location":"ripersigma/mcp/puppeteer_setup/#verify-installation","title":"Verify Installation","text":"<ol> <li>Restart Cursor IDE</li> <li>Check MCP is loaded: Look for browser operations</li> <li>Test with: <code>!pn https://example.com</code> (navigate)</li> <li>Test screenshot: <code>!ps homepage</code> (take screenshot)</li> </ol>"},{"location":"ripersigma/mcp/puppeteer_setup/#available-operations","title":"Available Operations","text":""},{"location":"ripersigma/mcp/puppeteer_setup/#browser-control","title":"Browser Control","text":"<ul> <li>Navigate: Go to URLs</li> <li>Screenshot: Capture pages or elements</li> <li>Close: Clean up browser instance</li> </ul>"},{"location":"ripersigma/mcp/puppeteer_setup/#page-interaction","title":"Page Interaction","text":"<ul> <li>Click: Click buttons, links, elements</li> <li>Fill: Enter text in forms</li> <li>Select: Choose dropdown options</li> <li>Hover: Mouse over elements</li> </ul>"},{"location":"ripersigma/mcp/puppeteer_setup/#testing","title":"Testing","text":"<ul> <li>Record: Start test recording session</li> <li>Assert: Verify page behavior</li> <li>Generate: Create test files</li> </ul>"},{"location":"ripersigma/mcp/puppeteer_setup/#data-extraction","title":"Data Extraction","text":"<ul> <li>Get Text: Extract visible content</li> <li>Get HTML: Retrieve page structure</li> <li>Evaluate: Run JavaScript in page context</li> </ul>"},{"location":"ripersigma/mcp/puppeteer_setup/#mode-restrictions","title":"Mode Restrictions","text":"<ul> <li>RESEARCH (\u03a9\u2081): Screenshots, content extraction</li> <li>INNOVATE (\u03a9\u2082): Navigation, exploration</li> <li>PLAN (\u03a9\u2083): All operations available</li> <li>EXECUTE (\u03a9\u2084): Test recording and execution</li> <li>REVIEW (\u03a9\u2085): Verification and screenshots</li> </ul>"},{"location":"ripersigma/mcp/puppeteer_setup/#test-recording-workflow","title":"Test Recording Workflow","text":"<pre><code>// 1. Start recording (PLAN or EXECUTE mode)\n!pt  // Start test recording\n\n// 2. Perform actions\n!pn https://yourapp.com\n!pc button[type=\"submit\"]\n!pf input[name=\"email\"] user@example.com\n\n// 3. End recording  \n!pe  // Generates test file\n</code></pre>"},{"location":"ripersigma/mcp/puppeteer_setup/#best-practices","title":"Best Practices","text":"<ol> <li>Headless Mode: Default for performance</li> <li>Selectors: Use data-testid when possible</li> <li>Waits: Let Playwright handle waiting</li> <li>Screenshots: Name them descriptively</li> <li>Cleanup: Browser closes automatically</li> </ol>"},{"location":"ripersigma/mcp/puppeteer_setup/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Browser Download Failed <code>bash    # Manually install browsers    npx playwright install</code></p> </li> <li> <p>Timeout Errors</p> </li> <li>Increase timeout in navigation</li> <li> <p>Check if page is actually loading</p> </li> <li> <p>Selector Not Found</p> </li> <li>Use Playwright inspector</li> <li> <p>Try more specific selectors</p> </li> <li> <p>Permission Denied</p> </li> <li>Run as administrator (Windows)</li> <li>Check file write permissions</li> </ol>"},{"location":"ripersigma/mcp/puppeteer_setup/#advanced-features","title":"Advanced Features","text":""},{"location":"ripersigma/mcp/puppeteer_setup/#custom-user-agent","title":"Custom User Agent","text":"<pre><code>playwright_custom_user_agent(\"MyBot/1.0\")\n</code></pre>"},{"location":"ripersigma/mcp/puppeteer_setup/#console-log-capture","title":"Console Log Capture","text":"<pre><code>playwright_console_logs({ type: \"error\" })\n</code></pre>"},{"location":"ripersigma/mcp/puppeteer_setup/#pdf-generation","title":"PDF Generation","text":"<pre><code>playwright_save_as_pdf({\n  filename: \"report.pdf\",\n  format: \"A4\"\n})\n</code></pre>"},{"location":"ripersigma/mcp/websearch_setup/","title":"\ud83d\udd0d Web Search MCP Setup Guide","text":""},{"location":"ripersigma/mcp/websearch_setup/#prerequisites","title":"Prerequisites","text":"<ol> <li>Brave Search API Account: Free tier available</li> <li>API Key: Generate from Brave Search dashboard</li> </ol>"},{"location":"ripersigma/mcp/websearch_setup/#getting-a-brave-search-api-key","title":"Getting a Brave Search API Key","text":"<ol> <li>Visit https://brave.com/search/api/</li> <li>Click \"Get Started\" or \"Sign Up\"</li> <li>Create a free account (includes 2,000 queries/month)</li> <li>Navigate to API Keys section</li> <li>Generate a new API key</li> <li>Copy the key for configuration</li> </ol>"},{"location":"ripersigma/mcp/websearch_setup/#installation","title":"Installation","text":"<pre><code>npm install -g @modelcontextprotocol/server-brave-search\n</code></pre>"},{"location":"ripersigma/mcp/websearch_setup/#configuration","title":"Configuration","text":""},{"location":"ripersigma/mcp/websearch_setup/#windows","title":"Windows","text":"<pre><code>set BRAVE_SEARCH_API_KEY=your_api_key_here\n</code></pre>"},{"location":"ripersigma/mcp/websearch_setup/#macoslinux","title":"macOS/Linux","text":"<pre><code>export BRAVE_SEARCH_API_KEY=your_api_key_here\n</code></pre>"},{"location":"ripersigma/mcp/websearch_setup/#or-add-to-your-shell-profile","title":"Or add to your shell profile:","text":"<pre><code>echo 'export BRAVE_SEARCH_API_KEY=your_api_key_here' &gt;&gt; ~/.bashrc\n</code></pre>"},{"location":"ripersigma/mcp/websearch_setup/#verify-installation","title":"Verify Installation","text":"<ol> <li>Restart Cursor IDE</li> <li>Check MCP is loaded: Look for search operations in available tools</li> <li>Test with: <code>!ws CursorRIPER framework</code> (web search)</li> </ol>"},{"location":"ripersigma/mcp/websearch_setup/#available-operations","title":"Available Operations","text":"<ul> <li>Web Search: General web queries, news, articles</li> <li>Local Search: Business listings, places, services</li> <li>URL Fetch: Retrieve and parse web content</li> <li>Cache Management: Store and retrieve search results</li> </ul>"},{"location":"ripersigma/mcp/websearch_setup/#mode-restrictions","title":"Mode Restrictions","text":"<ul> <li>RESEARCH (\u03a9\u2081): Full search access</li> <li>INNOVATE (\u03a9\u2082): Full search access</li> <li>PLAN (\u03a9\u2083): Search + cache management</li> <li>EXECUTE (\u03a9\u2084): \u26d4 NO SEARCH (maintain focus!)</li> <li>REVIEW (\u03a9\u2085): Verification searches only</li> </ul>"},{"location":"ripersigma/mcp/websearch_setup/#search-quotas","title":"Search Quotas","text":"<ul> <li>Free tier: 2,000 queries/month</li> <li>Basic tier: 10,000 queries/month ($5)</li> <li>Professional: 100,000 queries/month ($50)</li> <li>Rate limit: 10 searches per minute</li> </ul>"},{"location":"ripersigma/mcp/websearch_setup/#best-practices","title":"Best Practices","text":"<ol> <li>Cache Results: Use cache in PLAN mode to avoid redundant searches</li> <li>Specific Queries: More specific = better results</li> <li>Local Search: Use for business/location queries</li> <li>EXECUTE Mode: Remember - no searching allowed!</li> </ol>"},{"location":"ripersigma/mcp/websearch_setup/#troubleshooting","title":"Troubleshooting","text":"<ol> <li>API Key not found: Ensure BRAVE_SEARCH_API_KEY is set</li> <li>Quota exceeded: Check your usage on Brave dashboard</li> <li>No results: Try broader search terms</li> <li>Rate limited: Wait 1 minute between batches</li> </ol>"},{"location":"sources/","title":"Sources","text":"<p>Ingested source pages with attribution and image credits.</p> <p>Use the ingestion pipeline to add more URLs in <code>scripts/ingest/allowlist.txt</code>, then run:</p> <pre><code>python3 scripts/ingest/ingest.py\n</code></pre>"},{"location":"sources/#all-sources","title":"All sources","text":"<ul> <li>docs.crewai.com-en-concepts-knowledge</li> <li>github.com-anthropics-anthropic-cookbook-tree-main-patterns-agents</li> <li>python.langchain.com-docs-concepts-streaming</li> <li>python.langchain.com-docs-concepts</li> <li>www.anthropic.com-engineering-building-effective-agents</li> </ul>"},{"location":"sources/docs.crewai.com-en-concepts-knowledge/","title":"docs.crewai.com-en-concepts-knowledge","text":"<p>Synthesis: TODO</p> <p>What is knowledge in CrewAI and how to use it. knowledge directory at the root of your project. Also, use relative paths from the knowledge directory when creating the source. from crewai import Agent, Task, Crew, Process, LLM from crewai.knowledge.source.string_knowledge_source import StringKnowledgeSource</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#create-a-knowledge-source","title":"Create a knowledge source","text":"<p>content = \"Users name is John. He is 30 years old and lives in San Francisco.\" string_source = StringKnowledgeSource(content=content)</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#create-an-llm-with-a-temperature-of-0-to-ensure-deterministic-outputs","title":"Create an LLM with a temperature of 0 to ensure deterministic outputs","text":"<p>llm = LLM(model=\"gpt-4o-mini\", temperature=0)</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#create-an-agent-with-the-knowledge-store","title":"Create an agent with the knowledge store","text":"<p>agent = Agent( role=\"About User\", goal=\"You know everything about the user.\", backstory=\"You are a master at understanding people and their preferences.\", verbose=True, allow_delegation=False, llm=llm, ) task = Task( description=\"Answer the following questions about the user: {question}\", expected_output=\"An answer to the question.\", agent=agent, ) crew = Crew( agents=[agent], tasks=[task], verbose=True, process=Process.sequential, knowledge_sources=[string_source], # Enable knowledge by adding the sources here ) result = crew.kickoff(inputs={\"question\": \"What city does John live in and how old is he?\"}) docling for the following example to work: uv add docling from crewai import LLM, Agent, Crew, Process, Task from crewai.knowledge.source.crew_docling_source import CrewDoclingSource</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#create-a-knowledge-source-from-web-content","title":"Create a knowledge source from web content","text":"<p>content_source = CrewDoclingSource( file_paths=[ \"https://lilianweng.github.io/posts/2024-11-28-reward-hacking\", \"https://lilianweng.github.io/posts/2024-07-07-hallucination\", ], )</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#create-an-llm-with-a-temperature-of-0-to-ensure-deterministic-outputs_1","title":"Create an LLM with a temperature of 0 to ensure deterministic outputs","text":"<p>llm = LLM(model=\"gpt-4o-mini\", temperature=0)</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#create-an-agent-with-the-knowledge-store_1","title":"Create an agent with the knowledge store","text":"<p>agent = Agent( role=\"About papers\", goal=\"You know everything about the papers.\", backstory=\"You are a master at understanding papers and their content.\", verbose=True, allow_delegation=False, llm=llm, ) task = Task( description=\"Answer the following questions about the papers: {question}\", expected_output=\"An answer to the question.\", agent=agent, ) crew = Crew( agents=[agent], tasks=[task], verbose=True, process=Process.sequential, knowledge_sources=[content_source], ) result = crew.kickoff( inputs={\"question\": \"What is the reward hacking paper about? Be sure to provide sources.\"} ) from crewai.knowledge.source.text_file_knowledge_source import TextFileKnowledgeSource text_source = TextFileKnowledgeSource( file_paths=[\"document.txt\", \"another.txt\"] ) from crewai.knowledge.source.pdf_knowledge_source import PDFKnowledgeSource pdf_source = PDFKnowledgeSource( file_paths=[\"document.pdf\", \"another.pdf\"] ) from crewai.knowledge.source.csv_knowledge_source import CSVKnowledgeSource csv_source = CSVKnowledgeSource( file_paths=[\"data.csv\"] ) from crewai.knowledge.source.excel_knowledge_source import ExcelKnowledgeSource excel_source = ExcelKnowledgeSource( file_paths=[\"spreadsheet.xlsx\"] ) from crewai.knowledge.source.json_knowledge_source import JSONKnowledgeSource json_source = JSONKnowledgeSource( file_paths=[\"data.json\"] ) from crewai import Agent, Task, Crew from crewai.knowledge.source.string_knowledge_source import StringKnowledgeSource</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#agent-with-its-own-knowledge-no-crew-knowledge-needed","title":"Agent with its own knowledge - NO crew knowledge needed","text":"<p>specialist_knowledge = StringKnowledgeSource( content=\"Specialized technical information for this agent only\" ) specialist_agent = Agent( role=\"Technical Specialist\", goal=\"Provide technical expertise\", backstory=\"Expert in specialized technical domains\", knowledge_sources=[specialist_knowledge] # Agent-specific knowledge ) task = Task( description=\"Answer technical questions\", agent=specialist_agent, expected_output=\"Technical answer\" )</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#no-crew-level-knowledge-required","title":"No crew-level knowledge required","text":"<p>crew = Crew( agents=[specialist_agent], tasks=[task] ) result = crew.kickoff() # Agent knowledge works independently crew.kickoff() crew.kickoff(), here\u2019s the exact sequence:</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#during-kickoff","title":"During kickoff","text":"<p>for agent in self.agents: agent.crew = self # Agent gets reference to crew agent.set_knowledge(crew_embedder=self.embedder) # Agent knowledge initialized agent.create_agent_executor()</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#agent-knowledge-storage","title":"Agent knowledge storage","text":"<p>agent_collection_name = agent.role # e.g., \"Technical Specialist\"</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#crew-knowledge-storage","title":"Crew knowledge storage","text":"<p>crew_collection_name = \"crew\"</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#both-stored-in-same-chromadb-instance-but-different-collections","title":"Both stored in same ChromaDB instance but different collections","text":"","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#path-localsharecrewaiprojectknowledge","title":"Path: ~/.local/share/CrewAI/{project}/knowledge/","text":"","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#crew-crew-knowledge-collection","title":"\u251c\u2500\u2500 crew/ # Crew knowledge collection","text":"","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#technical-specialist-agent-knowledge-collection","title":"\u251c\u2500\u2500 Technical Specialist/ # Agent knowledge collection","text":"","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#another-agent-role-another-agents-collection","title":"\u2514\u2500\u2500 Another Agent Role/ # Another agent's collection","text":"<p>from crewai import Agent, Task, Crew from crewai.knowledge.source.string_knowledge_source import StringKnowledgeSource</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#agent-specific-knowledge","title":"Agent-specific knowledge","text":"<p>agent_knowledge = StringKnowledgeSource( content=\"Agent-specific information that only this agent needs\" ) agent = Agent( role=\"Specialist\", goal=\"Use specialized knowledge\", backstory=\"Expert with specific knowledge\", knowledge_sources=[agent_knowledge], embedder={ # Agent can have its own embedder \"provider\": \"openai\", \"config\": {\"model\": \"text-embedding-3-small\"} } ) task = Task( description=\"Answer using your specialized knowledge\", agent=agent, expected_output=\"Answer based on agent knowledge\" )</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#no-crew-knowledge-needed","title":"No crew knowledge needed","text":"<p>crew = Crew(agents=[agent], tasks=[task]) result = crew.kickoff() # Works perfectly</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#crew-wide-knowledge-shared-by-all-agents","title":"Crew-wide knowledge (shared by all agents)","text":"<p>crew_knowledge = StringKnowledgeSource( content=\"Company policies and general information for all agents\" )</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#agent-specific-knowledge_1","title":"Agent-specific knowledge","text":"<p>specialist_knowledge = StringKnowledgeSource( content=\"Technical specifications only the specialist needs\" ) specialist = Agent( role=\"Technical Specialist\", goal=\"Provide technical expertise\", backstory=\"Technical expert\", knowledge_sources=[specialist_knowledge] # Agent-specific ) generalist = Agent( role=\"General Assistant\", goal=\"Provide general assistance\", backstory=\"General helper\"</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#no-agent-specific-knowledge","title":"No agent-specific knowledge","text":"<p>) crew = Crew( agents=[specialist, generalist], tasks=[...], knowledge_sources=[crew_knowledge] # Crew-wide knowledge )</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#result","title":"Result:","text":"","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#-specialist-gets-crew_knowledge-specialist_knowledge","title":"- specialist gets: crew_knowledge + specialist_knowledge","text":"","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#-generalist-gets-crew_knowledge-only","title":"- generalist gets: crew_knowledge only","text":"","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#different-knowledge-for-different-agents","title":"Different knowledge for different agents","text":"<p>sales_knowledge = StringKnowledgeSource(content=\"Sales procedures and pricing\") tech_knowledge = StringKnowledgeSource(content=\"Technical documentation\") support_knowledge = StringKnowledgeSource(content=\"Support procedures\") sales_agent = Agent( role=\"Sales Representative\", knowledge_sources=[sales_knowledge], embedder={\"provider\": \"openai\", \"config\": {\"model\": \"text-embedding-3-small\"}} ) tech_agent = Agent( role=\"Technical Expert\", knowledge_sources=[tech_knowledge], embedder={\"provider\": \"ollama\", \"config\": {\"model\": \"mxbai-embed-large\"}} ) support_agent = Agent( role=\"Support Specialist\", knowledge_sources=[support_knowledge]</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#will-use-crew-embedder-as-fallback","title":"Will use crew embedder as fallback","text":"<p>) crew = Crew( agents=[sales_agent, tech_agent, support_agent], tasks=[...], embedder={ # Fallback embedder for agents without their own \"provider\": \"google\", \"config\": {\"model\": \"text-embedding-004\"} } )</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#each-agent-gets-only-their-specific-knowledge","title":"Each agent gets only their specific knowledge","text":"","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#each-can-use-different-embedding-providers","title":"Each can use different embedding providers","text":"<p>from crewai.knowledge.knowledge_config import KnowledgeConfig knowledge_config = KnowledgeConfig(results_limit=10, score_threshold=0.5) agent = Agent( ... knowledge_config=knowledge_config ) results_limit: is the number of relevant documents to return. Default is 3. score_threshold: is the minimum score for a document to be considered relevant. Default is 0.35. ~/Library/Application Support/CrewAI/{project_name}/ \u2514\u2500\u2500 knowledge/ # Knowledge ChromaDB files \u251c\u2500\u2500 chroma.sqlite3 # ChromaDB metadata \u251c\u2500\u2500 {collection_id}/ # Vector embeddings \u2514\u2500\u2500 knowledge_{collection}/ # Named collections ~/.local/share/CrewAI/{project_name}/ \u2514\u2500\u2500 knowledge/ \u251c\u2500\u2500 chroma.sqlite3 \u251c\u2500\u2500 {collection_id}/ \u2514\u2500\u2500 knowledge_{collection}/ C:\\Users{username}\\AppData\\Local\\CrewAI{project_name}\\ \u2514\u2500\u2500 knowledge\\ \u251c\u2500\u2500 chroma.sqlite3 \u251c\u2500\u2500 {collection_id}\\ \u2514\u2500\u2500 knowledge_{collection}\\ from crewai.utilities.paths import db_storage_path import os</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#get-the-knowledge-storage-path","title":"Get the knowledge storage path","text":"<p>knowledge_path = os.path.join(db_storage_path(), \"knowledge\") print(f\"Knowledge storage location: {knowledge_path}\")</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#list-knowledge-collections-and-files","title":"List knowledge collections and files","text":"<p>if os.path.exists(knowledge_path): print(\"\\nKnowledge storage contents:\") for item in os.listdir(knowledge_path): item_path = os.path.join(knowledge_path, item) if os.path.isdir(item_path): print(f\"\ud83d\udcc1 Collection: {item}/\")</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#show-collection-contents","title":"Show collection contents","text":"<p>try: for subitem in os.listdir(item_path): print(f\" \u2514\u2500\u2500 {subitem}\") except PermissionError: print(f\" \u2514\u2500\u2500 (permission denied)\") else: print(f\"\ud83d\udcc4 {item}\") else: print(\"No knowledge storage found yet.\") import os from crewai import Crew</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#set-custom-storage-location-for-all-crewai-data","title":"Set custom storage location for all CrewAI data","text":"<p>os.environ[\"CREWAI_STORAGE_DIR\"] = \"./my_project_storage\"</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#all-knowledge-will-now-be-stored-in-my_project_storageknowledge","title":"All knowledge will now be stored in ./my_project_storage/knowledge/","text":"<p>crew = Crew( agents=[...], tasks=[...], knowledge_sources=[...] ) from crewai.knowledge.storage.knowledge_storage import KnowledgeStorage from crewai.knowledge.source.string_knowledge_source import StringKnowledgeSource</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#create-custom-storage-with-specific-embedder","title":"Create custom storage with specific embedder","text":"<p>custom_storage = KnowledgeStorage( embedder={ \"provider\": \"ollama\", \"config\": {\"model\": \"mxbai-embed-large\"} }, collection_name=\"my_custom_knowledge\" )</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#use-with-knowledge-sources","title":"Use with knowledge sources","text":"<p>knowledge_source = StringKnowledgeSource( content=\"Your knowledge content here\" ) knowledge_source.storage = custom_storage import os from pathlib import Path</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#store-knowledge-in-project-directory","title":"Store knowledge in project directory","text":"<p>project_root = Path(file).parent knowledge_dir = project_root / \"knowledge_storage\" os.environ[\"CREWAI_STORAGE_DIR\"] = str(knowledge_dir)</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#now-all-knowledge-will-be-stored-in-your-project-directory","title":"Now all knowledge will be stored in your project directory","text":"<p>text-embedding-3-small) for knowledge storage, even when using different LLM providers. You can easily customize this to match your setup. from crewai import Agent, Crew, LLM from crewai.knowledge.source.string_knowledge_source import StringKnowledgeSource</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#when-using-claude-as-your-llm","title":"When using Claude as your LLM...","text":"<p>agent = Agent( role=\"Researcher\", goal=\"Research topics\", backstory=\"Expert researcher\", llm=LLM(provider=\"anthropic\", model=\"claude-3-sonnet\") # Using Claude )</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#crewai-will-still-use-openai-embeddings-by-default-for-knowledge","title":"CrewAI will still use OpenAI embeddings by default for knowledge","text":"","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#this-ensures-consistency-but-may-not-match-your-llm-provider-preference","title":"This ensures consistency but may not match your LLM provider preference","text":"<p>knowledge_source = StringKnowledgeSource(content=\"Research data...\") crew = Crew( agents=[agent], tasks=[...], knowledge_sources=[knowledge_source]</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#default-uses-openai-embeddings-even-with-claude-llm","title":"Default: Uses OpenAI embeddings even with Claude LLM","text":"<p>)</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#option-1-use-voyage-ai-recommended-by-anthropic-for-claude-users","title":"Option 1: Use Voyage AI (recommended by Anthropic for Claude users)","text":"<p>crew = Crew( agents=[agent], tasks=[...], knowledge_sources=[knowledge_source], embedder={ \"provider\": \"voyageai\", # Recommended for Claude users \"config\": { \"api_key\": \"your-voyage-api-key\", \"model\": \"voyage-3\" # or \"voyage-3-large\" for best quality } } )</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#option-2-use-local-embeddings-no-external-api-calls","title":"Option 2: Use local embeddings (no external API calls)","text":"<p>crew = Crew( agents=[agent], tasks=[...], knowledge_sources=[knowledge_source], embedder={ \"provider\": \"ollama\", \"config\": { \"model\": \"mxbai-embed-large\", \"url\": \"http://localhost:11434/api/embeddings\" } } )</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#option-3-agent-level-embedding-customization","title":"Option 3: Agent-level embedding customization","text":"<p>agent = Agent( role=\"Researcher\", goal=\"Research topics\", backstory=\"Expert researcher\", knowledge_sources=[knowledge_source], embedder={ \"provider\": \"google\", \"config\": { \"model\": \"models/text-embedding-004\", \"api_key\": \"your-google-key\" } } ) agent = Agent( role=\"Researcher\", goal=\"Research topics\", backstory=\"Expert researcher\", knowledge_sources=[knowledge_source], embedder={ \"provider\": \"azure\", \"config\": { \"api_key\": \"your-azure-api-key\", \"model\": \"text-embedding-ada-002\", # change to the model you are using and is deployed in Azure \"api_base\": \"https://your-azure-endpoint.openai.azure.com/\", \"api_version\": \"2024-02-01\" } } ) _get_knowledge_search_query method is triggered</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#original-task-prompt","title":"Original task prompt","text":"<p>task_prompt = \"Answer the following questions about the user's favorite movies: What movie did John watch last week? Format your answer in JSON.\"</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#behind-the-scenes-this-might-be-rewritten-as","title":"Behind the scenes, this might be rewritten as:","text":"<p>rewritten_query = \"What movies did John watch last week?\" from crewai.utilities.events import ( KnowledgeRetrievalStartedEvent, KnowledgeRetrievalCompletedEvent, ) from crewai.utilities.events.base_event_listener import BaseEventListener class KnowledgeMonitorListener(BaseEventListener): def setup_listeners(self, crewai_event_bus): @crewai_event_bus.on(KnowledgeRetrievalStartedEvent) def on_knowledge_retrieval_started(source, event): print(f\"Agent '{event.agent.role}' started retrieving knowledge\") @crewai_event_bus.on(KnowledgeRetrievalCompletedEvent) def on_knowledge_retrieval_completed(source, event): print(f\"Agent '{event.agent.role}' completed knowledge retrieval\") print(f\"Query: {event.query}\") print(f\"Retrieved {len(event.retrieved_knowledge)} knowledge chunks\")</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#create-an-instance-of-your-listener","title":"Create an instance of your listener","text":"<p>knowledge_monitor = KnowledgeMonitorListener() BaseKnowledgeSource class. Let\u2019s create a practical example that fetches and processes space news articles. from crewai import Agent, Task, Crew, Process, LLM from crewai.knowledge.source.base_knowledge_source import BaseKnowledgeSource import requests from datetime import datetime from typing import Dict, Any from pydantic import BaseModel, Field class SpaceNewsKnowledgeSource(BaseKnowledgeSource): \"\"\"Knowledge source that fetches data from Space News API.\"\"\" api_endpoint: str = Field(description=\"API endpoint URL\") limit: int = Field(default=10, description=\"Number of articles to fetch\") def load_content(self) -&gt; Dict[Any, str]: \"\"\"Fetch and format space news articles.\"\"\" try: response = requests.get( f\"{self.api_endpoint}?limit={self.limit}\" ) response.raise_for_status() data = response.json() articles = data.get('results', []) formatted_data = self.validate_content(articles) return {self.api_endpoint: formatted_data} except Exception as e: raise ValueError(f\"Failed to fetch space news: {str(e)}\") def validate_content(self, articles: list) -&gt; str: \"\"\"Format articles into readable text.\"\"\" formatted = \"Space News Articles:\\n\\n\" for article in articles: formatted += f\"\"\" Title: {article['title']} Published: {article['published_at']} Summary: {article['summary']} News Site: {article['news_site']} URL: {article['url']} -------------------\"\"\" return formatted def add(self) -&gt; None: \"\"\"Process and store the articles.\"\"\" content = self.load_content() for _, text in content.items(): chunks = self._chunk_text(text) self.chunks.extend(chunks) self._save_documents()</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#create-knowledge-source","title":"Create knowledge source","text":"<p>recent_news = SpaceNewsKnowledgeSource( api_endpoint=\"https://api.spaceflightnewsapi.net/v4/articles\", limit=10, )</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#create-specialized-agent","title":"Create specialized agent","text":"<p>space_analyst = Agent( role=\"Space News Analyst\", goal=\"Answer questions about space news accurately and comprehensively\", backstory=\"\"\"You are a space industry analyst with expertise in space exploration, satellite technology, and space industry trends. You excel at answering questions about space news and providing detailed, accurate information.\"\"\", knowledge_sources=[recent_news], llm=LLM(model=\"gpt-4\", temperature=0.0) )</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#create-task-that-handles-user-questions","title":"Create task that handles user questions","text":"<p>analysis_task = Task( description=\"Answer this question about space news: {user_question}\", expected_output=\"A detailed answer based on the recent space news articles\", agent=space_analyst )</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#create-and-run-the-crew","title":"Create and run the crew","text":"<p>crew = Crew( agents=[space_analyst], tasks=[analysis_task], verbose=True, process=Process.sequential )</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#example-usage","title":"Example usage","text":"<p>result = crew.kickoff( inputs={\"user_question\": \"What are the latest developments in space exploration?\"} ) from crewai import Agent, Crew, Task from crewai.knowledge.source.string_knowledge_source import StringKnowledgeSource knowledge_source = StringKnowledgeSource(content=\"Test knowledge\") agent = Agent( role=\"Test Agent\", goal=\"Test knowledge\", backstory=\"Testing\", knowledge_sources=[knowledge_source] ) crew = Crew(agents=[agent], tasks=[Task(...)])</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#before-kickoff-knowledge-not-initialized","title":"Before kickoff - knowledge not initialized","text":"<p>print(f\"Before kickoff - Agent knowledge: {getattr(agent, 'knowledge', None)}\") crew.kickoff()</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#after-kickoff-knowledge-initialized","title":"After kickoff - knowledge initialized","text":"<p>print(f\"After kickoff - Agent knowledge: {agent.knowledge}\") print(f\"Agent knowledge collection: {agent.knowledge.storage.collection_name}\") print(f\"Number of sources: {len(agent.knowledge.sources)}\") import os from crewai.utilities.paths import db_storage_path</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#check-storage-structure","title":"Check storage structure","text":"<p>storage_path = db_storage_path() knowledge_path = os.path.join(storage_path, \"knowledge\") if os.path.exists(knowledge_path): print(\"Knowledge collections found:\") for collection in os.listdir(knowledge_path): collection_path = os.path.join(knowledge_path, collection) if os.path.isdir(collection_path): print(f\" - {collection}/\")</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#show-collection-contents_1","title":"Show collection contents","text":"<p>for item in os.listdir(collection_path): print(f\" \u2514\u2500\u2500 {item}\")</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#test-agent-knowledge-retrieval","title":"Test agent knowledge retrieval","text":"<p>if hasattr(agent, 'knowledge') and agent.knowledge: test_query = [\"test query\"] results = agent.knowledge.query(test_query) print(f\"Agent knowledge results: {len(results)} documents found\")</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#test-crew-knowledge-retrieval-if-exists","title":"Test crew knowledge retrieval (if exists)","text":"<p>if hasattr(crew, 'knowledge') and crew.knowledge: crew_results = crew.query_knowledge(test_query) print(f\"Crew knowledge results: {len(crew_results)} documents found\") import chromadb from crewai.utilities.paths import db_storage_path import os</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#connect-to-crewais-knowledge-chromadb","title":"Connect to CrewAI's knowledge ChromaDB","text":"<p>knowledge_path = os.path.join(db_storage_path(), \"knowledge\") if os.path.exists(knowledge_path): client = chromadb.PersistentClient(path=knowledge_path) collections = client.list_collections() print(\"Knowledge Collections:\") for collection in collections: print(f\" - {collection.name}: {collection.count()} documents\")</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#sample-a-few-documents-to-verify-content","title":"Sample a few documents to verify content","text":"<p>if collection.count() &gt; 0: sample = collection.peek(limit=2) print(f\" Sample content: {sample['documents'][0][:100]}...\") else: print(\"No knowledge storage found\") from crewai.knowledge.source.string_knowledge_source import StringKnowledgeSource</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#create-a-test-knowledge-source","title":"Create a test knowledge source","text":"<p>test_source = StringKnowledgeSource( content=\"Test knowledge content for debugging\", chunk_size=100, # Small chunks for testing chunk_overlap=20 )</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#check-chunking-behavior","title":"Check chunking behavior","text":"<p>print(f\"Original content length: {len(test_source.content)}\") print(f\"Chunk size: {test_source.chunk_size}\") print(f\"Chunk overlap: {test_source.chunk_overlap}\")</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#process-and-inspect-chunks","title":"Process and inspect chunks","text":"<p>test_source.add() print(f\"Number of chunks created: {len(test_source.chunks)}\") for i, chunk in enumerate(test_source.chunks[:3]): # Show first 3 chunks print(f\"Chunk {i+1}: {chunk[:50]}...\")</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#ensure-files-are-in-the-correct-location","title":"Ensure files are in the correct location","text":"<p>from crewai.utilities.constants import KNOWLEDGE_DIRECTORY import os knowledge_dir = KNOWLEDGE_DIRECTORY # Usually \"knowledge\" file_path = os.path.join(knowledge_dir, \"your_file.pdf\") if not os.path.exists(file_path): print(f\"File not found: {file_path}\") print(f\"Current working directory: {os.getcwd()}\") print(f\"Expected knowledge directory: {os.path.abspath(knowledge_dir)}\")</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#this-happens-when-switching-embedding-providers","title":"This happens when switching embedding providers","text":"","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#reset-knowledge-storage-to-clear-old-embeddings","title":"Reset knowledge storage to clear old embeddings","text":"<p>crew.reset_memories(command_type='knowledge')</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#or-use-consistent-embedding-providers","title":"Or use consistent embedding providers","text":"<p>crew = Crew( agents=[...], tasks=[...], knowledge_sources=[...], embedder={\"provider\": \"openai\", \"config\": {\"model\": \"text-embedding-3-small\"}} )</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#fix-storage-permissions","title":"Fix storage permissions","text":"<p>chmod -R 755 ~/.local/share/CrewAI/</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#verify-storage-location-consistency","title":"Verify storage location consistency","text":"<p>import os from crewai.utilities.paths import db_storage_path print(\"CREWAI_STORAGE_DIR:\", os.getenv(\"CREWAI_STORAGE_DIR\")) print(\"Computed storage path:\", db_storage_path()) print(\"Knowledge path:\", os.path.join(db_storage_path(), \"knowledge\"))</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#reset-only-agent-specific-knowledge","title":"Reset only agent-specific knowledge","text":"<p>crew.reset_memories(command_type='agent_knowledge')</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#reset-both-crew-and-agent-knowledge","title":"Reset both crew and agent knowledge","text":"<p>crew.reset_memories(command_type='knowledge')</p>","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#cli-commands","title":"CLI commands","text":"","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#crewai-reset-memories-agent-knowledge-agent-knowledge-only","title":"crewai reset-memories --agent-knowledge # Agent knowledge only","text":"","tags":["source"]},{"location":"sources/docs.crewai.com-en-concepts-knowledge/#crewai-reset-memories-knowledge-all-knowledge","title":"crewai reset-memories --knowledge # All knowledge","text":"<p>crewai reset-memories command with the --knowledge option. crewai reset-memories --knowledge Content Organization Performance Tips One Time Knowledge Knowledge Management Production Best Practices CREWAI_STORAGE_DIR to a known location in production</p> <p></p> Figure 1. Credit: [docs.crewai.com](https://mintlify.s3.us-west-1.amazonaws.com/crewai/images/crew_only_logo.png), License: internal-copy <p></p> Figure 2. Credit: [docs.crewai.com](https://mintlify.s3.us-west-1.amazonaws.com/crewai/images/crew_only_logo.png), License: internal-copy","tags":["source"]},{"location":"sources/github.com-anthropics-anthropic-cookbook-tree-main-patterns-agents/","title":"github.com-anthropics-anthropic-cookbook-tree-main-patterns-agents","text":"<p>Synthesis: TODO</p> <p>We read every piece of feedback, and take your input very seriously. To see all available qualifiers, see our documentation. There was an error while loading. Please reload this page.</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/","title":"python.langchain.com-docs-concepts-streaming","text":"<p>Synthesis: TODO</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#streaming","title":"Streaming","text":"<p>Streaming is crucial for enhancing the responsiveness of applications built on LLMs. By displaying output progressively, even before a complete response is ready, streaming significantly improves user experience (UX), particularly when dealing with the latency of LLMs.</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#overview","title":"Overview","text":"<p>Generating full responses from LLMs often incurs a delay of several seconds, which becomes more noticeable in complex applications with multiple model calls. Fortunately, LLMs generate responses iteratively, allowing for intermediate results to be displayed as they are produced. By streaming these intermediate outputs, LangChain enables smoother UX in LLM-powered apps and offers built-in support for streaming at the core of its design. In this guide, we'll discuss streaming in LLM applications and explore how LangChain's streaming APIs facilitate real-time output from various components in your application.</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#what-to-stream-in-llm-applications","title":"What to stream in LLM applications","text":"<p>In applications involving LLMs, several types of data can be streamed to improve user experience by reducing perceived latency and increasing transparency. These include:</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#1-streaming-llm-outputs","title":"1. Streaming LLM outputs","text":"<p>The most common and critical data to stream is the output generated by the LLM itself. LLMs often take time to generate full responses, and by streaming the output in real-time, users can see partial results as they are produced. This provides immediate feedback and helps reduce the wait time for users.</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#2-streaming-pipeline-or-workflow-progress","title":"2. Streaming pipeline or workflow progress","text":"","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#beyond-just-streaming-llm-output-its-useful-to-stream-progress-through-more-complex-workflows-or-pipelines-giving-users-a-sense-of-how-the-application-is-progressing-overall-this-could-include","title":"Beyond just streaming LLM output, it\u2019s useful to stream progress through more complex workflows or pipelines, giving users a sense of how the application is progressing overall. This could include:","text":"","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#in-langgraph-workflowswith-langgraph-workflows-are-composed-of-nodes-and-edges-that-represent-various-steps-streaming-here-involves-tracking-changes-to-the-graph-stateas-individual-nodesrequest-updates-this-allows-for-more-granular-monitoring-of-which-node-in-the-workflow-is-currently-active-giving-real-time-updates-about-the-status-of-the-workflow-as-it-progresses-through-different-stages","title":"In LangGraph Workflows:With LangGraph, workflows are composed of nodes and edges that represent various steps. Streaming here involves tracking changes to the graph stateas individual nodesrequest updates. This allows for more granular monitoring of which node in the workflow is currently active, giving real-time updates about the status of the workflow as it progresses through different stages.","text":"<p>In LCEL Pipelines:Streaming updates from an LCEL pipeline involves capturing progress from individual sub-runnables. For example, as different steps or components of the pipeline execute, you can stream which sub-runnable is currently running, providing real-time insight into the overall pipeline's progress. Streaming pipeline or workflow progress is essential in providing users with a clear picture of where the application is in the execution process.</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#3-streaming-custom-data","title":"3. Streaming custom data","text":"<p>In some cases, you may need to stream custom data that goes beyond the information provided by the pipeline or workflow structure. This custom information is injected within a specific step in the workflow, whether that step is a tool or a LangGraph node. For example, you could stream updates about what a tool is doing in real-time or the progress through a LangGraph node. This granular data, which is emitted directly from within the step, provides more detailed insights into the execution of the workflow and is especially useful in complex processes where more visibility is needed.</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#streaming-apis","title":"Streaming APIs","text":"<p>LangChain has two main APIs for streaming output in real-time. These APIs are supported by any component that implements the Runnable Interface, including LLMs, compiled LangGraph graphs, and any Runnable generated with LCEL. - sync stream and async astream: Use to stream outputs from individual Runnables (e.g., a chat model) as they are generated or stream any workflow created with LangGraph. - The async only astream_events: Use this API to get access to custom events and intermediate outputs from LLM applications built entirely with LCEL. Note that this API is available, but not needed when working with LangGraph. In addition, there is a legacy async astream_log API. This API is not recommended for new projects it is more complex and less feature-rich than the other streaming APIs. stream() and astream() The stream() method returns an iterator that yields chunks of output synchronously as they are produced. You can use a for loop to process each chunk in real-time. For example, when using an LLM, this allows the output to be streamed incrementally as it is generated, reducing the wait time for users. The type of chunk yielded by the stream() and astream() methods depends on the component being streamed. For example, when streaming from an LLM each component will be an AIMessageChunk; however, for other components, the chunk may be different. The stream() method returns an iterator that yields these chunks as they are produced. For example, for chunk in component.stream(some_input):</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#important-keep-the-processing-of-each-chunk-as-efficient-as-possible","title":"IMPORTANT: Keep the processing of each chunk as efficient as possible.","text":"","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#while-youre-processing-the-current-chunk-the-upstream-component-is","title":"While you're processing the current chunk, the upstream component is","text":"","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#waiting-to-produce-the-next-one-for-example-if-working-with-langgraph","title":"waiting to produce the next one. For example, if working with LangGraph,","text":"","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#graph-execution-is-paused-while-the-current-chunk-is-being-processed","title":"graph execution is paused while the current chunk is being processed.","text":"","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#in-extreme-cases-this-could-even-result-in-timeouts-eg-when-llm-outputs-are","title":"In extreme cases, this could even result in timeouts (e.g., when llm outputs are","text":"","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#streamed-from-an-api-that-has-a-timeout","title":"streamed from an API that has a timeout).","text":"<p>print(chunk) The asynchronous version, astream(), works similarly but is designed for non-blocking workflows. You can use it in asynchronous code to achieve the same real-time streaming behavior.</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#usage-with-chat-models","title":"Usage with chat models","text":"<p>When using stream() or astream() with chat models, the output is streamed as AIMessageChunks as it is generated by the LLM. This allows you to present or process the LLM's output incrementally as it's being produced, which is particularly useful in interactive applications or interfaces.</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#usage-with-langgraph","title":"Usage with LangGraph","text":"<p>LangGraph compiled graphs are Runnables and support the standard streaming APIs. When using the stream and astream methods with LangGraph, you can choose one or more streaming mode which allow you to control the type of output that is streamed. The available streaming modes are: \"values\": Emit all values of the state for each step. \"updates\": Emit only the node name(s) and updates that were returned by the node(s) after each step. \"debug\": Emit debug events for each step. \"messages\": Emit LLM messages token-by-token. \"custom\": Emit custom output written using LangGraph's StreamWriter. For more information, please see: - LangGraph streaming conceptual guide for more information on how to stream when working with LangGraph. - LangGraph streaming how-to guides for specific examples of streaming in LangGraph.</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#usage-with-lcel","title":"Usage with LCEL","text":"<p>If you compose multiple Runnables using LangChain\u2019s Expression Language (LCEL), the stream() and astream() methods will, by convention, stream the output of the last step in the chain. This allows the final processed result to be streamed incrementally. LCEL tries to optimize streaming latency in pipelines so that the streaming results from the last step are available as soon as possible. astream_events Use the astream_events API to access custom data and intermediate outputs from LLM applications built entirely with LCEL. While this API is available for use with LangGraph as well, it is usually not necessary when working with LangGraph, as the stream and astream methods provide comprehensive streaming capabilities for LangGraph graphs. For chains constructed using LCEL, the .stream() method only streams the output of the final step from the chain. This might be sufficient for some applications, but as you build more complex chains of several LLM calls together, you may want to use the intermediate values of the chain alongside the final output. For example, you may want to return sources alongside the final generation when building a chat-over-documents app. There are ways to do this using callbacks, or by constructing your chain in such a way that it passes intermediate values to the end with something like chained .assign() calls, but LangChain also includes an .astream_events() method that combines the flexibility of callbacks with the ergonomics of .stream(). When called, it returns an iterator which yields various types of events that you can filter and process according to the needs of your project. Here's one small example that prints just events containing streamed chat model output: from langchain_core.output_parsers import StrOutputParser from langchain_core.prompts import ChatPromptTemplate from langchain_anthropic import ChatAnthropic model = ChatAnthropic(model=\"claude-3-7-sonnet-20250219\") prompt = ChatPromptTemplate.from_template(\"tell me a joke about {topic}\") parser = StrOutputParser() chain = prompt | model | parser async for event in chain.astream_events({\"topic\": \"parrot\"}): kind = event[\"event\"] if kind == \"on_chat_model_stream\": print(event, end=\"|\", flush=True) API Reference:StrOutputParser | ChatPromptTemplate You can roughly think of it as an iterator over callback events (though the format differs) - and you can use it on almost all LangChain components! See this guide for more detailed information on how to use .astream_events(), including a table listing available events.</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#writing-custom-data-to-the-stream","title":"Writing custom data to the stream","text":"<p>To write custom data to the stream, you will need to choose one of the following methods based on the component you are working with: - LangGraph's StreamWriter can be used to write custom data that will surface through streamand astreamAPIs when working with LangGraph. Importantthis is a LangGraph feature, so it is not available when working with pure LCEL. See how to streaming custom data for more information. - dispatch_events / adispatch_events can be used to write custom data that will be surfaced through the astream_eventsAPI. See how to dispatch custom callback events for more information.</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#auto-streaming-chat-models","title":"\"Auto-Streaming\" Chat Models","text":"<p>LangChain simplifies streaming from chat models by automatically enabling streaming mode in certain cases, even when you\u2019re not explicitly calling the streaming methods. This is particularly useful when you use the non-streaming invoke method but still want to stream the entire application, including intermediate results from the chat model.</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#how-it-works","title":"How It Works","text":"<p>When you call the invoke (or ainvoke) method on a chat model, LangChain will automatically switch to streaming mode if it detects that you are trying to stream the overall application. Under the hood, it'll have invoke (or ainvoke) use the stream (or astream) method to generate its output. The result of the invocation will be the same as far as the code that was using invoke is concerned; however, while the chat model is being streamed, LangChain will take care of invoking on_llm_new_token events in LangChain's callback system. These callback events allow LangGraph stream/ astream and astream_events to surface the chat model's output in real-time. Example: def node(state): ...</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#the-code-below-uses-the-invoke-method-but-langchain-will","title":"The code below uses the invoke method, but LangChain will","text":"","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#automatically-switch-to-streaming-mode","title":"automatically switch to streaming mode","text":"","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#when-it-detects-that-the-overall","title":"when it detects that the overall","text":"","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#application-is-being-streamed","title":"application is being streamed.","text":"<p>ai_message = model.invoke(state[\"messages\"]) ... for chunk in compiled_graph.stream(..., mode=\"messages\"): ...</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#async-programming","title":"Async Programming","text":"<p>LangChain offers both synchronous (sync) and asynchronous (async) versions of many of its methods. The async methods are typically prefixed with an \"a\" (e.g., ainvoke, astream). When writing async code, it's crucial to consistently use these asynchronous methods to ensure non-blocking behavior and optimal performance. If streaming data fails to appear in real-time, please ensure that you are using the correct async methods for your workflow. Please review the async programming in LangChain guide for more information on writing async code with LangChain.</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts-streaming/#related-resources","title":"Related Resources","text":"<p>Please see the following how-to guides for specific examples of streaming in LangChain: - LangGraph conceptual guide on streaming - LangGraph streaming how-to guides - How to stream runnables: This how-to guide goes over common streaming patterns with LangChain components (e.g., chat models) and with LCEL. - How to stream chat models - How to stream tool calls For writing custom data to the stream, please see the following resources: - If using LangGraph, see how to stream custom data. - If using LCEL, see how to dispatch custom callback events.</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts/","title":"python.langchain.com-docs-concepts","text":"<p>Synthesis: TODO</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts/#conceptual-guide","title":"Conceptual guide","text":"<p>This guide provides explanations of the key concepts behind the LangChain framework and AI applications more broadly. We recommend that you go through at least one of the Tutorials before diving into the conceptual guide. This will provide practical context that will make it easier to understand the concepts discussed here. The conceptual guide does not cover step-by-step instructions or specific implementation examples \u2014 those are found in the How-to guides and Tutorials. For detailed reference material, please see the API reference.</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts/#high-level","title":"High level","text":"<p>Why LangChain?: Overview of the value that LangChain provides. Architecture: How packages are organized in the LangChain ecosystem.</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts/#concepts","title":"Concepts","text":"<p>Chat models: LLMs exposed via a chat API that process sequences of messages as input and output a message. Messages: The unit of communication in chat models, used to represent model input and output. Chat history: A conversation represented as a sequence of messages, alternating between user messages and model responses. Tools: A function with an associated schema defining the function's name, description, and the arguments it accepts. Tool calling: A type of chat model API that accepts tool schemas, along with messages, as input and returns invocations of those tools as part of the output message. Structured output: A technique to make a chat model respond in a structured format, such as JSON that matches a given schema. Memory: Information about a conversation that is persisted so that it can be used in future conversations. Multimodality: The ability to work with data that comes in different forms, such as text, audio, images, and video. Runnable interface: The base abstraction that many LangChain components and the LangChain Expression Language are built on. Streaming: LangChain streaming APIs for surfacing results as they are generated. LangChain Expression Language (LCEL): A syntax for orchestrating LangChain components. Most useful for simpler applications. Document loaders: Load a source as a list of documents. Retrieval: Information retrieval systems can retrieve structured or unstructured data from a datasource in response to a query. Text splitters: Split long text into smaller chunks that can be individually indexed to enable granular retrieval. Embedding models: Models that represent data such as text or images in a vector space. Vector stores: Storage of and efficient search over vectors and associated metadata. Retriever: A component that returns relevant documents from a knowledge base in response to a query. Retrieval Augmented Generation (RAG): A technique that enhances language models by combining them with external knowledge bases. Agents: Use a language model to choose a sequence of actions to take. Agents can interact with external resources via tool. Prompt templates: Component for factoring out the static parts of a model \"prompt\" (usually a sequence of messages). Useful for serializing, versioning, and reusing these static parts. Output parsers: Responsible for taking the output of a model and transforming it into a more suitable format for downstream tasks. Output parsers were primarily useful prior to the general availability of tool calling and structured outputs. Few-shot prompting: A technique for improving model performance by providing a few examples of the task to perform in the prompt. Example selectors: Used to select the most relevant examples from a dataset based on a given input. Example selectors are used in few-shot prompting to select examples for a prompt. Async programming: The basics that one should know to use LangChain in an asynchronous context. Callbacks: Callbacks enable the execution of custom auxiliary code in built-in components. Callbacks are used to stream outputs from LLMs in LangChain, trace the intermediate steps of an application, and more. Tracing: The process of recording the steps that an application takes to go from input to output. Tracing is essential for debugging and diagnosing issues in complex applications. Evaluation: The process of assessing the performance and effectiveness of AI applications. This involves testing the model's responses against a set of predefined criteria or benchmarks to ensure it meets the desired quality standards and fulfills the intended purpose. This process is vital for building reliable applications. Testing: The process of verifying that a component of an integration or application works as expected. Testing is essential for ensuring that the application behaves correctly and that changes to the codebase do not introduce new bugs.</p>","tags":["source"]},{"location":"sources/python.langchain.com-docs-concepts/#glossary","title":"Glossary","text":"<p>AIMessageChunk: A partial response from an AI message. Used when streaming responses from a chat model. AIMessage: Represents a complete response from an AI model. astream_events: Stream granular information from LCEL chains. BaseTool: The base class for all tools in LangChain. batch: Use to execute a runnable with batch inputs. bind_tools: Allows models to interact with tools. Caching: Storing results to avoid redundant calls to a chat model. Chat models: Chat models that handle multiple data modalities. Configurable runnables: Creating configurable Runnables. Context window: The maximum size of input a chat model can process. Conversation patterns: Common patterns in chat interactions. Document: LangChain's representation of a document. Embedding models: Models that generate vector embeddings for various data types. HumanMessage: Represents a message from a human user. InjectedState: A state injected into a tool function. InjectedStore: A store that can be injected into a tool for data persistence. InjectedToolArg: Mechanism to inject arguments into tool functions. input and output types: Types used for input and output in Runnables. Integration packages: Third-party packages that integrate with LangChain. Integration tests: Tests that verify the correctness of the interaction between components, usually run with access to the underlying API that powers an integration. invoke: A standard method to invoke a Runnable. JSON mode: Returning responses in JSON format. langchain-community: Community-driven components for LangChain. langchain-core: Core langchain package. Includes base interfaces and in-memory implementations. langchain: A package for higher level components (e.g., some pre-built chains). langgraph: Powerful orchestration layer for LangChain. Use to build complex pipelines and workflows. langserve: Used to deploy LangChain Runnables as REST endpoints. Uses FastAPI. Works primarily for LangChain Runnables, does not currently integrate with LangGraph. LLMs (legacy): Older language models that take a string as input and return a string as output. Managing chat history: Techniques to maintain and manage the chat history. OpenAI format: OpenAI's message format for chat models. Propagation of RunnableConfig: Propagating configuration through Runnables. Read if working with python 3.9, 3.10 and async. rate-limiting: Client side rate limiting for chat models. RemoveMessage: An abstraction used to remove a message from chat history, used primarily in LangGraph. role: Represents the role (e.g., user, assistant) of a chat message. RunnableConfig: Use to pass run time information to Runnables (e.g., run_name, run_id, tags, metadata, max_concurrency, recursion_limit, configurable). Standard parameters for chat models: Parameters such as API key, temperature, and max_tokens. Standard tests: A defined set of unit and integration tests that all integrations must pass. stream: Use to stream output from a Runnable or a graph. Tokenization: The process of converting data into tokens and vice versa. Tokens: The basic unit that a language model reads, processes, and generates under the hood. Tool artifacts: Add artifacts to the output of a tool that will not be sent to the model, but will be available for downstream processing. Tool binding: Binding tools to models. @tool: Decorator for creating tools in LangChain. Toolkits: A collection of tools that can be used together. ToolMessage: Represents a message that contains the results of a tool execution. Unit tests: Tests that verify the correctness of individual components, run in isolation without access to the Internet. Vector stores: Datastores specialized for storing and efficiently searching vector embeddings. with_structured_output: A helper method for chat models that natively support tool calling to get structured output matching a given schema specified via Pydantic, JSON schema or a function. with_types: Method to overwrite the input and output types of a runnable. Useful when working with complex LCEL chains and deploying with LangServe.</p>","tags":["source"]},{"location":"sources/www.anthropic.com-engineering-building-effective-agents/","title":"www.anthropic.com-engineering-building-effective-agents","text":"<p>Synthesis: TODO</p> <p>Over the past year, we've worked with dozens of teams building large language model (LLM) agents across industries. Consistently, the most successful implementations weren't using complex frameworks or specialized libraries. Instead, they were building with simple, composable patterns. In this post, we share what we\u2019ve learned from working with our customers and building agents ourselves, and give practical advice for developers on building effective agents.</p>","tags":["source"]},{"location":"sources/www.anthropic.com-engineering-building-effective-agents/#what-are-agents","title":"What are agents?","text":"<p>\"Agent\" can be defined in several ways. Some customers define agents as fully autonomous systems that operate independently over extended periods, using various tools to accomplish complex tasks. Others use the term to describe more prescriptive implementations that follow predefined workflows. At Anthropic, we categorize all these variations as agentic systems, but draw an important architectural distinction between workflows and ** agents: Workflowsare systems where LLMs and tools are orchestrated through predefined code paths. Agents**, on the other hand, are systems where LLMs dynamically direct their own processes and tool usage, maintaining control over how they accomplish tasks. Below, we will explore both types of agentic systems in detail. In Appendix 1 (\u201cAgents in Practice\u201d), we describe two domains where customers have found particular value in using these kinds of systems.</p>","tags":["source"]},{"location":"sources/www.anthropic.com-engineering-building-effective-agents/#when-and-when-not-to-use-agents","title":"When (and when not) to use agents","text":"<p>When building applications with LLMs, we recommend finding the simplest solution possible, and only increasing complexity when needed. This might mean not building agentic systems at all. Agentic systems often trade latency and cost for better task performance, and you should consider when this tradeoff makes sense. When more complexity is warranted, workflows offer predictability and consistency for well-defined tasks, whereas agents are the better option when flexibility and model-driven decision-making are needed at scale. For many applications, however, optimizing single LLM calls with retrieval and in-context examples is usually enough.</p>","tags":["source"]},{"location":"sources/www.anthropic.com-engineering-building-effective-agents/#when-and-how-to-use-frameworks","title":"When and how to use frameworks","text":"<p>There are many frameworks that make agentic systems easier to implement, including: - LangGraph from LangChain; - Amazon Bedrock's AI Agent framework; - Rivet, a drag and drop GUI LLM workflow builder; and - Vellum, another GUI tool for building and testing complex workflows. These frameworks make it easy to get started by simplifying standard low-level tasks like calling LLMs, defining and parsing tools, and chaining calls together. However, they often create extra layers of abstraction that can obscure the underlying prompts and responses, making them harder to debug. They can also make it tempting to add complexity when a simpler setup would suffice. We suggest that developers start by using LLM APIs directly: many patterns can be implemented in a few lines of code. If you do use a framework, ensure you understand the underlying code. Incorrect assumptions about what's under the hood are a common source of customer error. See our cookbook for some sample implementations.</p>","tags":["source"]},{"location":"sources/www.anthropic.com-engineering-building-effective-agents/#building-blocks-workflows-and-agents","title":"Building blocks, workflows, and agents","text":"<p>In this section, we\u2019ll explore the common patterns for agentic systems we\u2019ve seen in production. We'll start with our foundational building block\u2014the augmented LLM\u2014and progressively increase complexity, from simple compositional workflows to autonomous agents.</p>","tags":["source"]},{"location":"sources/www.anthropic.com-engineering-building-effective-agents/#building-block-the-augmented-llm","title":"Building block: The augmented LLM","text":"<p>The basic building block of agentic systems is an LLM enhanced with augmentations such as retrieval, tools, and memory. Our current models can actively use these capabilities\u2014generating their own search queries, selecting appropriate tools, and determining what information to retain. We recommend focusing on two key aspects of the implementation: tailoring these capabilities to your specific use case and ensuring they provide an easy, well-documented interface for your LLM. While there are many ways to implement these augmentations, one approach is through our recently released Model Context Protocol, which allows developers to integrate with a growing ecosystem of third-party tools with a simple client implementation. For the remainder of this post, we'll assume each LLM call has access to these augmented capabilities.</p>","tags":["source"]},{"location":"sources/www.anthropic.com-engineering-building-effective-agents/#workflow-prompt-chaining","title":"Workflow: Prompt chaining","text":"<p>Prompt chaining decomposes a task into a sequence of steps, where each LLM call processes the output of the previous one. You can add programmatic checks (see \"gate\u201d in the diagram below) on any intermediate steps to ensure that the process is still on track. When to use this workflow: This workflow is ideal for situations where the task can be easily and cleanly decomposed into fixed subtasks. The main goal is to trade off latency for higher accuracy, by making each LLM call an easier task. Examples where prompt chaining is useful: - Generating Marketing copy, then translating it into a different language. - Writing an outline of a document, checking that the outline meets certain criteria, then writing the document based on the outline.</p>","tags":["source"]},{"location":"sources/www.anthropic.com-engineering-building-effective-agents/#workflow-routing","title":"Workflow: Routing","text":"<p>Routing classifies an input and directs it to a specialized followup task. This workflow allows for separation of concerns, and building more specialized prompts. Without this workflow, optimizing for one kind of input can hurt performance on other inputs. When to use this workflow: Routing works well for complex tasks where there are distinct categories that are better handled separately, and where classification can be handled accurately, either by an LLM or a more traditional classification model/algorithm. Examples where routing is useful: - Directing different types of customer service queries (general questions, refund requests, technical support) into different downstream processes, prompts, and tools. - Routing easy/common questions to smaller models like Claude 3.5 Haiku and hard/unusual questions to more capable models like Claude 3.5 Sonnet to optimize cost and speed.</p>","tags":["source"]},{"location":"sources/www.anthropic.com-engineering-building-effective-agents/#workflow-parallelization","title":"Workflow: Parallelization","text":"<p>LLMs can sometimes work simultaneously on a task and have their outputs aggregated programmatically. This workflow, parallelization, manifests in two key variations: Sectioning: Breaking a task into independent subtasks run in parallel. Voting:Running the same task multiple times to get diverse outputs. When to use this workflow: Parallelization is effective when the divided subtasks can be parallelized for speed, or when multiple perspectives or attempts are needed for higher confidence results. For complex tasks with multiple considerations, LLMs generally perform better when each consideration is handled by a separate LLM call, allowing focused attention on each specific aspect. Examples where parallelization is useful: Sectioning: - Implementing guardrails where one model instance processes user queries while another screens them for inappropriate content or requests. This tends to perform better than having the same LLM call handle both guardrails and the core response. - Automating evals for evaluating LLM performance, where each LLM call evaluates a different aspect of the model\u2019s performance on a given prompt. Voting: - Reviewing a piece of code for vulnerabilities, where several different prompts review and flag the code if they find a problem. - Evaluating whether a given piece of content is inappropriate, with multiple prompts evaluating different aspects or requiring different vote thresholds to balance false positives and negatives.</p>","tags":["source"]},{"location":"sources/www.anthropic.com-engineering-building-effective-agents/#workflow-orchestrator-workers","title":"Workflow: Orchestrator-workers","text":"<p>In the orchestrator-workers workflow, a central LLM dynamically breaks down tasks, delegates them to worker LLMs, and synthesizes their results. When to use this workflow: This workflow is well-suited for complex tasks where you can\u2019t predict the subtasks needed (in coding, for example, the number of files that need to be changed and the nature of the change in each file likely depend on the task). Whereas it\u2019s topographically similar, the key difference from parallelization is its flexibility\u2014subtasks aren't pre-defined, but determined by the orchestrator based on the specific input. Example where orchestrator-workers is useful: - Coding products that make complex changes to multiple files each time. - Search tasks that involve gathering and analyzing information from multiple sources for possible relevant information.</p>","tags":["source"]},{"location":"sources/www.anthropic.com-engineering-building-effective-agents/#workflow-evaluator-optimizer","title":"Workflow: Evaluator-optimizer","text":"<p>In the evaluator-optimizer workflow, one LLM call generates a response while another provides evaluation and feedback in a loop. When to use this workflow: This workflow is particularly effective when we have clear evaluation criteria, and when iterative refinement provides measurable value. The two signs of good fit are, first, that LLM responses can be demonstrably improved when a human articulates their feedback; and second, that the LLM can provide such feedback. This is analogous to the iterative writing process a human writer might go through when producing a polished document. Examples where evaluator-optimizer is useful: - Literary translation where there are nuances that the translator LLM might not capture initially, but where an evaluator LLM can provide useful critiques. - Complex search tasks that require multiple rounds of searching and analysis to gather comprehensive information, where the evaluator decides whether further searches are warranted.</p>","tags":["source"]},{"location":"sources/www.anthropic.com-engineering-building-effective-agents/#agents","title":"Agents","text":"<p>Agents are emerging in production as LLMs mature in key capabilities\u2014understanding complex inputs, engaging in reasoning and planning, using tools reliably, and recovering from errors. Agents begin their work with either a command from, or interactive discussion with, the human user. Once the task is clear, agents plan and operate independently, potentially returning to the human for further information or judgement. During execution, it's crucial for the agents to gain \u201cground truth\u201d from the environment at each step (such as tool call results or code execution) to assess its progress. Agents can then pause for human feedback at checkpoints or when encountering blockers. The task often terminates upon completion, but it\u2019s also common to include stopping conditions (such as a maximum number of iterations) to maintain control. Agents can handle sophisticated tasks, but their implementation is often straightforward. They are typically just LLMs using tools based on environmental feedback in a loop. It is therefore crucial to design toolsets and their documentation clearly and thoughtfully. We expand on best practices for tool development in Appendix 2 (\"Prompt Engineering your Tools\"). When to use agents: Agents can be used for open-ended problems where it\u2019s difficult or impossible to predict the required number of steps, and where you can\u2019t hardcode a fixed path. The LLM will potentially operate for many turns, and you must have some level of trust in its decision-making. Agents' autonomy makes them ideal for scaling tasks in trusted environments. The autonomous nature of agents means higher costs, and the potential for compounding errors. We recommend extensive testing in sandboxed environments, along with the appropriate guardrails. Examples where agents are useful: The following examples are from our own implementations: - A coding Agent to resolve SWE-bench tasks, which involve edits to many files based on a task description; - Our \u201ccomputer use\u201d reference implementation, where Claude uses a computer to accomplish tasks.</p>","tags":["source"]},{"location":"sources/www.anthropic.com-engineering-building-effective-agents/#combining-and-customizing-these-patterns","title":"Combining and customizing these patterns","text":"<p>These building blocks aren't prescriptive. They're common patterns that developers can shape and combine to fit different use cases. The key to success, as with any LLM features, is measuring performance and iterating on implementations. To repeat: you should consider adding complexity only when it demonstrably improves outcomes.</p>","tags":["source"]},{"location":"sources/www.anthropic.com-engineering-building-effective-agents/#summary","title":"Summary","text":"<p>Success in the LLM space isn't about building the most sophisticated system. It's about building the right system for your needs. Start with simple prompts, optimize them with comprehensive evaluation, and add multi-step agentic systems only when simpler solutions fall short. When implementing agents, we try to follow three core principles: - Maintain simplicityin your agent's design. - Prioritize transparencyby explicitly showing the agent\u2019s planning steps. - Carefully craft your agent-computer interface (ACI) through thorough tool documentation and testing. Frameworks can help you get started quickly, but don't hesitate to reduce abstraction layers and build with basic components as you move to production. By following these principles, you can create agents that are not only powerful but also reliable, maintainable, and trusted by their users.</p>","tags":["source"]},{"location":"sources/www.anthropic.com-engineering-building-effective-agents/#acknowledgements","title":"Acknowledgements","text":"<p>Written by Erik Schluntz and Barry Zhang. This work draws upon our experiences building agents at Anthropic and the valuable insights shared by our customers, for which we're deeply grateful.</p>","tags":["source"]},{"location":"sources/www.anthropic.com-engineering-building-effective-agents/#appendix-1-agents-in-practice","title":"Appendix 1: Agents in practice","text":"<p>Our work with customers has revealed two particularly promising applications for AI agents that demonstrate the practical value of the patterns discussed above. Both applications illustrate how agents add the most value for tasks that require both conversation and action, have clear success criteria, enable feedback loops, and integrate meaningful human oversight.</p>","tags":["source"]},{"location":"sources/www.anthropic.com-engineering-building-effective-agents/#a-customer-support","title":"A. Customer support","text":"<p>Customer support combines familiar chatbot interfaces with enhanced capabilities through tool integration. This is a natural fit for more open-ended agents because: - Support interactions naturally follow a conversation flow while requiring access to external information and actions; - Tools can be integrated to pull customer data, order history, and knowledge base articles; - Actions such as issuing refunds or updating tickets can be handled programmatically; and - Success can be clearly measured through user-defined resolutions. Several companies have demonstrated the viability of this approach through usage-based pricing models that charge only for successful resolutions, showing confidence in their agents' effectiveness.</p>","tags":["source"]},{"location":"sources/www.anthropic.com-engineering-building-effective-agents/#b-coding-agents","title":"B. Coding agents","text":"<p>The software development space has shown remarkable potential for LLM features, with capabilities evolving from code completion to autonomous problem-solving. Agents are particularly effective because: - Code solutions are verifiable through automated tests; - Agents can iterate on solutions using test results as feedback; - The problem space is well-defined and structured; and - Output quality can be measured objectively. In our own implementation, agents can now solve real GitHub issues in the SWE-bench Verified benchmark based on the pull request description alone. However, whereas automated testing helps verify functionality, human review remains crucial for ensuring solutions align with broader system requirements.</p>","tags":["source"]},{"location":"sources/www.anthropic.com-engineering-building-effective-agents/#appendix-2-prompt-engineering-your-tools","title":"Appendix 2: Prompt engineering your tools","text":"<p>No matter which agentic system you're building, tools will likely be an important part of your agent. Tools enable Claude to interact with external services and APIs by specifying their exact structure and definition in our API. When Claude responds, it will include a tool use block in the API response if it plans to invoke a tool. Tool definitions and specifications should be given just as much prompt engineering attention as your overall prompts. In this brief appendix, we describe how to prompt engineer your tools. There are often several ways to specify the same action. For instance, you can specify a file edit by writing a diff, or by rewriting the entire file. For structured output, you can return code inside markdown or inside JSON. In software engineering, differences like these are cosmetic and can be converted losslessly from one to the other. However, some formats are much more difficult for an LLM to write than others. Writing a diff requires knowing how many lines are changing in the chunk header before the new code is written. Writing code inside JSON (compared to markdown) requires extra escaping of newlines and quotes. Our suggestions for deciding on tool formats are the following: - Give the model enough tokens to \"think\" before it writes itself into a corner. - Keep the format close to what the model has seen naturally occurring in text on the internet. - Make sure there's no formatting \"overhead\" such as having to keep an accurate count of thousands of lines of code, or string-escaping any code it writes. One rule of thumb is to think about how much effort goes into human-computer interfaces (HCI), and plan to invest just as much effort in creating good agent-computer interfaces (ACI). Here are some thoughts on how to do so: - Put yourself in the model's shoes. Is it obvious how to use this tool, based on the description and parameters, or would you need to think carefully about it? If so, then it\u2019s probably also true for the model. A good tool definition often includes example usage, edge cases, input format requirements, and clear boundaries from other tools. - How can you change parameter names or descriptions to make things more obvious? Think of this as writing a great docstring for a junior developer on your team. This is especially important when using many similar tools. - Test how the model uses your tools: Run many example inputs in our workbench to see what mistakes the model makes, and iterate. - Poka-yoke your tools. Change the arguments so that it is harder to make mistakes. While building our agent for SWE-bench, we actually spent more time optimizing our tools than the overall prompt. For example, we found that the model would make mistakes with tools using relative filepaths after the agent had moved out of the root directory. To fix this, we changed the tool to always require absolute filepaths\u2014and we found that the model used this method flawlessly.</p> <p></p> Figure 1. Credit: [www.anthropic.com](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2Fd3083d3f40bb2b6f477901cc9a240738d3dd1371-2401x1000.png&amp;w=3840&amp;q=75), License: internal-copy <p></p> Figure 2. Credit: [www.anthropic.com](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F7418719e3dab222dccb379b8879e1dc08ad34c78-2401x1000.png&amp;w=3840&amp;q=75), License: internal-copy <p></p> Figure 3. Credit: [www.anthropic.com](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F5c0c0e9fe4def0b584c04d37849941da55e5e71c-2401x1000.png&amp;w=3840&amp;q=75), License: internal-copy <p></p> Figure 4. Credit: [www.anthropic.com](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F406bb032ca007fd1624f261af717d70e6ca86286-2401x1000.png&amp;w=3840&amp;q=75), License: internal-copy <p></p> Figure 5. Credit: [www.anthropic.com](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F8985fc683fae4780fb34eab1365ab78c7e51bc8e-2401x1000.png&amp;w=3840&amp;q=75), License: internal-copy <p></p> Figure 6. Credit: [www.anthropic.com](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F14f51e6406ccb29e695da48b17017e899a6119c7-2401x1000.png&amp;w=3840&amp;q=75), License: internal-copy <p></p> Figure 7. Credit: [www.anthropic.com](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F58d9f10c985c4eb5d53798dea315f7bb5ab6249e-2401x1000.png&amp;w=3840&amp;q=75), License: internal-copy <p></p> Figure 8. Credit: [www.anthropic.com](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F4b9a1f4eb63d5962a6e1746ac26bbc857cf3474f-2400x1666.png&amp;w=3840&amp;q=75), License: internal-copy","tags":["source"]}]}